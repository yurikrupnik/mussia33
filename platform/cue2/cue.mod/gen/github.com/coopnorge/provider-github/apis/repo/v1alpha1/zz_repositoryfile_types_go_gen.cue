// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/coopnorge/provider-github/apis/repo/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#RepositoryFileObservation: {
	// The SHA of the commit that modified the file.
	// The SHA of the commit that modified the file
	commitSha?: null | string @go(CommitSha,*string)
	id?:        null | string @go(ID,*string)

	// The SHA blob of the file.
	// The blob SHA of the file
	sha?: null | string @go(Sha,*string)
}

#RepositoryFileParameters: {
	// Git branch (defaults to main).
	// The branch must already exist, it will not be created if it does not already exist.
	// The branch name, defaults to "main"
	// +crossplane:generate:reference:type=Branch
	// +kubebuilder:validation:Optional
	branch?: null | string @go(Branch,*string)

	// Reference to a Branch to populate branch.
	// +kubebuilder:validation:Optional
	branchRef?: null | v1.#Reference @go(BranchRef,*v1.Reference)

	// Selector for a Branch to populate branch.
	// +kubebuilder:validation:Optional
	branchSelector?: null | v1.#Selector @go(BranchSelector,*v1.Selector)

	// Committer author name to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This maybe useful when a branch protection rule requires signed commits.
	// The commit author name, defaults to the authenticated user's name. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
	// +kubebuilder:validation:Optional
	commitAuthor?: null | string @go(CommitAuthor,*string)

	// Committer email address to use. NOTE: GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App. This may be useful when a branch protection rule requires signed commits.
	// The commit author email address, defaults to the authenticated user's email address. GitHub app users may omit author and email information so GitHub can verify commits as the GitHub App.
	// +kubebuilder:validation:Optional
	commitEmail?: null | string @go(CommitEmail,*string)

	// Commit message when adding or updating the managed file.
	// The commit message when creating, updating or deleting the file
	// +kubebuilder:validation:Optional
	commitMessage?: null | string @go(CommitMessage,*string)

	// The file content.
	// The file's content
	// +kubebuilder:validation:Required
	content?: null | string @go(Content,*string)

	// The path of the file to manage.
	// The file path to manage
	// +kubebuilder:validation:Required
	file?: null | string @go(File,*string)

	// Enable overwriting existing files
	// Enable overwriting existing files, defaults to "false"
	// +kubebuilder:validation:Optional
	overwriteOnCreate?: null | bool @go(OverwriteOnCreate,*bool)

	// The repository to create the file in.
	// The repository name
	// +crossplane:generate:reference:type=Repository
	// +kubebuilder:validation:Optional
	repository?: null | string @go(Repository,*string)

	// Reference to a Repository to populate repository.
	// +kubebuilder:validation:Optional
	repositoryRef?: null | v1.#Reference @go(RepositoryRef,*v1.Reference)

	// Selector for a Repository to populate repository.
	// +kubebuilder:validation:Optional
	repositorySelector?: null | v1.#Selector @go(RepositorySelector,*v1.Selector)
}

// RepositoryFileSpec defines the desired state of RepositoryFile
#RepositoryFileSpec: {
	v1.#ResourceSpec
	forProvider: #RepositoryFileParameters @go(ForProvider)
}

// RepositoryFileStatus defines the observed state of RepositoryFile.
#RepositoryFileStatus: {
	v1.#ResourceStatus
	atProvider?: #RepositoryFileObservation @go(AtProvider)
}

// RepositoryFile is the Schema for the RepositoryFiles API. Creates and manages files within a GitHub repository
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
#RepositoryFile: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta    @go(ObjectMeta)
	spec:      #RepositoryFileSpec   @go(Spec)
	status?:   #RepositoryFileStatus @go(Status)
}

// RepositoryFileList contains a list of RepositoryFiles
#RepositoryFileList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#RepositoryFile] @go(Items,[]RepositoryFile)
}
