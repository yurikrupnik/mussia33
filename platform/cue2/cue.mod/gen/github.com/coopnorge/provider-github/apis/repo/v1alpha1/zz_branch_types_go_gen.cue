// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/coopnorge/provider-github/apis/repo/v1alpha1

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

#BranchObservation: {
	// An etag representing the Branch object.
	etag?: null | string @go(Etag,*string)
	id?:   null | string @go(ID,*string)

	// A string representing a branch reference, in the form of refs/heads/<branch>.
	ref?: null | string @go(Ref,*string)

	// A string storing the reference's HEAD commit's SHA1.
	sha?: null | string @go(Sha,*string)
}

#BranchParameters: {
	// The GitHub repository name.
	// +crossplane:generate:reference:type=github.com/coopnorge/provider-github/apis/repo/v1alpha1.Repository
	// +kubebuilder:validation:Optional
	repository?: null | string @go(Repository,*string)

	// Reference to a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	repositoryRef?: null | v1.#Reference @go(RepositoryRef,*v1.Reference)

	// Selector for a Repository in repo to populate repository.
	// +kubebuilder:validation:Optional
	repositorySelector?: null | v1.#Selector @go(RepositorySelector,*v1.Selector)

	// The branch name to start from. Defaults to main.
	// +kubebuilder:validation:Optional
	sourceBranch?: null | string @go(SourceBranch,*string)

	// The commit hash to start from. Defaults to the tip of source_branch. If provided, source_branch is ignored.
	// +kubebuilder:validation:Optional
	sourceSha?: null | string @go(SourceSha,*string)
}

// BranchSpec defines the desired state of Branch
#BranchSpec: {
	v1.#ResourceSpec
	forProvider: #BranchParameters @go(ForProvider)
}

// BranchStatus defines the observed state of Branch.
#BranchStatus: {
	v1.#ResourceStatus
	atProvider?: #BranchObservation @go(AtProvider)
}

// Branch is the Schema for the Branchs API. Creates and manages branches within GitHub repositories.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,github}
#Branch: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #BranchSpec        @go(Spec)
	status?:   #BranchStatus      @go(Status)
}

// BranchList contains a list of Branchs
#BranchList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Branch] @go(Items,[]Branch)
}
