// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane-contrib/provider-helm/apis/release/v1beta1

package v1beta1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"k8s.io/apimachinery/pkg/runtime"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"helm.sh/helm/v3/pkg/release"
	"k8s.io/api/core/v1"
)

// A ChartSpec defines the chart spec for a Release
#ChartSpec: {
	// Repository: Helm repository URL, required if ChartSpec.URL not set
	repository?: string @go(Repository)

	// Name of Helm chart, required if ChartSpec.URL not set
	name?: string @go(Name)

	// Version of Helm chart, late initialized with latest version if not set
	version?: string @go(Version)

	// URL to chart package (typically .tgz), optional and overrides others fields in the spec
	url?: string @go(URL)

	// PullSecretRef is reference to the secret containing credentials to helm repository
	pullSecretRef?: xpv1.#SecretReference @go(PullSecretRef)
}

// NamespacedName represents a namespaced object name
#NamespacedName: {
	namespace: string @go(Namespace)
	name:      string @go(Name)
}

// DataKeySelector defines required spec to access a key of a configmap or secret
#DataKeySelector: {
	#NamespacedName
	key?:      string @go(Key)
	optional?: bool   @go(Optional)
}

// ValueFromSource represents source of a value
#ValueFromSource: {
	configMapKeyRef?: null | #DataKeySelector @go(ConfigMapKeyRef,*DataKeySelector)
	secretKeyRef?:    null | #DataKeySelector @go(SecretKeyRef,*DataKeySelector)
}

// SetVal represents a "set" value override in a Release
#SetVal: {
	name:       string                  @go(Name)
	value?:     string                  @go(Value)
	valueFrom?: null | #ValueFromSource @go(ValueFrom,*ValueFromSource)
}

// ValuesSpec defines the Helm value overrides spec for a Release
#ValuesSpec: {
	// +kubebuilder:pruning:PreserveUnknownFields
	values?: runtime.#RawExtension @go(Values)
	valuesFrom?: [...#ValueFromSource] @go(ValuesFrom,[]ValueFromSource)
	set?: [...#SetVal] @go(Set,[]SetVal)
}

// ReleaseParameters are the configurable fields of a Release.
#ReleaseParameters: {
	chart: #ChartSpec @go(Chart)

	// Namespace to install the release into.
	namespace: string @go(Namespace)

	// SkipCreateNamespace won't create the namespace for the release. This requires the namespace to already exist.
	skipCreateNamespace?: bool @go(SkipCreateNamespace)

	// Wait for the release to become ready.
	wait?: bool @go(Wait)

	// WaitTimeout is the duration Helm will wait for the release to become
	// ready. Only applies if wait is also set. Defaults to 5m.
	waitTimeout?: null | metav1.#Duration @go(WaitTimeout,*metav1.Duration)

	// PatchesFrom describe patches to be applied to the rendered manifests.
	patchesFrom?: [...#ValueFromSource] @go(PatchesFrom,[]ValueFromSource)

	#ValuesSpec

	// SkipCRDs skips installation of CRDs for the release.
	skipCRDs?: bool @go(SkipCRDs)

	// InsecureSkipTLSVerify skips tls certificate checks for the chart download
	insecureSkipTLSVerify?: bool @go(InsecureSkipTLSVerify)
}

// ReleaseObservation are the observable fields of a Release.
#ReleaseObservation: {
	state?:              release.#Status @go(State)
	releaseDescription?: string          @go(ReleaseDescription)
	revision?:           int             @go(Revision)
}

// A ReleaseSpec defines the desired state of a Release.
#ReleaseSpec: {
	xpv1.#ResourceSpec
	connectionDetails?: [...#ConnectionDetail] @go(ConnectionDetails,[]ConnectionDetail)
	forProvider: #ReleaseParameters @go(ForProvider)

	// RollbackRetriesLimit is max number of attempts to retry Helm deployment by rolling back the release.
	rollbackLimit?: null | int32 @go(RollbackRetriesLimit,*int32)
}

// A ReleaseStatus represents the observed state of a Release.
#ReleaseStatus: {
	xpv1.#ResourceStatus
	atProvider?: #ReleaseObservation @go(AtProvider)
	patchesSha?: string              @go(PatchesSha)
	failed?:     int32               @go(Failed)
	synced?:     bool                @go(Synced)
}

// ConnectionDetail todo
#ConnectionDetail: {
	v1.#ObjectReference
	toConnectionSecretKey?: string @go(ToConnectionSecretKey)

	// SkipPartOfReleaseCheck skips check for meta.helm.sh/release-name annotation.
	skipPartOfReleaseCheck?: bool @go(SkipPartOfReleaseCheck)
}

// A Release is an example API type
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="CHART",type="string",JSONPath=".spec.forProvider.chart.name"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.forProvider.chart.version"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="STATE",type="string",JSONPath=".status.atProvider.state"
// +kubebuilder:printcolumn:name="REVISION",type="string",JSONPath=".status.atProvider.revision"
// +kubebuilder:printcolumn:name="DESCRIPTION",type="string",JSONPath=".status.atProvider.releaseDescription"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,helm}
#Release: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec:      #ReleaseSpec       @go(Spec)
	status?:   #ReleaseStatus     @go(Status)
}

// ReleaseList contains a list of Release
#ReleaseList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Release] @go(Items,[]Release)
}
