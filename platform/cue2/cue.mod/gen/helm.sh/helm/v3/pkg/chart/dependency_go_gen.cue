// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go helm.sh/helm/v3/pkg/chart

package chart

import "time"

// Dependency describes a chart upon which another chart depends.
//
// Dependencies can be used to express developer intent, or to capture the state
// of a chart.
#Dependency: {
	// Name is the name of the dependency.
	//
	// This must mach the name in the dependency's Chart.yaml.
	name: string @go(Name)

	// Version is the version (range) of this chart.
	//
	// A lock file will always produce a single version, while a dependency
	// may contain a semantic version range.
	version?: string @go(Version)

	// The URL to the repository.
	//
	// Appending `index.yaml` to this string should result in a URL that can be
	// used to fetch the repository index.
	repository: string @go(Repository)

	// A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
	condition?: string @go(Condition)

	// Tags can be used to group charts for enabling/disabling together
	tags?: [...string] @go(Tags,[]string)

	// Enabled bool determines if chart should be loaded
	enabled?: bool @go(Enabled)

	// ImportValues holds the mapping of source values to parent key to be imported. Each item can be a
	// string or pair of child/parent sublist items.
	"import-values"?: [...] @go(ImportValues,[]interface{})

	// Alias usable alias to be used for the chart
	alias?: string @go(Alias)
}

// Lock is a lock file for dependencies.
//
// It represents the state that the dependencies should be in.
#Lock: {
	// Generated is the date the lock file was last generated.
	generated: time.Time @go(Generated)

	// Digest is a hash of the dependencies in Chart.yaml.
	digest: string @go(Digest)

	// Dependencies is the list of dependencies that this lock file has locked.
	dependencies: [...null | #Dependency] @go(Dependencies,[]*Dependency)
}
