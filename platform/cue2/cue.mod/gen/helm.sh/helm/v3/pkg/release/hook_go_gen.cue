// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go helm.sh/helm/v3/pkg/release

package release

import "helm.sh/helm/v3/pkg/time"

// HookEvent specifies the hook event
#HookEvent: string // #enumHookEvent

#enumHookEvent:
	#HookPreInstall |
	#HookPostInstall |
	#HookPreDelete |
	#HookPostDelete |
	#HookPreUpgrade |
	#HookPostUpgrade |
	#HookPreRollback |
	#HookPostRollback |
	#HookTest

#HookPreInstall:   #HookEvent & "pre-install"
#HookPostInstall:  #HookEvent & "post-install"
#HookPreDelete:    #HookEvent & "pre-delete"
#HookPostDelete:   #HookEvent & "post-delete"
#HookPreUpgrade:   #HookEvent & "pre-upgrade"
#HookPostUpgrade:  #HookEvent & "post-upgrade"
#HookPreRollback:  #HookEvent & "pre-rollback"
#HookPostRollback: #HookEvent & "post-rollback"
#HookTest:         #HookEvent & "test"

// HookDeletePolicy specifies the hook delete policy
#HookDeletePolicy: string // #enumHookDeletePolicy

#enumHookDeletePolicy:
	#HookSucceeded |
	#HookFailed |
	#HookBeforeHookCreation

#HookSucceeded:          #HookDeletePolicy & "hook-succeeded"
#HookFailed:             #HookDeletePolicy & "hook-failed"
#HookBeforeHookCreation: #HookDeletePolicy & "before-hook-creation"

#HookAnnotation: "helm.sh/hook"

#HookWeightAnnotation: "helm.sh/hook-weight"

#HookDeleteAnnotation: "helm.sh/hook-delete-policy"

// Hook defines a hook object.
#Hook: {
	name?: string @go(Name)

	// Kind is the Kubernetes kind.
	kind?: string @go(Kind)

	// Path is the chart-relative path to the template.
	path?: string @go(Path)

	// Manifest is the manifest contents.
	manifest?: string @go(Manifest)

	// Events are the events that this hook fires on.
	events?: [...#HookEvent] @go(Events,[]HookEvent)

	// LastRun indicates the date/time this was last run.
	last_run?: #HookExecution @go(LastRun)

	// Weight indicates the sort order for execution among similar Hook type
	weight?: int @go(Weight)

	// DeletePolicies are the policies that indicate when to delete the hook
	delete_policies?: [...#HookDeletePolicy] @go(DeletePolicies,[]HookDeletePolicy)
}

// A HookExecution records the result for the last execution of a hook for a given release.
#HookExecution: {
	// StartedAt indicates the date/time this hook was started
	started_at?: time.#Time @go(StartedAt)

	// CompletedAt indicates the date/time this hook was completed.
	completed_at?: time.#Time @go(CompletedAt)

	// Phase indicates whether the hook completed successfully
	phase: #HookPhase @go(Phase)
}

// A HookPhase indicates the state of a hook execution
#HookPhase: string // #enumHookPhase

#enumHookPhase:
	#HookPhaseUnknown |
	#HookPhaseRunning |
	#HookPhaseSucceeded |
	#HookPhaseFailed

// HookPhaseUnknown indicates that a hook is in an unknown state
#HookPhaseUnknown: #HookPhase & "Unknown"

// HookPhaseRunning indicates that a hook is currently executing
#HookPhaseRunning: #HookPhase & "Running"

// HookPhaseSucceeded indicates that hook execution succeeded
#HookPhaseSucceeded: #HookPhase & "Succeeded"

// HookPhaseFailed indicates that hook execution failed
#HookPhaseFailed: #HookPhase & "Failed"
