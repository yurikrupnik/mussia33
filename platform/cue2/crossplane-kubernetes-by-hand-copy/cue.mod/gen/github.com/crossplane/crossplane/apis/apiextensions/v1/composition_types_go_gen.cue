// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/crossplane/crossplane/apis/apiextensions/v1

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// CompositionSpec specifies desired state of a composition.
#CompositionSpec: {
	// CompositeTypeRef specifies the type of composite resource that this
	// composition is compatible with.
	// +immutable
	compositeTypeRef: #TypeReference @go(CompositeTypeRef)

	// Mode controls what type or "mode" of Composition will be used.
	//
	// "Resources" (the default) indicates that a Composition uses what is
	// commonly referred to as "Patch & Transform" or P&T composition. This mode
	// of Composition uses an array of resources, each a template for a composed
	// resource.
	//
	// "Pipeline" indicates that a Composition specifies a pipeline
	// of Composition Functions, each of which is responsible for producing
	// composed resources that Crossplane should create or update. THE PIPELINE
	// MODE IS A BETA FEATURE. It is not honored if the relevant Crossplane
	// feature flag is disabled.
	// +optional
	// +kubebuilder:validation:Enum=Resources;Pipeline
	// +kubebuilder:default=Resources
	mode?: null | #CompositionMode @go(Mode,*CompositionMode)

	// PatchSets define a named set of patches that may be included by any
	// resource in this Composition. PatchSets cannot themselves refer to other
	// PatchSets.
	//
	// PatchSets are only used by the "Resources" mode of Composition. They
	// are ignored by other modes.
	// +optional
	patchSets?: [...#PatchSet] @go(PatchSets,[]PatchSet)

	// Environment configures the environment in which resources are rendered.
	//
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// +optional
	environment?: null | #EnvironmentConfiguration @go(Environment,*EnvironmentConfiguration)

	// Resources is a list of resource templates that will be used when a
	// composite resource referring to this composition is created.
	//
	// Resources are only used by the "Resources" mode of Composition. They are
	// ignored by other modes.
	// +optional
	resources?: [...#ComposedTemplate] @go(Resources,[]ComposedTemplate)

	// Pipeline is a list of composition function steps that will be used when a
	// composite resource referring to this composition is created. One of
	// resources and pipeline must be specified - you cannot specify both.
	//
	// The Pipeline is only used by the "Pipeline" mode of Composition. It is
	// ignored by other modes.
	//
	// THIS IS A BETA FIELD. It is not honored if the relevant Crossplane
	// feature flag is disabled.
	// +optional
	pipeline?: [...#PipelineStep] @go(Pipeline,[]PipelineStep)

	// WriteConnectionSecretsToNamespace specifies the namespace in which the
	// connection secrets of composite resource dynamically provisioned using
	// this composition will be created.
	// This field is planned to be replaced in a future release in favor of
	// PublishConnectionDetailsWithStoreConfigRef. Currently, both could be
	// set independently and connection details would be published to both
	// without affecting each other as long as related fields at MR level
	// specified.
	// +optional
	writeConnectionSecretsToNamespace?: null | string @go(WriteConnectionSecretsToNamespace,*string)

	// PublishConnectionDetailsWithStoreConfig specifies the secret store config
	// with which the connection details of composite resources dynamically
	// provisioned using this composition will be published.
	//
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// +optional
	// +kubebuilder:default={"name": "default"}
	publishConnectionDetailsWithStoreConfigRef?: null | #StoreConfigReference @go(PublishConnectionDetailsWithStoreConfigRef,*StoreConfigReference)
}

// A Composition specifies how a composite resource should be composed.
// +kubebuilder:printcolumn:name="XR-KIND",type="string",JSONPath=".spec.compositeTypeRef.kind"
// +kubebuilder:printcolumn:name="XR-APIVERSION",type="string",JSONPath=".spec.compositeTypeRef.apiVersion"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories=crossplane,shortName=comp
#Composition: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #CompositionSpec   @go(Spec)
}

// CompositionList contains a list of Compositions.
#CompositionList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Composition] @go(Items,[]Composition)
}
