# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, World!

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
      - up xpkg build --ignore "examples/*"
    silent: true
  test-install-multicloud:
    cmds:
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/network/definition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/network/composition-aws.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/network/composition-gcp.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/definition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/composition-gcp.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/composition-aws.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/services/definition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/services/composition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/eks/definition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/eks/composition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/gke/definition.yaml
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/cluster/gke/composition.yaml

#      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/hack/crossplane-cluster-admin-rolebinding.yaml
#      install network
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/examples/network-gcp.yaml
#  install cluster
      - kubectl apply -f https://raw.githubusercontent.com/upbound/platform-ref-multi-k8s/main/examples/cluster-gcp.yaml
  setup:
    dir: platform/crossplane
    cmds:
       - task: install
       - task: create-secret
       - task: create-gcp-provider
       - task: create-resources
  install:
    dir: platform/crossplane
    cmds:
#      - up uxp install
      - helm repo add crossplane-stable https://charts.crossplane.io/stable && helm repo update
      - helm install crossplane --namespace crossplane-system --create-namespace crossplane-stable/crossplane
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm upgrade --install komoplane komodorio/komoplane -n crossplane-ui --create-namespace
      - kubectl -n crossplane-system wait deployment crossplane --for=condition=Available --timeout=180s
      - kubectl get pods -n crossplane-system
      - kubectl get deployments -n crossplane-system
  create-secret:
    cmds:
      - kubectl create secret generic aws-secret -n crossplane-system --from-file=creds=./tmp/aws_creds.txt
      - kubectl create secret generic gcp-secret -n crossplane-system --from-file=creds=./tmp/gcp-credentials.json
      - kubectl create secret generic gcp-secret1 -n crossplane-system --from-file=creds=./tmp/gcp-credentials1.json
      - kubectl create secret generic azure-secret -n crossplane-system --from-file=creds=./tmp/azure.json

  create-gcp-provider:
    dir: platform/crossplane
    cmds:
      - kubectl apply -f gcpProvider.yaml
      - kubectl get providers
      - sleep 60
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-storage" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-storage" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-artifact" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-artifact" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-compute" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-compute" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-cloudrun" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-cloudrun" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-cloudplatform" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-cloudplatform" --for=condition=Installed --timeout=600s
#      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-container" --for=condition=Healthy --timeout=600s
#      - kubectl wait "providers.pkg.crossplane.io/provider-gcp-container" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-aws-s3" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-aws-s3" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-aws-ecr" --for=condition=Healthy --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/provider-aws-ecr" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/upbound-provider-family-gcp" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/upbound-provider-family-aws" --for=condition=Installed --timeout=600s
      - kubectl wait "providers.pkg.crossplane.io/upbound-provider-family-azure" --for=condition=Installed --timeout=600s
      - kubectl get providers
      - kubectl apply -f gcpProviderConfig.yaml
      - kubectl get pkgrev
  create-resources:
    dir: platform/crossplane
    cmds:
      - kubectl apply -f provider-helm-incluster.yaml
      - kubectl apply -f provider-kubernetes-incluster.yaml
      - kubectl apply -f compositeResourceDefinition.yaml
      - kubectl apply -f composition.yaml


      - kubectl apply -f network/definition.yaml
      - kubectl apply -f network/composition-aws.yaml
      - kubectl apply -f network/composition-gcp.yaml

      - kubectl apply -f redis/definition.yaml
      - kubectl apply -f redis/composition-aws.yaml
      - kubectl apply -f redis/composition-gcp.yaml

      - kubectl apply -f sql/definition.yaml
      - kubectl apply -f sql/composition-aws.yaml
      - kubectl apply -f sql/composition-gcp.yaml

      - kubectl apply -f cluster/definition.yaml
#      - kubectl apply -f sql/composition-aws.yaml
      - kubectl apply -f cluster/composition-gcp.yaml

      - kubectl apply -f storage/definition.yaml
      - kubectl apply -f storage/composition-aws.yaml
      - kubectl apply -f storage/composition-gcp.yaml
      - kubectl apply -f registry/definition.yaml
      - kubectl apply -f registry/composition-aws.yaml
      - kubectl apply -f registry/composition-gcp.yaml
      - kubectl apply -f project/definition.yaml
      - kubectl apply -f project/composition-gcp.yaml
#      - kubectl apply -f project/composition-aws.yaml
  get-buckets:
    cmds:
      - kubectl get bucket
      - kubectl get buckets.storage.gcp.upbound.io
  delete-schemas:
    cmds:
      - kubectl delete schema --selector testing.upbound.io/example-name=trigger
  delete-bucket:
    cmds:
      - kubectl delete bucket --selector docs.crossplane.io/example=provider-gcp
  delete-schema:
    cmds:
      - kubectl delete schema --selector testing.upbound.io/example-name=schema
  get-xrd:
    cmds:
      - kubectl get TopicBucket -n test
      - kubectl get topicbucket -A
      - kubectl get xtopicbucket
      - kubectl get xrd
      - kubectl get composite
      - kubectl get composition
      - kubectl get managed
      - kubectl get xdatasetwithbucket
  delete-composite:
    cmds:
      - kubectl delete XTopicBucket my-second-composite-resource
      - kubectl delete xtopicbucket my-composite-resource
  delete-claim:
    cmds:
      - kubectl delete topicbucket claimed-topic-with-bucket -n test
      - kubectl delete topicbucket second-claimed-topic-with-bucket -n test2

