name: Daily CI
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  schedule:
    - cron: 0 8 * * *

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
#  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      #      - uses: extractions/setup-just@v1
      #        with:
      #          just-version: 0.8 # optional semver specification, otherwise latest
      - name: Derive appropriate SHAs for base and head for `nx run-many` commands
        uses: nrwl/nx-set-shas@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true
          cache: true
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
        with:
          cache-directories: "dist/target"
          cache-all-crates: true
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - run: pnpm nx run-many --target=lint --parallel --max-parallel=3 --all --skip-nx-cache
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx run-many` commands
        uses: nrwl/nx-set-shas@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true
          cache: true
      - run: rustup toolchain install stable --profile minimal
      - run: rustup show
      - uses: Swatinem/rust-cache@v2
        with:
          cache-directories: "dist/target"
          cache-all-crates: true
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - run: pnpm nx run-many --target=build --parallel --max-parallel=3 --prod --all --skip-nx-cache
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx run-many` commands
        uses: nrwl/nx-set-shas@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true
          cache: true
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
        with:
          cache-directories: "dist/target"
          cache-all-crates: true
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - run: pnpm nx run-many --target=test --parallel --max-parallel=3 --all --skip-nx-cache
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Derive appropriate SHAs for base and head for `nx run-many` commands
        uses: nrwl/nx-set-shas@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - uses: actions/setup-go@v4
        with:
          go-version: 'stable'
          check-latest: true
          cache: true
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
        with:
          cache-directories: "dist/target"
          cache-all-crates: true
      - run: go version
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - run: pnpm nx run-many --target=e2e --parallel --max-parallel=3 --headless --all --skip-nx-cache
