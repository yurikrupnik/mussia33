// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema ApisixRoute
 */
export class ApisixRoute extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApisixRoute"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apisix.apache.org/v2beta3',
    kind: 'ApisixRoute',
  }

  /**
   * Renders a Kubernetes manifest for "ApisixRoute".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApisixRouteProps = {}): any {
    return {
      ...ApisixRoute.GVK,
      ...toJson_ApisixRouteProps(props),
    };
  }

  /**
   * Defines a "ApisixRoute" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApisixRouteProps = {}) {
    super(scope, id, {
      ...ApisixRoute.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApisixRoute.GVK,
      ...toJson_ApisixRouteProps(resolved),
    };
  }
}

/**
 * @schema ApisixRoute
 */
export interface ApisixRouteProps {
  /**
   * @schema ApisixRoute#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ApisixRoute#spec
   */
  readonly spec?: ApisixRouteSpec;

}

/**
 * Converts an object of type 'ApisixRouteProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteProps(obj: ApisixRouteProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApisixRouteSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpec
 */
export interface ApisixRouteSpec {
  /**
   * @schema ApisixRouteSpec#http
   */
  readonly http?: ApisixRouteSpecHttp[];

  /**
   * @schema ApisixRouteSpec#stream
   */
  readonly stream?: ApisixRouteSpecStream[];

}

/**
 * Converts an object of type 'ApisixRouteSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpec(obj: ApisixRouteSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': obj.http?.map(y => toJson_ApisixRouteSpecHttp(y)),
    'stream': obj.stream?.map(y => toJson_ApisixRouteSpecStream(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttp
 */
export interface ApisixRouteSpecHttp {
  /**
   * @schema ApisixRouteSpecHttp#authentication
   */
  readonly authentication?: ApisixRouteSpecHttpAuthentication;

  /**
   * @schema ApisixRouteSpecHttp#backends
   */
  readonly backends: ApisixRouteSpecHttpBackends[];

  /**
   * @schema ApisixRouteSpecHttp#match
   */
  readonly match: ApisixRouteSpecHttpMatch;

  /**
   * @schema ApisixRouteSpecHttp#name
   */
  readonly name: string;

  /**
   * @schema ApisixRouteSpecHttp#plugin_config_name
   */
  readonly pluginConfigName?: string;

  /**
   * @schema ApisixRouteSpecHttp#plugins
   */
  readonly plugins?: ApisixRouteSpecHttpPlugins[];

  /**
   * @schema ApisixRouteSpecHttp#priority
   */
  readonly priority?: number;

  /**
   * @schema ApisixRouteSpecHttp#timeout
   */
  readonly timeout?: ApisixRouteSpecHttpTimeout;

  /**
   * @schema ApisixRouteSpecHttp#websocket
   */
  readonly websocket?: boolean;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttp(obj: ApisixRouteSpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authentication': toJson_ApisixRouteSpecHttpAuthentication(obj.authentication),
    'backends': obj.backends?.map(y => toJson_ApisixRouteSpecHttpBackends(y)),
    'match': toJson_ApisixRouteSpecHttpMatch(obj.match),
    'name': obj.name,
    'plugin_config_name': obj.pluginConfigName,
    'plugins': obj.plugins?.map(y => toJson_ApisixRouteSpecHttpPlugins(y)),
    'priority': obj.priority,
    'timeout': toJson_ApisixRouteSpecHttpTimeout(obj.timeout),
    'websocket': obj.websocket,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecStream
 */
export interface ApisixRouteSpecStream {
  /**
   * @schema ApisixRouteSpecStream#backend
   */
  readonly backend: ApisixRouteSpecStreamBackend;

  /**
   * @schema ApisixRouteSpecStream#match
   */
  readonly match: ApisixRouteSpecStreamMatch;

  /**
   * @schema ApisixRouteSpecStream#name
   */
  readonly name: string;

  /**
   * @schema ApisixRouteSpecStream#protocol
   */
  readonly protocol: ApisixRouteSpecStreamProtocol;

}

/**
 * Converts an object of type 'ApisixRouteSpecStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecStream(obj: ApisixRouteSpecStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backend': toJson_ApisixRouteSpecStreamBackend(obj.backend),
    'match': toJson_ApisixRouteSpecStreamMatch(obj.match),
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpAuthentication
 */
export interface ApisixRouteSpecHttpAuthentication {
  /**
   * @schema ApisixRouteSpecHttpAuthentication#enable
   */
  readonly enable: boolean;

  /**
   * @schema ApisixRouteSpecHttpAuthentication#jwtAuth
   */
  readonly jwtAuth?: ApisixRouteSpecHttpAuthenticationJwtAuth;

  /**
   * @schema ApisixRouteSpecHttpAuthentication#keyAuth
   */
  readonly keyAuth?: ApisixRouteSpecHttpAuthenticationKeyAuth;

  /**
   * @schema ApisixRouteSpecHttpAuthentication#type
   */
  readonly type?: ApisixRouteSpecHttpAuthenticationType;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpAuthentication(obj: ApisixRouteSpecHttpAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enable': obj.enable,
    'jwtAuth': toJson_ApisixRouteSpecHttpAuthenticationJwtAuth(obj.jwtAuth),
    'keyAuth': toJson_ApisixRouteSpecHttpAuthenticationKeyAuth(obj.keyAuth),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpBackends
 */
export interface ApisixRouteSpecHttpBackends {
  /**
   * @schema ApisixRouteSpecHttpBackends#resolveGranularity
   */
  readonly resolveGranularity?: ApisixRouteSpecHttpBackendsResolveGranularity;

  /**
   * @schema ApisixRouteSpecHttpBackends#serviceName
   */
  readonly serviceName?: string;

  /**
   * @schema ApisixRouteSpecHttpBackends#servicePort
   */
  readonly servicePort?: ApisixRouteSpecHttpBackendsServicePort;

  /**
   * @schema ApisixRouteSpecHttpBackends#subset
   */
  readonly subset?: string;

  /**
   * @schema ApisixRouteSpecHttpBackends#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpBackends(obj: ApisixRouteSpecHttpBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolveGranularity': obj.resolveGranularity,
    'serviceName': obj.serviceName,
    'servicePort': obj.servicePort?.value,
    'subset': obj.subset,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpMatch
 */
export interface ApisixRouteSpecHttpMatch {
  /**
   * @schema ApisixRouteSpecHttpMatch#exprs
   */
  readonly exprs?: ApisixRouteSpecHttpMatchExprs[];

  /**
   * @schema ApisixRouteSpecHttpMatch#hosts
   */
  readonly hosts?: string[];

  /**
   * @schema ApisixRouteSpecHttpMatch#methods
   */
  readonly methods?: ApisixRouteSpecHttpMatchMethods[];

  /**
   * @schema ApisixRouteSpecHttpMatch#paths
   */
  readonly paths: string[];

  /**
   * @schema ApisixRouteSpecHttpMatch#remoteAddrs
   */
  readonly remoteAddrs?: string[];

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpMatch(obj: ApisixRouteSpecHttpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exprs': obj.exprs?.map(y => toJson_ApisixRouteSpecHttpMatchExprs(y)),
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'remoteAddrs': obj.remoteAddrs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpPlugins
 */
export interface ApisixRouteSpecHttpPlugins {
  /**
   * @schema ApisixRouteSpecHttpPlugins#config
   */
  readonly config?: any;

  /**
   * @schema ApisixRouteSpecHttpPlugins#enable
   */
  readonly enable?: boolean;

  /**
   * @schema ApisixRouteSpecHttpPlugins#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpPlugins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpPlugins(obj: ApisixRouteSpecHttpPlugins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'enable': obj.enable,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpTimeout
 */
export interface ApisixRouteSpecHttpTimeout {
  /**
   * @schema ApisixRouteSpecHttpTimeout#connect
   */
  readonly connect?: string;

  /**
   * @schema ApisixRouteSpecHttpTimeout#read
   */
  readonly read?: string;

  /**
   * @schema ApisixRouteSpecHttpTimeout#send
   */
  readonly send?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpTimeout(obj: ApisixRouteSpecHttpTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connect': obj.connect,
    'read': obj.read,
    'send': obj.send,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecStreamBackend
 */
export interface ApisixRouteSpecStreamBackend {
  /**
   * @schema ApisixRouteSpecStreamBackend#resolveGranularity
   */
  readonly resolveGranularity?: ApisixRouteSpecStreamBackendResolveGranularity;

  /**
   * @schema ApisixRouteSpecStreamBackend#serviceName
   */
  readonly serviceName: string;

  /**
   * @schema ApisixRouteSpecStreamBackend#servicePort
   */
  readonly servicePort: ApisixRouteSpecStreamBackendServicePort;

  /**
   * @schema ApisixRouteSpecStreamBackend#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecStreamBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecStreamBackend(obj: ApisixRouteSpecStreamBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolveGranularity': obj.resolveGranularity,
    'serviceName': obj.serviceName,
    'servicePort': obj.servicePort?.value,
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecStreamMatch
 */
export interface ApisixRouteSpecStreamMatch {
  /**
   * @schema ApisixRouteSpecStreamMatch#ingressPort
   */
  readonly ingressPort: number;

}

/**
 * Converts an object of type 'ApisixRouteSpecStreamMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecStreamMatch(obj: ApisixRouteSpecStreamMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ingressPort': obj.ingressPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecStreamProtocol
 */
export enum ApisixRouteSpecStreamProtocol {
  /** TCP */
  TCP = "TCP",
  /** UDP */
  UDP = "UDP",
}

/**
 * @schema ApisixRouteSpecHttpAuthenticationJwtAuth
 */
export interface ApisixRouteSpecHttpAuthenticationJwtAuth {
  /**
   * @schema ApisixRouteSpecHttpAuthenticationJwtAuth#cookie
   */
  readonly cookie?: string;

  /**
   * @schema ApisixRouteSpecHttpAuthenticationJwtAuth#header
   */
  readonly header?: string;

  /**
   * @schema ApisixRouteSpecHttpAuthenticationJwtAuth#query
   */
  readonly query?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpAuthenticationJwtAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpAuthenticationJwtAuth(obj: ApisixRouteSpecHttpAuthenticationJwtAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookie': obj.cookie,
    'header': obj.header,
    'query': obj.query,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpAuthenticationKeyAuth
 */
export interface ApisixRouteSpecHttpAuthenticationKeyAuth {
  /**
   * @schema ApisixRouteSpecHttpAuthenticationKeyAuth#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpAuthenticationKeyAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpAuthenticationKeyAuth(obj: ApisixRouteSpecHttpAuthenticationKeyAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpAuthenticationType
 */
export enum ApisixRouteSpecHttpAuthenticationType {
  /** basicAuth */
  BASIC_AUTH = "basicAuth",
  /** keyAuth */
  KEY_AUTH = "keyAuth",
  /** jwtAuth */
  JWT_AUTH = "jwtAuth",
  /** wolfRBAC */
  WOLF_RBAC = "wolfRBAC",
  /** hmacAuth */
  HMAC_AUTH = "hmacAuth",
}

/**
 * @schema ApisixRouteSpecHttpBackendsResolveGranularity
 */
export enum ApisixRouteSpecHttpBackendsResolveGranularity {
  /** endpoint */
  ENDPOINT = "endpoint",
  /** service */
  SERVICE = "service",
}

/**
 * @schema ApisixRouteSpecHttpBackendsServicePort
 */
export class ApisixRouteSpecHttpBackendsServicePort {
  public static fromNumber(value: number): ApisixRouteSpecHttpBackendsServicePort {
    return new ApisixRouteSpecHttpBackendsServicePort(value);
  }
  public static fromString(value: string): ApisixRouteSpecHttpBackendsServicePort {
    return new ApisixRouteSpecHttpBackendsServicePort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ApisixRouteSpecHttpMatchExprs
 */
export interface ApisixRouteSpecHttpMatchExprs {
  /**
   * @schema ApisixRouteSpecHttpMatchExprs#op
   */
  readonly op?: ApisixRouteSpecHttpMatchExprsOp;

  /**
   * @schema ApisixRouteSpecHttpMatchExprs#set
   */
  readonly set?: string[];

  /**
   * @schema ApisixRouteSpecHttpMatchExprs#subject
   */
  readonly subject?: ApisixRouteSpecHttpMatchExprsSubject;

  /**
   * @schema ApisixRouteSpecHttpMatchExprs#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpMatchExprs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpMatchExprs(obj: ApisixRouteSpecHttpMatchExprs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'op': obj.op,
    'set': obj.set?.map(y => y),
    'subject': toJson_ApisixRouteSpecHttpMatchExprsSubject(obj.subject),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpMatchMethods
 */
export enum ApisixRouteSpecHttpMatchMethods {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * @schema ApisixRouteSpecStreamBackendResolveGranularity
 */
export enum ApisixRouteSpecStreamBackendResolveGranularity {
  /** endpoint */
  ENDPOINT = "endpoint",
  /** service */
  SERVICE = "service",
}

/**
 * @schema ApisixRouteSpecStreamBackendServicePort
 */
export class ApisixRouteSpecStreamBackendServicePort {
  public static fromNumber(value: number): ApisixRouteSpecStreamBackendServicePort {
    return new ApisixRouteSpecStreamBackendServicePort(value);
  }
  public static fromString(value: string): ApisixRouteSpecStreamBackendServicePort {
    return new ApisixRouteSpecStreamBackendServicePort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ApisixRouteSpecHttpMatchExprsOp
 */
export enum ApisixRouteSpecHttpMatchExprsOp {
  /** Equal */
  EQUAL = "Equal",
  /** NotEqual */
  NOT_EQUAL = "NotEqual",
  /** GreaterThan */
  GREATER_THAN = "GreaterThan",
  /** LessThan */
  LESS_THAN = "LessThan",
  /** In */
  IN = "In",
  /** NotIn */
  NOT_IN = "NotIn",
  /** RegexMatch */
  REGEX_MATCH = "RegexMatch",
  /** RegexNotMatch */
  REGEX_NOT_MATCH = "RegexNotMatch",
  /** RegexMatchCaseInsensitive */
  REGEX_MATCH_CASE_INSENSITIVE = "RegexMatchCaseInsensitive",
  /** RegexNotMatchCaseInsensitive */
  REGEX_NOT_MATCH_CASE_INSENSITIVE = "RegexNotMatchCaseInsensitive",
}

/**
 * @schema ApisixRouteSpecHttpMatchExprsSubject
 */
export interface ApisixRouteSpecHttpMatchExprsSubject {
  /**
   * @schema ApisixRouteSpecHttpMatchExprsSubject#name
   */
  readonly name?: string;

  /**
   * @schema ApisixRouteSpecHttpMatchExprsSubject#scope
   */
  readonly scope: ApisixRouteSpecHttpMatchExprsSubjectScope;

}

/**
 * Converts an object of type 'ApisixRouteSpecHttpMatchExprsSubject' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteSpecHttpMatchExprsSubject(obj: ApisixRouteSpecHttpMatchExprsSubject | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteSpecHttpMatchExprsSubjectScope
 */
export enum ApisixRouteSpecHttpMatchExprsSubjectScope {
  /** Cookie */
  COOKIE = "Cookie",
  /** Header */
  HEADER = "Header",
  /** Path */
  PATH = "Path",
  /** Query */
  QUERY = "Query",
}


/**
 *
 *
 * @schema ApisixRouteV2
 */
export class ApisixRouteV2 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApisixRouteV2"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'apisix.apache.org/v2',
    kind: 'ApisixRoute',
  }

  /**
   * Renders a Kubernetes manifest for "ApisixRouteV2".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApisixRouteV2Props = {}): any {
    return {
      ...ApisixRouteV2.GVK,
      ...toJson_ApisixRouteV2Props(props),
    };
  }

  /**
   * Defines a "ApisixRouteV2" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApisixRouteV2Props = {}) {
    super(scope, id, {
      ...ApisixRouteV2.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApisixRouteV2.GVK,
      ...toJson_ApisixRouteV2Props(resolved),
    };
  }
}

/**
 * @schema ApisixRouteV2
 */
export interface ApisixRouteV2Props {
  /**
   * @schema ApisixRouteV2#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema ApisixRouteV2#spec
   */
  readonly spec?: ApisixRouteV2Spec;

}

/**
 * Converts an object of type 'ApisixRouteV2Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2Props(obj: ApisixRouteV2Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApisixRouteV2Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2Spec
 */
export interface ApisixRouteV2Spec {
  /**
   * @schema ApisixRouteV2Spec#http
   */
  readonly http?: ApisixRouteV2SpecHttp[];

  /**
   * @schema ApisixRouteV2Spec#stream
   */
  readonly stream?: ApisixRouteV2SpecStream[];

}

/**
 * Converts an object of type 'ApisixRouteV2Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2Spec(obj: ApisixRouteV2Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': obj.http?.map(y => toJson_ApisixRouteV2SpecHttp(y)),
    'stream': obj.stream?.map(y => toJson_ApisixRouteV2SpecStream(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttp
 */
export interface ApisixRouteV2SpecHttp {
  /**
   * @schema ApisixRouteV2SpecHttp#authentication
   */
  readonly authentication?: ApisixRouteV2SpecHttpAuthentication;

  /**
   * @schema ApisixRouteV2SpecHttp#backends
   */
  readonly backends?: ApisixRouteV2SpecHttpBackends[];

  /**
   * @schema ApisixRouteV2SpecHttp#match
   */
  readonly match?: ApisixRouteV2SpecHttpMatch;

  /**
   * @schema ApisixRouteV2SpecHttp#name
   */
  readonly name?: string;

  /**
   * @schema ApisixRouteV2SpecHttp#plugin_config_name
   */
  readonly pluginConfigName?: string;

  /**
   * @schema ApisixRouteV2SpecHttp#plugins
   */
  readonly plugins?: ApisixRouteV2SpecHttpPlugins[];

  /**
   * @schema ApisixRouteV2SpecHttp#priority
   */
  readonly priority?: number;

  /**
   * @schema ApisixRouteV2SpecHttp#timeout
   */
  readonly timeout?: ApisixRouteV2SpecHttpTimeout;

  /**
   * Upstreams refer to ApisixUpstream CRD
   *
   * @schema ApisixRouteV2SpecHttp#upstreams
   */
  readonly upstreams?: ApisixRouteV2SpecHttpUpstreams[];

  /**
   * @schema ApisixRouteV2SpecHttp#websocket
   */
  readonly websocket?: boolean;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttp(obj: ApisixRouteV2SpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authentication': toJson_ApisixRouteV2SpecHttpAuthentication(obj.authentication),
    'backends': obj.backends?.map(y => toJson_ApisixRouteV2SpecHttpBackends(y)),
    'match': toJson_ApisixRouteV2SpecHttpMatch(obj.match),
    'name': obj.name,
    'plugin_config_name': obj.pluginConfigName,
    'plugins': obj.plugins?.map(y => toJson_ApisixRouteV2SpecHttpPlugins(y)),
    'priority': obj.priority,
    'timeout': toJson_ApisixRouteV2SpecHttpTimeout(obj.timeout),
    'upstreams': obj.upstreams?.map(y => toJson_ApisixRouteV2SpecHttpUpstreams(y)),
    'websocket': obj.websocket,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecStream
 */
export interface ApisixRouteV2SpecStream {
  /**
   * @schema ApisixRouteV2SpecStream#backend
   */
  readonly backend: ApisixRouteV2SpecStreamBackend;

  /**
   * @schema ApisixRouteV2SpecStream#match
   */
  readonly match: ApisixRouteV2SpecStreamMatch;

  /**
   * @schema ApisixRouteV2SpecStream#name
   */
  readonly name: string;

  /**
   * @schema ApisixRouteV2SpecStream#plugins
   */
  readonly plugins?: ApisixRouteV2SpecStreamPlugins[];

  /**
   * @schema ApisixRouteV2SpecStream#protocol
   */
  readonly protocol: ApisixRouteV2SpecStreamProtocol;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecStream' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecStream(obj: ApisixRouteV2SpecStream | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backend': toJson_ApisixRouteV2SpecStreamBackend(obj.backend),
    'match': toJson_ApisixRouteV2SpecStreamMatch(obj.match),
    'name': obj.name,
    'plugins': obj.plugins?.map(y => toJson_ApisixRouteV2SpecStreamPlugins(y)),
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpAuthentication
 */
export interface ApisixRouteV2SpecHttpAuthentication {
  /**
   * @schema ApisixRouteV2SpecHttpAuthentication#enable
   */
  readonly enable: boolean;

  /**
   * @schema ApisixRouteV2SpecHttpAuthentication#jwtAuth
   */
  readonly jwtAuth?: ApisixRouteV2SpecHttpAuthenticationJwtAuth;

  /**
   * @schema ApisixRouteV2SpecHttpAuthentication#keyAuth
   */
  readonly keyAuth?: ApisixRouteV2SpecHttpAuthenticationKeyAuth;

  /**
   * @schema ApisixRouteV2SpecHttpAuthentication#type
   */
  readonly type?: ApisixRouteV2SpecHttpAuthenticationType;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpAuthentication(obj: ApisixRouteV2SpecHttpAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enable': obj.enable,
    'jwtAuth': toJson_ApisixRouteV2SpecHttpAuthenticationJwtAuth(obj.jwtAuth),
    'keyAuth': toJson_ApisixRouteV2SpecHttpAuthenticationKeyAuth(obj.keyAuth),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpBackends
 */
export interface ApisixRouteV2SpecHttpBackends {
  /**
   * @schema ApisixRouteV2SpecHttpBackends#resolveGranularity
   */
  readonly resolveGranularity?: ApisixRouteV2SpecHttpBackendsResolveGranularity;

  /**
   * @schema ApisixRouteV2SpecHttpBackends#serviceName
   */
  readonly serviceName?: string;

  /**
   * @schema ApisixRouteV2SpecHttpBackends#servicePort
   */
  readonly servicePort?: ApisixRouteV2SpecHttpBackendsServicePort;

  /**
   * @schema ApisixRouteV2SpecHttpBackends#subset
   */
  readonly subset?: string;

  /**
   * @schema ApisixRouteV2SpecHttpBackends#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpBackends(obj: ApisixRouteV2SpecHttpBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolveGranularity': obj.resolveGranularity,
    'serviceName': obj.serviceName,
    'servicePort': obj.servicePort?.value,
    'subset': obj.subset,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpMatch
 */
export interface ApisixRouteV2SpecHttpMatch {
  /**
   * @schema ApisixRouteV2SpecHttpMatch#exprs
   */
  readonly exprs?: ApisixRouteV2SpecHttpMatchExprs[];

  /**
   * @schema ApisixRouteV2SpecHttpMatch#hosts
   */
  readonly hosts?: string[];

  /**
   * @schema ApisixRouteV2SpecHttpMatch#methods
   */
  readonly methods?: ApisixRouteV2SpecHttpMatchMethods[];

  /**
   * @schema ApisixRouteV2SpecHttpMatch#paths
   */
  readonly paths: string[];

  /**
   * @schema ApisixRouteV2SpecHttpMatch#remoteAddrs
   */
  readonly remoteAddrs?: string[];

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpMatch(obj: ApisixRouteV2SpecHttpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exprs': obj.exprs?.map(y => toJson_ApisixRouteV2SpecHttpMatchExprs(y)),
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'remoteAddrs': obj.remoteAddrs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpPlugins
 */
export interface ApisixRouteV2SpecHttpPlugins {
  /**
   * @schema ApisixRouteV2SpecHttpPlugins#config
   */
  readonly config?: any;

  /**
   * @schema ApisixRouteV2SpecHttpPlugins#enable
   */
  readonly enable?: boolean;

  /**
   * @schema ApisixRouteV2SpecHttpPlugins#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpPlugins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpPlugins(obj: ApisixRouteV2SpecHttpPlugins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'enable': obj.enable,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpTimeout
 */
export interface ApisixRouteV2SpecHttpTimeout {
  /**
   * @schema ApisixRouteV2SpecHttpTimeout#connect
   */
  readonly connect?: string;

  /**
   * @schema ApisixRouteV2SpecHttpTimeout#read
   */
  readonly read?: string;

  /**
   * @schema ApisixRouteV2SpecHttpTimeout#send
   */
  readonly send?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpTimeout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpTimeout(obj: ApisixRouteV2SpecHttpTimeout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connect': obj.connect,
    'read': obj.read,
    'send': obj.send,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApisixRouteUpstreamReference contains a ApisixUpstream CRD reference
 *
 * @schema ApisixRouteV2SpecHttpUpstreams
 */
export interface ApisixRouteV2SpecHttpUpstreams {
  /**
   * @schema ApisixRouteV2SpecHttpUpstreams#name
   */
  readonly name?: string;

  /**
   * @schema ApisixRouteV2SpecHttpUpstreams#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpUpstreams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpUpstreams(obj: ApisixRouteV2SpecHttpUpstreams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecStreamBackend
 */
export interface ApisixRouteV2SpecStreamBackend {
  /**
   * @schema ApisixRouteV2SpecStreamBackend#resolveGranularity
   */
  readonly resolveGranularity?: ApisixRouteV2SpecStreamBackendResolveGranularity;

  /**
   * @schema ApisixRouteV2SpecStreamBackend#serviceName
   */
  readonly serviceName: string;

  /**
   * @schema ApisixRouteV2SpecStreamBackend#servicePort
   */
  readonly servicePort: ApisixRouteV2SpecStreamBackendServicePort;

  /**
   * @schema ApisixRouteV2SpecStreamBackend#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecStreamBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecStreamBackend(obj: ApisixRouteV2SpecStreamBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolveGranularity': obj.resolveGranularity,
    'serviceName': obj.serviceName,
    'servicePort': obj.servicePort?.value,
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecStreamMatch
 */
export interface ApisixRouteV2SpecStreamMatch {
  /**
   * @schema ApisixRouteV2SpecStreamMatch#host
   */
  readonly host?: string;

  /**
   * @schema ApisixRouteV2SpecStreamMatch#ingressPort
   */
  readonly ingressPort: number;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecStreamMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecStreamMatch(obj: ApisixRouteV2SpecStreamMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'ingressPort': obj.ingressPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecStreamPlugins
 */
export interface ApisixRouteV2SpecStreamPlugins {
  /**
   * @schema ApisixRouteV2SpecStreamPlugins#config
   */
  readonly config?: any;

  /**
   * @schema ApisixRouteV2SpecStreamPlugins#enable
   */
  readonly enable?: boolean;

  /**
   * @schema ApisixRouteV2SpecStreamPlugins#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecStreamPlugins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecStreamPlugins(obj: ApisixRouteV2SpecStreamPlugins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'config': obj.config,
    'enable': obj.enable,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecStreamProtocol
 */
export enum ApisixRouteV2SpecStreamProtocol {
  /** TCP */
  TCP = "TCP",
  /** UDP */
  UDP = "UDP",
}

/**
 * @schema ApisixRouteV2SpecHttpAuthenticationJwtAuth
 */
export interface ApisixRouteV2SpecHttpAuthenticationJwtAuth {
  /**
   * @schema ApisixRouteV2SpecHttpAuthenticationJwtAuth#cookie
   */
  readonly cookie?: string;

  /**
   * @schema ApisixRouteV2SpecHttpAuthenticationJwtAuth#header
   */
  readonly header?: string;

  /**
   * @schema ApisixRouteV2SpecHttpAuthenticationJwtAuth#query
   */
  readonly query?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpAuthenticationJwtAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpAuthenticationJwtAuth(obj: ApisixRouteV2SpecHttpAuthenticationJwtAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cookie': obj.cookie,
    'header': obj.header,
    'query': obj.query,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpAuthenticationKeyAuth
 */
export interface ApisixRouteV2SpecHttpAuthenticationKeyAuth {
  /**
   * @schema ApisixRouteV2SpecHttpAuthenticationKeyAuth#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpAuthenticationKeyAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpAuthenticationKeyAuth(obj: ApisixRouteV2SpecHttpAuthenticationKeyAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpAuthenticationType
 */
export enum ApisixRouteV2SpecHttpAuthenticationType {
  /** basicAuth */
  BASIC_AUTH = "basicAuth",
  /** keyAuth */
  KEY_AUTH = "keyAuth",
  /** jwtAuth */
  JWT_AUTH = "jwtAuth",
  /** wolfRBAC */
  WOLF_RBAC = "wolfRBAC",
  /** hmacAuth */
  HMAC_AUTH = "hmacAuth",
}

/**
 * @schema ApisixRouteV2SpecHttpBackendsResolveGranularity
 */
export enum ApisixRouteV2SpecHttpBackendsResolveGranularity {
  /** endpoint */
  ENDPOINT = "endpoint",
  /** service */
  SERVICE = "service",
}

/**
 * @schema ApisixRouteV2SpecHttpBackendsServicePort
 */
export class ApisixRouteV2SpecHttpBackendsServicePort {
  public static fromNumber(value: number): ApisixRouteV2SpecHttpBackendsServicePort {
    return new ApisixRouteV2SpecHttpBackendsServicePort(value);
  }
  public static fromString(value: string): ApisixRouteV2SpecHttpBackendsServicePort {
    return new ApisixRouteV2SpecHttpBackendsServicePort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ApisixRouteV2SpecHttpMatchExprs
 */
export interface ApisixRouteV2SpecHttpMatchExprs {
  /**
   * @schema ApisixRouteV2SpecHttpMatchExprs#op
   */
  readonly op?: ApisixRouteV2SpecHttpMatchExprsOp;

  /**
   * @schema ApisixRouteV2SpecHttpMatchExprs#set
   */
  readonly set?: string[];

  /**
   * @schema ApisixRouteV2SpecHttpMatchExprs#subject
   */
  readonly subject?: ApisixRouteV2SpecHttpMatchExprsSubject;

  /**
   * @schema ApisixRouteV2SpecHttpMatchExprs#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpMatchExprs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpMatchExprs(obj: ApisixRouteV2SpecHttpMatchExprs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'op': obj.op,
    'set': obj.set?.map(y => y),
    'subject': toJson_ApisixRouteV2SpecHttpMatchExprsSubject(obj.subject),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpMatchMethods
 */
export enum ApisixRouteV2SpecHttpMatchMethods {
  /** CONNECT */
  CONNECT = "CONNECT",
  /** DELETE */
  DELETE = "DELETE",
  /** GET */
  GET = "GET",
  /** HEAD */
  HEAD = "HEAD",
  /** OPTIONS */
  OPTIONS = "OPTIONS",
  /** PATCH */
  PATCH = "PATCH",
  /** POST */
  POST = "POST",
  /** PUT */
  PUT = "PUT",
  /** TRACE */
  TRACE = "TRACE",
}

/**
 * @schema ApisixRouteV2SpecStreamBackendResolveGranularity
 */
export enum ApisixRouteV2SpecStreamBackendResolveGranularity {
  /** endpoint */
  ENDPOINT = "endpoint",
  /** service */
  SERVICE = "service",
}

/**
 * @schema ApisixRouteV2SpecStreamBackendServicePort
 */
export class ApisixRouteV2SpecStreamBackendServicePort {
  public static fromNumber(value: number): ApisixRouteV2SpecStreamBackendServicePort {
    return new ApisixRouteV2SpecStreamBackendServicePort(value);
  }
  public static fromString(value: string): ApisixRouteV2SpecStreamBackendServicePort {
    return new ApisixRouteV2SpecStreamBackendServicePort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema ApisixRouteV2SpecHttpMatchExprsOp
 */
export enum ApisixRouteV2SpecHttpMatchExprsOp {
  /** Equal */
  EQUAL = "Equal",
  /** NotEqual */
  NOT_EQUAL = "NotEqual",
  /** GreaterThan */
  GREATER_THAN = "GreaterThan",
  /** GreaterThanEqual */
  GREATER_THAN_EQUAL = "GreaterThanEqual",
  /** LessThan */
  LESS_THAN = "LessThan",
  /** LessThanEqual */
  LESS_THAN_EQUAL = "LessThanEqual",
  /** In */
  IN = "In",
  /** NotIn */
  NOT_IN = "NotIn",
  /** RegexMatch */
  REGEX_MATCH = "RegexMatch",
  /** RegexNotMatch */
  REGEX_NOT_MATCH = "RegexNotMatch",
  /** RegexMatchCaseInsensitive */
  REGEX_MATCH_CASE_INSENSITIVE = "RegexMatchCaseInsensitive",
  /** RegexNotMatchCaseInsensitive */
  REGEX_NOT_MATCH_CASE_INSENSITIVE = "RegexNotMatchCaseInsensitive",
}

/**
 * @schema ApisixRouteV2SpecHttpMatchExprsSubject
 */
export interface ApisixRouteV2SpecHttpMatchExprsSubject {
  /**
   * @schema ApisixRouteV2SpecHttpMatchExprsSubject#name
   */
  readonly name?: string;

  /**
   * @schema ApisixRouteV2SpecHttpMatchExprsSubject#scope
   */
  readonly scope: ApisixRouteV2SpecHttpMatchExprsSubjectScope;

}

/**
 * Converts an object of type 'ApisixRouteV2SpecHttpMatchExprsSubject' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApisixRouteV2SpecHttpMatchExprsSubject(obj: ApisixRouteV2SpecHttpMatchExprsSubject | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApisixRouteV2SpecHttpMatchExprsSubjectScope
 */
export enum ApisixRouteV2SpecHttpMatchExprsSubjectScope {
  /** Cookie */
  COOKIE = "Cookie",
  /** Header */
  HEADER = "Header",
  /** Path */
  PATH = "Path",
  /** Query */
  QUERY = "Query",
  /** Variable */
  VARIABLE = "Variable",
}

