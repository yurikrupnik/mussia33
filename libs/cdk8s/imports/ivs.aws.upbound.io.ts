// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Channel is the Schema for the Channels API.
 *
 * @schema Channel
 */
export class Channel extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Channel"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ivs.aws.upbound.io/v1beta1',
    kind: 'Channel',
  }

  /**
   * Renders a Kubernetes manifest for "Channel".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ChannelProps): any {
    return {
      ...Channel.GVK,
      ...toJson_ChannelProps(props),
    };
  }

  /**
   * Defines a "Channel" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ChannelProps) {
    super(scope, id, {
      ...Channel.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Channel.GVK,
      ...toJson_ChannelProps(resolved),
    };
  }
}

/**
 * Channel is the Schema for the Channels API.
 *
 * @schema Channel
 */
export interface ChannelProps {
  /**
   * @schema Channel#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ChannelSpec defines the desired state of Channel
   *
   * @schema Channel#spec
   */
  readonly spec: ChannelSpec;

}

/**
 * Converts an object of type 'ChannelProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelProps(obj: ChannelProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ChannelSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ChannelSpec defines the desired state of Channel
 *
 * @schema ChannelSpec
 */
export interface ChannelSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ChannelSpec#deletionPolicy
   */
  readonly deletionPolicy?: ChannelSpecDeletionPolicy;

  /**
   * @schema ChannelSpec#forProvider
   */
  readonly forProvider: ChannelSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ChannelSpec#initProvider
   */
  readonly initProvider?: ChannelSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ChannelSpec#managementPolicies
   */
  readonly managementPolicies?: ChannelSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ChannelSpec#providerConfigRef
   */
  readonly providerConfigRef?: ChannelSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ChannelSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ChannelSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ChannelSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ChannelSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ChannelSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpec(obj: ChannelSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ChannelSpecForProvider(obj.forProvider),
    'initProvider': toJson_ChannelSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ChannelSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ChannelSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ChannelSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ChannelSpecDeletionPolicy
 */
export enum ChannelSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ChannelSpecForProvider
 */
export interface ChannelSpecForProvider {
  /**
   * If true, channel is private (enabled for playback authorization).
   *
   * @schema ChannelSpecForProvider#authorized
   */
  readonly authorized?: boolean;

  /**
   * Channel latency mode. Valid values: NORMAL, LOW.
   *
   * @schema ChannelSpecForProvider#latencyMode
   */
  readonly latencyMode?: string;

  /**
   * Channel name.
   *
   * @schema ChannelSpecForProvider#name
   */
  readonly name?: string;

  /**
   * Recording configuration ARN.
   *
   * @schema ChannelSpecForProvider#recordingConfigurationArn
   */
  readonly recordingConfigurationArn?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema ChannelSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ChannelSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Channel type, which determines the allowable resolution and bitrate. Valid values: STANDARD, BASIC.
   *
   * @schema ChannelSpecForProvider#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ChannelSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecForProvider(obj: ChannelSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorized': obj.authorized,
    'latencyMode': obj.latencyMode,
    'name': obj.name,
    'recordingConfigurationArn': obj.recordingConfigurationArn,
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ChannelSpecInitProvider
 */
export interface ChannelSpecInitProvider {
  /**
   * If true, channel is private (enabled for playback authorization).
   *
   * @schema ChannelSpecInitProvider#authorized
   */
  readonly authorized?: boolean;

  /**
   * Channel latency mode. Valid values: NORMAL, LOW.
   *
   * @schema ChannelSpecInitProvider#latencyMode
   */
  readonly latencyMode?: string;

  /**
   * Channel name.
   *
   * @schema ChannelSpecInitProvider#name
   */
  readonly name?: string;

  /**
   * Recording configuration ARN.
   *
   * @schema ChannelSpecInitProvider#recordingConfigurationArn
   */
  readonly recordingConfigurationArn?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ChannelSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Channel type, which determines the allowable resolution and bitrate. Valid values: STANDARD, BASIC.
   *
   * @schema ChannelSpecInitProvider#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ChannelSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecInitProvider(obj: ChannelSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorized': obj.authorized,
    'latencyMode': obj.latencyMode,
    'name': obj.name,
    'recordingConfigurationArn': obj.recordingConfigurationArn,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ChannelSpecManagementPolicies
 */
export enum ChannelSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ChannelSpecProviderConfigRef
 */
export interface ChannelSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ChannelSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ChannelSpecProviderConfigRef#policy
   */
  readonly policy?: ChannelSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ChannelSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderConfigRef(obj: ChannelSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ChannelSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ChannelSpecPublishConnectionDetailsTo
 */
export interface ChannelSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ChannelSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ChannelSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsTo(obj: ChannelSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ChannelSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ChannelSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ChannelSpecWriteConnectionSecretToRef
 */
export interface ChannelSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ChannelSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ChannelSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ChannelSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecWriteConnectionSecretToRef(obj: ChannelSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ChannelSpecProviderConfigRefPolicy
 */
export interface ChannelSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ChannelSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ChannelSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ChannelSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ChannelSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ChannelSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderConfigRefPolicy(obj: ChannelSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRef
 */
export interface ChannelSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ChannelSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToConfigRef(obj: ChannelSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ChannelSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ChannelSpecPublishConnectionDetailsToMetadata
 */
export interface ChannelSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToMetadata(obj: ChannelSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ChannelSpecProviderConfigRefPolicyResolution
 */
export enum ChannelSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ChannelSpecProviderConfigRefPolicyResolve
 */
export enum ChannelSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ChannelSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToConfigRefPolicy(obj: ChannelSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * RecordingConfiguration is the Schema for the RecordingConfigurations API.
 *
 * @schema RecordingConfiguration
 */
export class RecordingConfiguration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RecordingConfiguration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ivs.aws.upbound.io/v1beta1',
    kind: 'RecordingConfiguration',
  }

  /**
   * Renders a Kubernetes manifest for "RecordingConfiguration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RecordingConfigurationProps): any {
    return {
      ...RecordingConfiguration.GVK,
      ...toJson_RecordingConfigurationProps(props),
    };
  }

  /**
   * Defines a "RecordingConfiguration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RecordingConfigurationProps) {
    super(scope, id, {
      ...RecordingConfiguration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RecordingConfiguration.GVK,
      ...toJson_RecordingConfigurationProps(resolved),
    };
  }
}

/**
 * RecordingConfiguration is the Schema for the RecordingConfigurations API.
 *
 * @schema RecordingConfiguration
 */
export interface RecordingConfigurationProps {
  /**
   * @schema RecordingConfiguration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RecordingConfigurationSpec defines the desired state of RecordingConfiguration
   *
   * @schema RecordingConfiguration#spec
   */
  readonly spec: RecordingConfigurationSpec;

}

/**
 * Converts an object of type 'RecordingConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationProps(obj: RecordingConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RecordingConfigurationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RecordingConfigurationSpec defines the desired state of RecordingConfiguration
 *
 * @schema RecordingConfigurationSpec
 */
export interface RecordingConfigurationSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema RecordingConfigurationSpec#deletionPolicy
   */
  readonly deletionPolicy?: RecordingConfigurationSpecDeletionPolicy;

  /**
   * @schema RecordingConfigurationSpec#forProvider
   */
  readonly forProvider: RecordingConfigurationSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema RecordingConfigurationSpec#initProvider
   */
  readonly initProvider?: RecordingConfigurationSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema RecordingConfigurationSpec#managementPolicies
   */
  readonly managementPolicies?: RecordingConfigurationSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RecordingConfigurationSpec#providerConfigRef
   */
  readonly providerConfigRef?: RecordingConfigurationSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RecordingConfigurationSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RecordingConfigurationSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RecordingConfigurationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RecordingConfigurationSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RecordingConfigurationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpec(obj: RecordingConfigurationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RecordingConfigurationSpecForProvider(obj.forProvider),
    'initProvider': toJson_RecordingConfigurationSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_RecordingConfigurationSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_RecordingConfigurationSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RecordingConfigurationSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema RecordingConfigurationSpecDeletionPolicy
 */
export enum RecordingConfigurationSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema RecordingConfigurationSpecForProvider
 */
export interface RecordingConfigurationSpecForProvider {
  /**
   * Object containing destination configuration for where recorded video will be stored.
   *
   * @schema RecordingConfigurationSpecForProvider#destinationConfiguration
   */
  readonly destinationConfiguration?: RecordingConfigurationSpecForProviderDestinationConfiguration[];

  /**
   * Recording Configuration name.
   *
   * @schema RecordingConfigurationSpecForProvider#name
   */
  readonly name?: string;

  /**
   * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
   *
   * @schema RecordingConfigurationSpecForProvider#recordingReconnectWindowSeconds
   */
  readonly recordingReconnectWindowSeconds?: number;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema RecordingConfigurationSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema RecordingConfigurationSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
   *
   * @schema RecordingConfigurationSpecForProvider#thumbnailConfiguration
   */
  readonly thumbnailConfiguration?: RecordingConfigurationSpecForProviderThumbnailConfiguration[];

}

/**
 * Converts an object of type 'RecordingConfigurationSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecForProvider(obj: RecordingConfigurationSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationConfiguration': obj.destinationConfiguration?.map(y => toJson_RecordingConfigurationSpecForProviderDestinationConfiguration(y)),
    'name': obj.name,
    'recordingReconnectWindowSeconds': obj.recordingReconnectWindowSeconds,
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'thumbnailConfiguration': obj.thumbnailConfiguration?.map(y => toJson_RecordingConfigurationSpecForProviderThumbnailConfiguration(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema RecordingConfigurationSpecInitProvider
 */
export interface RecordingConfigurationSpecInitProvider {
  /**
   * Object containing destination configuration for where recorded video will be stored.
   *
   * @schema RecordingConfigurationSpecInitProvider#destinationConfiguration
   */
  readonly destinationConfiguration?: RecordingConfigurationSpecInitProviderDestinationConfiguration[];

  /**
   * Recording Configuration name.
   *
   * @schema RecordingConfigurationSpecInitProvider#name
   */
  readonly name?: string;

  /**
   * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together.
   *
   * @schema RecordingConfigurationSpecInitProvider#recordingReconnectWindowSeconds
   */
  readonly recordingReconnectWindowSeconds?: number;

  /**
   * Key-value map of resource tags.
   *
   * @schema RecordingConfigurationSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Object containing information to enable/disable the recording of thumbnails for a live session and modify the interval at which thumbnails are generated for the live session.
   *
   * @schema RecordingConfigurationSpecInitProvider#thumbnailConfiguration
   */
  readonly thumbnailConfiguration?: RecordingConfigurationSpecInitProviderThumbnailConfiguration[];

}

/**
 * Converts an object of type 'RecordingConfigurationSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecInitProvider(obj: RecordingConfigurationSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationConfiguration': obj.destinationConfiguration?.map(y => toJson_RecordingConfigurationSpecInitProviderDestinationConfiguration(y)),
    'name': obj.name,
    'recordingReconnectWindowSeconds': obj.recordingReconnectWindowSeconds,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'thumbnailConfiguration': obj.thumbnailConfiguration?.map(y => toJson_RecordingConfigurationSpecInitProviderThumbnailConfiguration(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema RecordingConfigurationSpecManagementPolicies
 */
export enum RecordingConfigurationSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RecordingConfigurationSpecProviderConfigRef
 */
export interface RecordingConfigurationSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RecordingConfigurationSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RecordingConfigurationSpecProviderConfigRef#policy
   */
  readonly policy?: RecordingConfigurationSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecProviderConfigRef(obj: RecordingConfigurationSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RecordingConfigurationSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsTo
 */
export interface RecordingConfigurationSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RecordingConfigurationSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RecordingConfigurationSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecPublishConnectionDetailsTo(obj: RecordingConfigurationSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RecordingConfigurationSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RecordingConfigurationSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RecordingConfigurationSpecWriteConnectionSecretToRef
 */
export interface RecordingConfigurationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RecordingConfigurationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RecordingConfigurationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecWriteConnectionSecretToRef(obj: RecordingConfigurationSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecForProviderDestinationConfiguration
 */
export interface RecordingConfigurationSpecForProviderDestinationConfiguration {
  /**
   * S3 destination configuration where recorded videos will be stored.
   *
   * @schema RecordingConfigurationSpecForProviderDestinationConfiguration#s3
   */
  readonly s3?: RecordingConfigurationSpecForProviderDestinationConfigurationS3[];

}

/**
 * Converts an object of type 'RecordingConfigurationSpecForProviderDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecForProviderDestinationConfiguration(obj: RecordingConfigurationSpecForProviderDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    's3': obj.s3?.map(y => toJson_RecordingConfigurationSpecForProviderDestinationConfigurationS3(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecForProviderThumbnailConfiguration
 */
export interface RecordingConfigurationSpecForProviderThumbnailConfiguration {
  /**
   * Thumbnail recording mode. Valid values: DISABLED, INTERVAL.
   *
   * @schema RecordingConfigurationSpecForProviderThumbnailConfiguration#recordingMode
   */
  readonly recordingMode?: string;

  /**
   * The targeted thumbnail-generation interval in seconds.
   *
   * @schema RecordingConfigurationSpecForProviderThumbnailConfiguration#targetIntervalSeconds
   */
  readonly targetIntervalSeconds?: number;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecForProviderThumbnailConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecForProviderThumbnailConfiguration(obj: RecordingConfigurationSpecForProviderThumbnailConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'recordingMode': obj.recordingMode,
    'targetIntervalSeconds': obj.targetIntervalSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecInitProviderDestinationConfiguration
 */
export interface RecordingConfigurationSpecInitProviderDestinationConfiguration {
  /**
   * S3 destination configuration where recorded videos will be stored.
   *
   * @schema RecordingConfigurationSpecInitProviderDestinationConfiguration#s3
   */
  readonly s3?: RecordingConfigurationSpecInitProviderDestinationConfigurationS3[];

}

/**
 * Converts an object of type 'RecordingConfigurationSpecInitProviderDestinationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecInitProviderDestinationConfiguration(obj: RecordingConfigurationSpecInitProviderDestinationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    's3': obj.s3?.map(y => toJson_RecordingConfigurationSpecInitProviderDestinationConfigurationS3(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecInitProviderThumbnailConfiguration
 */
export interface RecordingConfigurationSpecInitProviderThumbnailConfiguration {
  /**
   * Thumbnail recording mode. Valid values: DISABLED, INTERVAL.
   *
   * @schema RecordingConfigurationSpecInitProviderThumbnailConfiguration#recordingMode
   */
  readonly recordingMode?: string;

  /**
   * The targeted thumbnail-generation interval in seconds.
   *
   * @schema RecordingConfigurationSpecInitProviderThumbnailConfiguration#targetIntervalSeconds
   */
  readonly targetIntervalSeconds?: number;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecInitProviderThumbnailConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecInitProviderThumbnailConfiguration(obj: RecordingConfigurationSpecInitProviderThumbnailConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'recordingMode': obj.recordingMode,
    'targetIntervalSeconds': obj.targetIntervalSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RecordingConfigurationSpecProviderConfigRefPolicy
 */
export interface RecordingConfigurationSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RecordingConfigurationSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RecordingConfigurationSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RecordingConfigurationSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RecordingConfigurationSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecProviderConfigRefPolicy(obj: RecordingConfigurationSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRef
 */
export interface RecordingConfigurationSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecPublishConnectionDetailsToConfigRef(obj: RecordingConfigurationSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsToMetadata
 */
export interface RecordingConfigurationSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecPublishConnectionDetailsToMetadata(obj: RecordingConfigurationSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecForProviderDestinationConfigurationS3
 */
export interface RecordingConfigurationSpecForProviderDestinationConfigurationS3 {
  /**
   * S3 bucket name where recorded videos will be stored.
   *
   * @schema RecordingConfigurationSpecForProviderDestinationConfigurationS3#bucketName
   */
  readonly bucketName?: string;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecForProviderDestinationConfigurationS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecForProviderDestinationConfigurationS3(obj: RecordingConfigurationSpecForProviderDestinationConfigurationS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RecordingConfigurationSpecInitProviderDestinationConfigurationS3
 */
export interface RecordingConfigurationSpecInitProviderDestinationConfigurationS3 {
  /**
   * S3 bucket name where recorded videos will be stored.
   *
   * @schema RecordingConfigurationSpecInitProviderDestinationConfigurationS3#bucketName
   */
  readonly bucketName?: string;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecInitProviderDestinationConfigurationS3' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecInitProviderDestinationConfigurationS3(obj: RecordingConfigurationSpecInitProviderDestinationConfigurationS3 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketName': obj.bucketName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RecordingConfigurationSpecProviderConfigRefPolicyResolution
 */
export enum RecordingConfigurationSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RecordingConfigurationSpecProviderConfigRefPolicyResolve
 */
export enum RecordingConfigurationSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy(obj: RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RecordingConfigurationSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

