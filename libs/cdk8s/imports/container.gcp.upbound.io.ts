// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Cluster is the Schema for the Clusters API. Creates a Google Kubernetes Engine (GKE) cluster.
 *
 * @schema Cluster
 */
export class Cluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Cluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'container.gcp.upbound.io/v1beta1',
    kind: 'Cluster',
  }

  /**
   * Renders a Kubernetes manifest for "Cluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClusterProps): any {
    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(props),
    };
  }

  /**
   * Defines a "Cluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClusterProps) {
    super(scope, id, {
      ...Cluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(resolved),
    };
  }
}

/**
 * Cluster is the Schema for the Clusters API. Creates a Google Kubernetes Engine (GKE) cluster.
 *
 * @schema Cluster
 */
export interface ClusterProps {
  /**
   * @schema Cluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ClusterSpec defines the desired state of Cluster
   *
   * @schema Cluster#spec
   */
  readonly spec: ClusterSpec;

}

/**
 * Converts an object of type 'ClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterProps(obj: ClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterSpec defines the desired state of Cluster
 *
 * @schema ClusterSpec
 */
export interface ClusterSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ClusterSpec#deletionPolicy
   */
  readonly deletionPolicy?: ClusterSpecDeletionPolicy;

  /**
   * @schema ClusterSpec#forProvider
   */
  readonly forProvider: ClusterSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ClusterSpec#managementPolicy
   */
  readonly managementPolicy?: ClusterSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ClusterSpec#providerConfigRef
   */
  readonly providerConfigRef?: ClusterSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ClusterSpec#providerRef
   */
  readonly providerRef?: ClusterSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ClusterSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ClusterSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ClusterSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ClusterSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpec(obj: ClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ClusterSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_ClusterSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_ClusterSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_ClusterSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ClusterSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ClusterSpecDeletionPolicy
 */
export enum ClusterSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ClusterSpecForProvider
 */
export interface ClusterSpecForProvider {
  /**
   * The configuration for addons supported by GKE. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#addonsConfig
   */
  readonly addonsConfig?: ClusterSpecForProviderAddonsConfig[];

  /**
   * Configuration for the Google Groups for GKE feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#authenticatorGroupsConfig
   */
  readonly authenticatorGroupsConfig?: ClusterSpecForProviderAuthenticatorGroupsConfig[];

  /**
   * Configuration options for the Binary Authorization feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#binaryAuthorization
   */
  readonly binaryAuthorization?: ClusterSpecForProviderBinaryAuthorization[];

  /**
   * Per-cluster configuration of Node Auto-Provisioning with Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs of the cluster's workload. See the guide to using Node Auto-Provisioning for more details. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#clusterAutoscaling
   */
  readonly clusterAutoscaling?: ClusterSpecForProviderClusterAutoscaling[];

  /**
   * The IP address range of the Kubernetes pods in this cluster in CIDR notation (e.g. 10.96.0.0/14). Leave blank to have one automatically chosen or specify a /14 block in 10.0.0.0/8. This field will only work for routes-based clusters, where ip_allocation_policy is not defined.
   *
   * @schema ClusterSpecForProvider#clusterIpv4Cidr
   */
  readonly clusterIpv4Cidr?: string;

  /**
   * Configuration for Confidential Nodes feature. Structure is documented below documented below.
   *
   * @schema ClusterSpecForProvider#confidentialNodes
   */
  readonly confidentialNodes?: ClusterSpecForProviderConfidentialNodes[];

  /**
   * Configuration for the Cost Allocation feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#costManagementConfig
   */
  readonly costManagementConfig?: ClusterSpecForProviderCostManagementConfig[];

  /**
   * Structure is documented below.
   *
   * @schema ClusterSpecForProvider#databaseEncryption
   */
  readonly databaseEncryption?: ClusterSpecForProviderDatabaseEncryption[];

  /**
   * The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.
   *
   * @schema ClusterSpecForProvider#datapathProvider
   */
  readonly datapathProvider?: string;

  /**
   * The default maximum number of pods per node in this cluster. This doesn't work on "routes-based" clusters, clusters that don't have IP Aliasing enabled. See the official documentation for more information.
   *
   * @schema ClusterSpecForProvider#defaultMaxPodsPerNode
   */
  readonly defaultMaxPodsPerNode?: number;

  /**
   * GKE SNAT DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster, API doc. Structure is documented below
   *
   * @schema ClusterSpecForProvider#defaultSnatStatus
   */
  readonly defaultSnatStatus?: ClusterSpecForProviderDefaultSnatStatus[];

  /**
   * Description of the cluster.
   *
   * @schema ClusterSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Configuration for Using Cloud DNS for GKE. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#dnsConfig
   */
  readonly dnsConfig?: ClusterSpecForProviderDnsConfig[];

  /**
   * Enable Autopilot for this cluster. Defaults to false. Note that when this option is enabled, certain features of Standard GKE are not available. See the official documentation for available features.
   *
   * @default false. Note that when this option is enabled, certain features of Standard GKE are not available. See the official documentation for available features.
   * @schema ClusterSpecForProvider#enableAutopilot
   */
  readonly enableAutopilot?: boolean;

  /**
   * (DEPRECATED) Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Google Binary Authorization. Deprecated in favor of binary_authorization.
   *
   * @schema ClusterSpecForProvider#enableBinaryAuthorization
   */
  readonly enableBinaryAuthorization?: boolean;

  /**
   * Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.
   *
   * @schema ClusterSpecForProvider#enableIntranodeVisibility
   */
  readonly enableIntranodeVisibility?: boolean;

  /**
   * Whether to enable Kubernetes Alpha features for this cluster. Note that when this option is enabled, the cluster cannot be upgraded and will be automatically deleted after 30 days.
   *
   * @schema ClusterSpecForProvider#enableKubernetesAlpha
   */
  readonly enableKubernetesAlpha?: boolean;

  /**
   * Whether L4ILB Subsetting is enabled for this cluster.
   *
   * @schema ClusterSpecForProvider#enableL4IlbSubsetting
   */
  readonly enableL4IlbSubsetting?: boolean;

  /**
   * Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM. Defaults to false
   *
   * @default false
   * @schema ClusterSpecForProvider#enableLegacyAbac
   */
  readonly enableLegacyAbac?: boolean;

  /**
   * Enable Shielded Nodes features on all nodes in this cluster.  Defaults to true.
   *
   * @default true.
   * @schema ClusterSpecForProvider#enableShieldedNodes
   */
  readonly enableShieldedNodes?: boolean;

  /**
   * Whether to enable Cloud TPU resources in this cluster. See the official documentation.
   *
   * @schema ClusterSpecForProvider#enableTpu
   */
  readonly enableTpu?: boolean;

  /**
   * Configuration for GKE Gateway API controller. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#gatewayApiConfig
   */
  readonly gatewayApiConfig?: ClusterSpecForProviderGatewayApiConfig[];

  /**
   * The number of nodes to create in this cluster's default node pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Must be set if node_pool is not set. If you're using google_container_node_pool objects with no default node pool, you'll need to set this to a value of at least 1, alongside setting remove_default_node_pool to true.
   *
   * @schema ClusterSpecForProvider#initialNodeCount
   */
  readonly initialNodeCount?: number;

  /**
   * Configuration of cluster IP allocation for VPC-native clusters. Adding this block enables IP aliasing, making the cluster VPC-native instead of routes-based. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#ipAllocationPolicy
   */
  readonly ipAllocationPolicy?: ClusterSpecForProviderIpAllocationPolicy[];

  /**
   * The location (region or zone) in which the cluster master will be created, as well as the default node location. If you specify a zone (such as us-central1-a), the cluster will be a zonal cluster with a single cluster master. If you specify a region (such as us-west1), the cluster will be a regional cluster with multiple masters spread across zones in the region, and with default node locations in those zones as well
   *
   * @schema ClusterSpecForProvider#location
   */
  readonly location: string;

  /**
   * Logging configuration for the cluster. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#loggingConfig
   */
  readonly loggingConfig?: ClusterSpecForProviderLoggingConfig[];

  /**
   * The logging service that the cluster should write logs to. Available options include logging.googleapis.com(Legacy Stackdriver), logging.googleapis.com/kubernetes(Stackdriver Kubernetes Engine Logging), and none. Defaults to logging.googleapis.com/kubernetes
   *
   * @default logging.googleapis.com/kubernetes
   * @schema ClusterSpecForProvider#loggingService
   */
  readonly loggingService?: string;

  /**
   * The maintenance policy to use for the cluster. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#maintenancePolicy
   */
  readonly maintenancePolicy?: ClusterSpecForProviderMaintenancePolicy[];

  /**
   * The authentication information for accessing the Kubernetes master. Some values in this block are only returned by the API if your service account has permission to get credentials for your GKE cluster. If you see an unexpected diff unsetting your client cert, ensure you have the container.clusters.getCredentials permission. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#masterAuth
   */
  readonly masterAuth?: ClusterSpecForProviderMasterAuth[];

  /**
   * The desired configuration options for master authorized networks. Omit the nested cidr_blocks attribute to disallow external access (except the cluster node IPs, which GKE automatically whitelists). Structure is documented below.
   *
   * @schema ClusterSpecForProvider#masterAuthorizedNetworksConfig
   */
  readonly masterAuthorizedNetworksConfig?: ClusterSpecForProviderMasterAuthorizedNetworksConfig[];

  /**
   * Structure is documented below.
   *
   * @schema ClusterSpecForProvider#meshCertificates
   */
  readonly meshCertificates?: ClusterSpecForProviderMeshCertificates[];

  /**
   * The minimum version of the master. GKE will auto-update the master to new versions, so this does not guarantee the current master version--use the read-only master_version field to obtain that. If unset, the cluster's version will be set by GKE to the version of the most recent official release (which is not necessarily the latest version). If you intend to specify versions manually, the docs describe the various acceptable formats for this field.
   *
   * @schema ClusterSpecForProvider#minMasterVersion
   */
  readonly minMasterVersion?: string;

  /**
   * Monitoring configuration for the cluster. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#monitoringConfig
   */
  readonly monitoringConfig?: ClusterSpecForProviderMonitoringConfig[];

  /**
   * The monitoring service that the cluster should write metrics to. Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API. VM metrics will be collected by Google Compute Engine regardless of this setting Available options include monitoring.googleapis.com(Legacy Stackdriver), monitoring.googleapis.com/kubernetes(Stackdriver Kubernetes Engine Monitoring), and none. Defaults to monitoring.googleapis.com/kubernetes
   *
   * @default monitoring.googleapis.com/kubernetes
   * @schema ClusterSpecForProvider#monitoringService
   */
  readonly monitoringService?: string;

  /**
   * The name or self_link of the Google Compute Engine network to which the cluster is connected. For Shared VPC, set this to the self link of the shared network.
   *
   * @schema ClusterSpecForProvider#network
   */
  readonly network?: string;

  /**
   * Configuration options for the NetworkPolicy feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#networkPolicy
   */
  readonly networkPolicy?: ClusterSpecForProviderNetworkPolicy[];

  /**
   * Reference to a Network in compute to populate network.
   *
   * @schema ClusterSpecForProvider#networkRef
   */
  readonly networkRef?: ClusterSpecForProviderNetworkRef;

  /**
   * Selector for a Network in compute to populate network.
   *
   * @schema ClusterSpecForProvider#networkSelector
   */
  readonly networkSelector?: ClusterSpecForProviderNetworkSelector;

  /**
   * Determines whether alias IPs or routes will be used for pod IPs in the cluster. Options are VPC_NATIVE or ROUTES. VPC_NATIVE enables IP aliasing, and requires the ip_allocation_policy block to be defined. By default, when this field is unspecified and no ip_allocation_policy blocks are set, GKE will create a ROUTES-based cluster.
   *
   * @schema ClusterSpecForProvider#networkingMode
   */
  readonly networkingMode?: string;

  /**
   * Parameters used in creating the default node pool. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#nodeConfig
   */
  readonly nodeConfig?: ClusterSpecForProviderNodeConfig[];

  /**
   * The list of zones in which the cluster's nodes are located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If this is specified for a zonal cluster, omit the cluster's zone.
   *
   * @schema ClusterSpecForProvider#nodeLocations
   */
  readonly nodeLocations?: string[];

  /**
   * Default NodePool settings for the entire cluster. These settings are overridden if specified on the specific NodePool object. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#nodePoolDefaults
   */
  readonly nodePoolDefaults?: ClusterSpecForProviderNodePoolDefaults[];

  /**
   * The Kubernetes version on the nodes. Must either be unset or set to the same value as min_master_version on create. Defaults to the default version set by GKE which is not necessarily the latest version. This only affects nodes in the default node pool. To update nodes in other node pools, use the version attribute on the node pool.
   *
   * @default the default version set by GKE which is not necessarily the latest version. This only affects nodes in the default node pool. To update nodes in other node pools, use the version attribute on the node pool.
   * @schema ClusterSpecForProvider#nodeVersion
   */
  readonly nodeVersion?: string;

  /**
   * Configuration for the cluster upgrade notifications feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#notificationConfig
   */
  readonly notificationConfig?: ClusterSpecForProviderNotificationConfig[];

  /**
   * Configuration for private clusters, clusters with private nodes. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#privateClusterConfig
   */
  readonly privateClusterConfig?: ClusterSpecForProviderPrivateClusterConfig[];

  /**
   * The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4).
   *
   * @schema ClusterSpecForProvider#privateIpv6GoogleAccess
   */
  readonly privateIpv6GoogleAccess?: string;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema ClusterSpecForProvider#project
   */
  readonly project?: string;

  /**
   * Configuration options for the Release channel feature, which provide more control over automatic upgrades of your GKE clusters. When updating this field, GKE imposes specific version requirements. See Selecting a new release channel for more details; the google_container_engine_versions datasource can provide the default version for a channel. Instead, use the "UNSPECIFIED" channel. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#releaseChannel
   */
  readonly releaseChannel?: ClusterSpecForProviderReleaseChannel[];

  /**
   * If true, deletes the default node pool upon cluster creation. If you're using google_container_node_pool resources with no default node pool, this should be set to true, alongside setting initial_node_count to at least 1.
   *
   * @schema ClusterSpecForProvider#removeDefaultNodePool
   */
  readonly removeDefaultNodePool?: boolean;

  /**
   * The GCE resource labels (a map of key/value pairs) to be applied to the cluster.
   *
   * @schema ClusterSpecForProvider#resourceLabels
   */
  readonly resourceLabels?: { [key: string]: string };

  /**
   * Configuration for the ResourceUsageExportConfig feature. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#resourceUsageExportConfig
   */
  readonly resourceUsageExportConfig?: ClusterSpecForProviderResourceUsageExportConfig[];

  /**
   * Structure is documented below.
   *
   * @schema ClusterSpecForProvider#serviceExternalIpsConfig
   */
  readonly serviceExternalIpsConfig?: ClusterSpecForProviderServiceExternalIpsConfig[];

  /**
   * The name or self_link of the Google Compute Engine subnetwork in which the cluster's instances are launched.
   *
   * @schema ClusterSpecForProvider#subnetwork
   */
  readonly subnetwork?: string;

  /**
   * Reference to a Subnetwork in compute to populate subnetwork.
   *
   * @schema ClusterSpecForProvider#subnetworkRef
   */
  readonly subnetworkRef?: ClusterSpecForProviderSubnetworkRef;

  /**
   * Selector for a Subnetwork in compute to populate subnetwork.
   *
   * @schema ClusterSpecForProvider#subnetworkSelector
   */
  readonly subnetworkSelector?: ClusterSpecForProviderSubnetworkSelector;

  /**
   * Vertical Pod Autoscaling automatically adjusts the resources of pods controlled by it. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#verticalPodAutoscaling
   */
  readonly verticalPodAutoscaling?: ClusterSpecForProviderVerticalPodAutoscaling[];

  /**
   * Workload Identity allows Kubernetes service accounts to act as a user-managed Google IAM Service Account. Structure is documented below.
   *
   * @schema ClusterSpecForProvider#workloadIdentityConfig
   */
  readonly workloadIdentityConfig?: ClusterSpecForProviderWorkloadIdentityConfig[];

}

/**
 * Converts an object of type 'ClusterSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProvider(obj: ClusterSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addonsConfig': obj.addonsConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfig(y)),
    'authenticatorGroupsConfig': obj.authenticatorGroupsConfig?.map(y => toJson_ClusterSpecForProviderAuthenticatorGroupsConfig(y)),
    'binaryAuthorization': obj.binaryAuthorization?.map(y => toJson_ClusterSpecForProviderBinaryAuthorization(y)),
    'clusterAutoscaling': obj.clusterAutoscaling?.map(y => toJson_ClusterSpecForProviderClusterAutoscaling(y)),
    'clusterIpv4Cidr': obj.clusterIpv4Cidr,
    'confidentialNodes': obj.confidentialNodes?.map(y => toJson_ClusterSpecForProviderConfidentialNodes(y)),
    'costManagementConfig': obj.costManagementConfig?.map(y => toJson_ClusterSpecForProviderCostManagementConfig(y)),
    'databaseEncryption': obj.databaseEncryption?.map(y => toJson_ClusterSpecForProviderDatabaseEncryption(y)),
    'datapathProvider': obj.datapathProvider,
    'defaultMaxPodsPerNode': obj.defaultMaxPodsPerNode,
    'defaultSnatStatus': obj.defaultSnatStatus?.map(y => toJson_ClusterSpecForProviderDefaultSnatStatus(y)),
    'description': obj.description,
    'dnsConfig': obj.dnsConfig?.map(y => toJson_ClusterSpecForProviderDnsConfig(y)),
    'enableAutopilot': obj.enableAutopilot,
    'enableBinaryAuthorization': obj.enableBinaryAuthorization,
    'enableIntranodeVisibility': obj.enableIntranodeVisibility,
    'enableKubernetesAlpha': obj.enableKubernetesAlpha,
    'enableL4IlbSubsetting': obj.enableL4IlbSubsetting,
    'enableLegacyAbac': obj.enableLegacyAbac,
    'enableShieldedNodes': obj.enableShieldedNodes,
    'enableTpu': obj.enableTpu,
    'gatewayApiConfig': obj.gatewayApiConfig?.map(y => toJson_ClusterSpecForProviderGatewayApiConfig(y)),
    'initialNodeCount': obj.initialNodeCount,
    'ipAllocationPolicy': obj.ipAllocationPolicy?.map(y => toJson_ClusterSpecForProviderIpAllocationPolicy(y)),
    'location': obj.location,
    'loggingConfig': obj.loggingConfig?.map(y => toJson_ClusterSpecForProviderLoggingConfig(y)),
    'loggingService': obj.loggingService,
    'maintenancePolicy': obj.maintenancePolicy?.map(y => toJson_ClusterSpecForProviderMaintenancePolicy(y)),
    'masterAuth': obj.masterAuth?.map(y => toJson_ClusterSpecForProviderMasterAuth(y)),
    'masterAuthorizedNetworksConfig': obj.masterAuthorizedNetworksConfig?.map(y => toJson_ClusterSpecForProviderMasterAuthorizedNetworksConfig(y)),
    'meshCertificates': obj.meshCertificates?.map(y => toJson_ClusterSpecForProviderMeshCertificates(y)),
    'minMasterVersion': obj.minMasterVersion,
    'monitoringConfig': obj.monitoringConfig?.map(y => toJson_ClusterSpecForProviderMonitoringConfig(y)),
    'monitoringService': obj.monitoringService,
    'network': obj.network,
    'networkPolicy': obj.networkPolicy?.map(y => toJson_ClusterSpecForProviderNetworkPolicy(y)),
    'networkRef': toJson_ClusterSpecForProviderNetworkRef(obj.networkRef),
    'networkSelector': toJson_ClusterSpecForProviderNetworkSelector(obj.networkSelector),
    'networkingMode': obj.networkingMode,
    'nodeConfig': obj.nodeConfig?.map(y => toJson_ClusterSpecForProviderNodeConfig(y)),
    'nodeLocations': obj.nodeLocations?.map(y => y),
    'nodePoolDefaults': obj.nodePoolDefaults?.map(y => toJson_ClusterSpecForProviderNodePoolDefaults(y)),
    'nodeVersion': obj.nodeVersion,
    'notificationConfig': obj.notificationConfig?.map(y => toJson_ClusterSpecForProviderNotificationConfig(y)),
    'privateClusterConfig': obj.privateClusterConfig?.map(y => toJson_ClusterSpecForProviderPrivateClusterConfig(y)),
    'privateIpv6GoogleAccess': obj.privateIpv6GoogleAccess,
    'project': obj.project,
    'releaseChannel': obj.releaseChannel?.map(y => toJson_ClusterSpecForProviderReleaseChannel(y)),
    'removeDefaultNodePool': obj.removeDefaultNodePool,
    'resourceLabels': ((obj.resourceLabels) === undefined) ? undefined : (Object.entries(obj.resourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'resourceUsageExportConfig': obj.resourceUsageExportConfig?.map(y => toJson_ClusterSpecForProviderResourceUsageExportConfig(y)),
    'serviceExternalIpsConfig': obj.serviceExternalIpsConfig?.map(y => toJson_ClusterSpecForProviderServiceExternalIpsConfig(y)),
    'subnetwork': obj.subnetwork,
    'subnetworkRef': toJson_ClusterSpecForProviderSubnetworkRef(obj.subnetworkRef),
    'subnetworkSelector': toJson_ClusterSpecForProviderSubnetworkSelector(obj.subnetworkSelector),
    'verticalPodAutoscaling': obj.verticalPodAutoscaling?.map(y => toJson_ClusterSpecForProviderVerticalPodAutoscaling(y)),
    'workloadIdentityConfig': obj.workloadIdentityConfig?.map(y => toJson_ClusterSpecForProviderWorkloadIdentityConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ClusterSpecManagementPolicy
 */
export enum ClusterSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ClusterSpecProviderConfigRef
 */
export interface ClusterSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecProviderConfigRef#policy
   */
  readonly policy?: ClusterSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderConfigRef(obj: ClusterSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ClusterSpecProviderRef
 */
export interface ClusterSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecProviderRef#policy
   */
  readonly policy?: ClusterSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderRef(obj: ClusterSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ClusterSpecPublishConnectionDetailsTo
 */
export interface ClusterSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ClusterSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ClusterSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsTo(obj: ClusterSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ClusterSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ClusterSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ClusterSpecWriteConnectionSecretToRef
 */
export interface ClusterSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ClusterSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ClusterSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ClusterSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecWriteConnectionSecretToRef(obj: ClusterSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfig
 */
export interface ClusterSpecForProviderAddonsConfig {
  /**
   * . Structure is documented below.
   *
   * @schema ClusterSpecForProviderAddonsConfig#cloudrunConfig
   */
  readonly cloudrunConfig?: ClusterSpecForProviderAddonsConfigCloudrunConfig[];

  /**
   * . The status of the ConfigConnector addon. It is disabled by default; Set enabled = true to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#configConnectorConfig
   */
  readonly configConnectorConfig?: ClusterSpecForProviderAddonsConfigConfigConnectorConfig[];

  /**
   * . The status of the NodeLocal DNSCache addon. It is disabled by default. Set enabled = true to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#dnsCacheConfig
   */
  readonly dnsCacheConfig?: ClusterSpecForProviderAddonsConfigDnsCacheConfig[];

  /**
   * . Whether this cluster should enable the Google Compute Engine Persistent Disk Container Storage Interface (CSI) Driver. Defaults to disabled; set enabled = true to enabled.
   *
   * @default disabled; set enabled = true to enabled.
   * @schema ClusterSpecForProviderAddonsConfig#gcePersistentDiskCsiDriverConfig
   */
  readonly gcePersistentDiskCsiDriverConfig?: ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig[];

  /**
   * The status of the Filestore CSI driver addon, which allows the usage of filestore instance as volumes. It is disabled by default; set enabled = true to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#gcpFilestoreCsiDriverConfig
   */
  readonly gcpFilestoreCsiDriverConfig?: ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig[];

  /**
   * . The status of the Backup for GKE agent addon. It is disabled by default; Set enabled = true to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#gkeBackupAgentConfig
   */
  readonly gkeBackupAgentConfig?: ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig[];

  /**
   * The status of the Horizontal Pod Autoscaling addon, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods. It is enabled by default; set disabled = true to disable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#horizontalPodAutoscaling
   */
  readonly horizontalPodAutoscaling?: ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling[];

  /**
   * The status of the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster. It is enabled by default; set disabled = true to disable.
   *
   * @schema ClusterSpecForProviderAddonsConfig#httpLoadBalancing
   */
  readonly httpLoadBalancing?: ClusterSpecForProviderAddonsConfigHttpLoadBalancing[];

  /**
   * Whether we should enable the network policy addon for the master.  This must be enabled in order to enable network policy for the nodes. To enable this, you must also define a network_policy block, otherwise nothing will happen. It can only be disabled if the nodes already do not have network policies enabled. Defaults to disabled; set disabled = false to enable.
   *
   * @default disabled; set disabled = false to enable.
   * @schema ClusterSpecForProviderAddonsConfig#networkPolicyConfig
   */
  readonly networkPolicyConfig?: ClusterSpecForProviderAddonsConfigNetworkPolicyConfig[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfig(obj: ClusterSpecForProviderAddonsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudrunConfig': obj.cloudrunConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigCloudrunConfig(y)),
    'configConnectorConfig': obj.configConnectorConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigConfigConnectorConfig(y)),
    'dnsCacheConfig': obj.dnsCacheConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigDnsCacheConfig(y)),
    'gcePersistentDiskCsiDriverConfig': obj.gcePersistentDiskCsiDriverConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig(y)),
    'gcpFilestoreCsiDriverConfig': obj.gcpFilestoreCsiDriverConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig(y)),
    'gkeBackupAgentConfig': obj.gkeBackupAgentConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig(y)),
    'horizontalPodAutoscaling': obj.horizontalPodAutoscaling?.map(y => toJson_ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling(y)),
    'httpLoadBalancing': obj.httpLoadBalancing?.map(y => toJson_ClusterSpecForProviderAddonsConfigHttpLoadBalancing(y)),
    'networkPolicyConfig': obj.networkPolicyConfig?.map(y => toJson_ClusterSpecForProviderAddonsConfigNetworkPolicyConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAuthenticatorGroupsConfig
 */
export interface ClusterSpecForProviderAuthenticatorGroupsConfig {
  /**
   * The name of the RBAC security group for use with Google security groups in Kubernetes RBAC. Group name must be in format gke-security-groups@yourdomain.com.
   *
   * @schema ClusterSpecForProviderAuthenticatorGroupsConfig#securityGroup
   */
  readonly securityGroup: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAuthenticatorGroupsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAuthenticatorGroupsConfig(obj: ClusterSpecForProviderAuthenticatorGroupsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'securityGroup': obj.securityGroup,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderBinaryAuthorization
 */
export interface ClusterSpecForProviderBinaryAuthorization {
  /**
   * (DEPRECATED) Enable Binary Authorization for this cluster. Deprecated in favor of evaluation_mode.
   *
   * @schema ClusterSpecForProviderBinaryAuthorization#enabled
   */
  readonly enabled?: boolean;

  /**
   * Mode of operation for Binary Authorization policy evaluation. Valid values are DISABLED and PROJECT_SINGLETON_POLICY_ENFORCE. PROJECT_SINGLETON_POLICY_ENFORCE is functionally equivalent to the deprecated enable_binary_authorization parameter being set to true.
   *
   * @schema ClusterSpecForProviderBinaryAuthorization#evaluationMode
   */
  readonly evaluationMode?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderBinaryAuthorization' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderBinaryAuthorization(obj: ClusterSpecForProviderBinaryAuthorization | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'evaluationMode': obj.evaluationMode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscaling
 */
export interface ClusterSpecForProviderClusterAutoscaling {
  /**
   * Contains defaults for a node pool created by NAP. A subset of fields also apply to GKE Autopilot clusters. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscaling#autoProvisioningDefaults
   */
  readonly autoProvisioningDefaults?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults[];

  /**
   * Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, true is implied for autopilot clusters. Resource limits for cpu and memory must be defined to enable node auto-provisioning for GKE Standard.
   *
   * @schema ClusterSpecForProviderClusterAutoscaling#enabled
   */
  readonly enabled?: boolean;

  /**
   * Global constraints for machine resources in the cluster. Configuring the cpu and memory types is required if node auto-provisioning is enabled. These limits will apply to node pool autoscaling in addition to node auto-provisioning. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscaling#resourceLimits
   */
  readonly resourceLimits?: ClusterSpecForProviderClusterAutoscalingResourceLimits[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscaling(obj: ClusterSpecForProviderClusterAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoProvisioningDefaults': obj.autoProvisioningDefaults?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults(y)),
    'enabled': obj.enabled,
    'resourceLimits': obj.resourceLimits?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingResourceLimits(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderConfidentialNodes
 */
export interface ClusterSpecForProviderConfidentialNodes {
  /**
   * Enable Confidential Nodes for this cluster.
   *
   * @schema ClusterSpecForProviderConfidentialNodes#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderConfidentialNodes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderConfidentialNodes(obj: ClusterSpecForProviderConfidentialNodes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderCostManagementConfig
 */
export interface ClusterSpecForProviderCostManagementConfig {
  /**
   * Whether to enable the cost allocation feature.
   *
   * @schema ClusterSpecForProviderCostManagementConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderCostManagementConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderCostManagementConfig(obj: ClusterSpecForProviderCostManagementConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderDatabaseEncryption
 */
export interface ClusterSpecForProviderDatabaseEncryption {
  /**
   * the key to use to encrypt/decrypt secrets.  See the DatabaseEncryption definition for more information.
   *
   * @schema ClusterSpecForProviderDatabaseEncryption#keyName
   */
  readonly keyName?: string;

  /**
   * ENCRYPTED or DECRYPTED
   *
   * @schema ClusterSpecForProviderDatabaseEncryption#state
   */
  readonly state: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderDatabaseEncryption' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderDatabaseEncryption(obj: ClusterSpecForProviderDatabaseEncryption | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyName': obj.keyName,
    'state': obj.state,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderDefaultSnatStatus
 */
export interface ClusterSpecForProviderDefaultSnatStatus {
  /**
   * Whether the cluster disables default in-node sNAT rules. In-node sNAT rules will be disabled when defaultSnatStatus is disabled.When disabled is set to false, default IP masquerade rules will be applied to the nodes to prevent sNAT on cluster internal traffic
   *
   * @schema ClusterSpecForProviderDefaultSnatStatus#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderDefaultSnatStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderDefaultSnatStatus(obj: ClusterSpecForProviderDefaultSnatStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderDnsConfig
 */
export interface ClusterSpecForProviderDnsConfig {
  /**
   * Which in-cluster DNS provider should be used. PROVIDER_UNSPECIFIED (default) or PLATFORM_DEFAULT or CLOUD_DNS.
   *
   * @schema ClusterSpecForProviderDnsConfig#clusterDns
   */
  readonly clusterDns?: string;

  /**
   * The suffix used for all cluster service records.
   *
   * @schema ClusterSpecForProviderDnsConfig#clusterDnsDomain
   */
  readonly clusterDnsDomain?: string;

  /**
   * The scope of access to cluster DNS records. DNS_SCOPE_UNSPECIFIED (default) or CLUSTER_SCOPE or VPC_SCOPE.
   *
   * @schema ClusterSpecForProviderDnsConfig#clusterDnsScope
   */
  readonly clusterDnsScope?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderDnsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderDnsConfig(obj: ClusterSpecForProviderDnsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterDns': obj.clusterDns,
    'clusterDnsDomain': obj.clusterDnsDomain,
    'clusterDnsScope': obj.clusterDnsScope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderGatewayApiConfig
 */
export interface ClusterSpecForProviderGatewayApiConfig {
  /**
   * Which Gateway Api channel should be used. CHANNEL_DISABLED, CHANNEL_EXPERIMENTAL or CHANNEL_STANDARD.
   *
   * @schema ClusterSpecForProviderGatewayApiConfig#channel
   */
  readonly channel: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderGatewayApiConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderGatewayApiConfig(obj: ClusterSpecForProviderGatewayApiConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderIpAllocationPolicy
 */
export interface ClusterSpecForProviderIpAllocationPolicy {
  /**
   * The IP address range for the cluster pod IPs. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicy#clusterIpv4CidrBlock
   */
  readonly clusterIpv4CidrBlock?: string;

  /**
   * The name of the existing secondary range in the cluster's subnetwork to use for pod IP addresses. Alternatively, cluster_ipv4_cidr_block can be used to automatically create a GKE-managed one.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicy#clusterSecondaryRangeName
   */
  readonly clusterSecondaryRangeName?: string;

  /**
   * @schema ClusterSpecForProviderIpAllocationPolicy#podCidrOverprovisionConfig
   */
  readonly podCidrOverprovisionConfig?: ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig[];

  /**
   * The IP address range of the services IPs in this cluster. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) from the RFC-1918 private networks (e.g. 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) to pick a specific range to use.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicy#servicesIpv4CidrBlock
   */
  readonly servicesIpv4CidrBlock?: string;

  /**
   * The name of the existing secondary range in the cluster's subnetwork to use for service ClusterIPs. Alternatively, services_ipv4_cidr_block can be used to automatically create a GKE-managed one.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicy#servicesSecondaryRangeName
   */
  readonly servicesSecondaryRangeName?: string;

  /**
   * The IP Stack Type of the cluster. Default value is IPV4. Possible values are IPV4 and IPV4_IPV6.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicy#stackType
   */
  readonly stackType?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderIpAllocationPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderIpAllocationPolicy(obj: ClusterSpecForProviderIpAllocationPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterIpv4CidrBlock': obj.clusterIpv4CidrBlock,
    'clusterSecondaryRangeName': obj.clusterSecondaryRangeName,
    'podCidrOverprovisionConfig': obj.podCidrOverprovisionConfig?.map(y => toJson_ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig(y)),
    'servicesIpv4CidrBlock': obj.servicesIpv4CidrBlock,
    'servicesSecondaryRangeName': obj.servicesSecondaryRangeName,
    'stackType': obj.stackType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderLoggingConfig
 */
export interface ClusterSpecForProviderLoggingConfig {
  /**
   * The GKE components exposing logs. Supported values include: SYSTEM_COMPONENTS, APISERVER, CONTROLLER_MANAGER, SCHEDULER, and WORKLOADS.
   *
   * @schema ClusterSpecForProviderLoggingConfig#enableComponents
   */
  readonly enableComponents: string[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderLoggingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderLoggingConfig(obj: ClusterSpecForProviderLoggingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableComponents': obj.enableComponents?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMaintenancePolicy
 */
export interface ClusterSpecForProviderMaintenancePolicy {
  /**
   * structure documented below.
   *
   * @schema ClusterSpecForProviderMaintenancePolicy#dailyMaintenanceWindow
   */
  readonly dailyMaintenanceWindow?: ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow[];

  /**
   * structure documented below
   *
   * @schema ClusterSpecForProviderMaintenancePolicy#maintenanceExclusion
   */
  readonly maintenanceExclusion?: ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion[];

  /**
   * structure documented below
   *
   * @schema ClusterSpecForProviderMaintenancePolicy#recurringWindow
   */
  readonly recurringWindow?: ClusterSpecForProviderMaintenancePolicyRecurringWindow[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderMaintenancePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMaintenancePolicy(obj: ClusterSpecForProviderMaintenancePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dailyMaintenanceWindow': obj.dailyMaintenanceWindow?.map(y => toJson_ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow(y)),
    'maintenanceExclusion': obj.maintenanceExclusion?.map(y => toJson_ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion(y)),
    'recurringWindow': obj.recurringWindow?.map(y => toJson_ClusterSpecForProviderMaintenancePolicyRecurringWindow(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMasterAuth
 */
export interface ClusterSpecForProviderMasterAuth {
  /**
   * Whether client certificate authorization is enabled for this cluster.  For example:
   *
   * @schema ClusterSpecForProviderMasterAuth#clientCertificateConfig
   */
  readonly clientCertificateConfig: ClusterSpecForProviderMasterAuthClientCertificateConfig[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderMasterAuth' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMasterAuth(obj: ClusterSpecForProviderMasterAuth | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clientCertificateConfig': obj.clientCertificateConfig?.map(y => toJson_ClusterSpecForProviderMasterAuthClientCertificateConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfig
 */
export interface ClusterSpecForProviderMasterAuthorizedNetworksConfig {
  /**
   * External networks that can access the Kubernetes cluster master through HTTPS.
   *
   * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfig#cidrBlocks
   */
  readonly cidrBlocks?: ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks[];

  /**
   * Whether Kubernetes master is accessible via Google Compute Engine Public IPs.
   *
   * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfig#gcpPublicCidrsAccessEnabled
   */
  readonly gcpPublicCidrsAccessEnabled?: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMasterAuthorizedNetworksConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMasterAuthorizedNetworksConfig(obj: ClusterSpecForProviderMasterAuthorizedNetworksConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cidrBlocks': obj.cidrBlocks?.map(y => toJson_ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks(y)),
    'gcpPublicCidrsAccessEnabled': obj.gcpPublicCidrsAccessEnabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMeshCertificates
 */
export interface ClusterSpecForProviderMeshCertificates {
  /**
   * Controls the issuance of workload mTLS certificates. It is enabled by default. Workload Identity is required, see workload_config.
   *
   * @schema ClusterSpecForProviderMeshCertificates#enableCertificates
   */
  readonly enableCertificates: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMeshCertificates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMeshCertificates(obj: ClusterSpecForProviderMeshCertificates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableCertificates': obj.enableCertificates,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMonitoringConfig
 */
export interface ClusterSpecForProviderMonitoringConfig {
  /**
   * The GKE components exposing metrics. Supported values include: SYSTEM_COMPONENTS, APISERVER, CONTROLLER_MANAGER, and SCHEDULER. In beta provider, WORKLOADS is supported on top of those 4 values. (WORKLOADS is deprecated and removed in GKE 1.24.)
   *
   * @schema ClusterSpecForProviderMonitoringConfig#enableComponents
   */
  readonly enableComponents: string[];

  /**
   * Configuration for Managed Service for Prometheus. Structure is documented below.
   *
   * @schema ClusterSpecForProviderMonitoringConfig#managedPrometheus
   */
  readonly managedPrometheus?: ClusterSpecForProviderMonitoringConfigManagedPrometheus[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderMonitoringConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMonitoringConfig(obj: ClusterSpecForProviderMonitoringConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableComponents': obj.enableComponents?.map(y => y),
    'managedPrometheus': obj.managedPrometheus?.map(y => toJson_ClusterSpecForProviderMonitoringConfigManagedPrometheus(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNetworkPolicy
 */
export interface ClusterSpecForProviderNetworkPolicy {
  /**
   * Whether network policy is enabled on the cluster.
   *
   * @schema ClusterSpecForProviderNetworkPolicy#enabled
   */
  readonly enabled: boolean;

  /**
   * The selected network policy provider. Defaults to PROVIDER_UNSPECIFIED.
   *
   * @default PROVIDER_UNSPECIFIED.
   * @schema ClusterSpecForProviderNetworkPolicy#provider
   */
  readonly provider?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworkPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworkPolicy(obj: ClusterSpecForProviderNetworkPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'provider': obj.provider,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Network in compute to populate network.
 *
 * @schema ClusterSpecForProviderNetworkRef
 */
export interface ClusterSpecForProviderNetworkRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecForProviderNetworkRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecForProviderNetworkRef#policy
   */
  readonly policy?: ClusterSpecForProviderNetworkRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworkRef(obj: ClusterSpecForProviderNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecForProviderNetworkRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Network in compute to populate network.
 *
 * @schema ClusterSpecForProviderNetworkSelector
 */
export interface ClusterSpecForProviderNetworkSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ClusterSpecForProviderNetworkSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ClusterSpecForProviderNetworkSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ClusterSpecForProviderNetworkSelector#policy
   */
  readonly policy?: ClusterSpecForProviderNetworkSelectorPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworkSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworkSelector(obj: ClusterSpecForProviderNetworkSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ClusterSpecForProviderNetworkSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfig
 */
export interface ClusterSpecForProviderNodeConfig {
  /**
   * Specifies options for controlling advanced machine features. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#advancedMachineFeatures
   */
  readonly advancedMachineFeatures?: ClusterSpecForProviderNodeConfigAdvancedMachineFeatures[];

  /**
   * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
   *
   * @schema ClusterSpecForProviderNodeConfig#bootDiskKmsKey
   */
  readonly bootDiskKmsKey?: string;

  /**
   * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. Defaults to 100GB.
   *
   * @default 100GB.
   * @schema ClusterSpecForProviderNodeConfig#diskSizeGb
   */
  readonly diskSizeGb?: number;

  /**
   * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-balanced' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
   *
   * @schema ClusterSpecForProviderNodeConfig#diskType
   */
  readonly diskType?: string;

  /**
   * Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#ephemeralStorageLocalSsdConfig
   */
  readonly ephemeralStorageLocalSsdConfig?: ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig[];

  /**
   * Parameters for the Google Container Filesystem (GCFS). If unspecified, GCFS will not be enabled on the node pool. When enabling this feature you must specify image_type = "COS_CONTAINERD" and node_version from GKE versions 1.19 or later to use it. For GKE versions 1.19, 1.20, and 1.21, the recommended minimum node_version would be 1.19.15-gke.1300, 1.20.11-gke.1300, and 1.21.5-gke.1300 respectively. A machine_type that has more than 16 GiB of memory is also recommended. GCFS must be enabled in order to use image streaming. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#gcfsConfig
   */
  readonly gcfsConfig?: ClusterSpecForProviderNodeConfigGcfsConfig[];

  /**
   * List of the type and count of accelerator cards attached to the instance. Structure documented below.12 this field is an Attribute as Block
   *
   * @schema ClusterSpecForProviderNodeConfig#guestAccelerator
   */
  readonly guestAccelerator?: ClusterSpecForProviderNodeConfigGuestAccelerator[];

  /**
   * Google Virtual NIC (gVNIC) is a virtual network interface. Installing the gVNIC driver allows for more efficient traffic transmission across the Google network infrastructure. gVNIC is an alternative to the virtIO-based ethernet driver. GKE nodes must use a Container-Optimized OS node image. GKE node version 1.15.11-gke.15 or later Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#gvnic
   */
  readonly gvnic?: ClusterSpecForProviderNodeConfigGvnic[];

  /**
   * The image type to use for this node. Note that changing the image type will delete and recreate all nodes in the node pool.
   *
   * @schema ClusterSpecForProviderNodeConfig#imageType
   */
  readonly imageType?: string;

  /**
   * Kubelet configuration, currently supported attributes can be found here. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#kubeletConfig
   */
  readonly kubeletConfig?: ClusterSpecForProviderNodeConfigKubeletConfig[];

  /**
   * The Kubernetes labels (key/value pairs) to be applied to each node. The kubernetes.io/ and k8s.io/ prefixes are reserved by Kubernetes Core components and cannot be specified.
   *
   * @schema ClusterSpecForProviderNodeConfig#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Linux node configuration, currently supported attributes can be found here. Note that validations happen all server side. All attributes are optional. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#linuxNodeConfig
   */
  readonly linuxNodeConfig?: ClusterSpecForProviderNodeConfigLinuxNodeConfig[];

  /**
   * Parameters for the local NVMe SSDs. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#localNvmeSsdBlockConfig
   */
  readonly localNvmeSsdBlockConfig?: ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig[];

  /**
   * The amount of local SSD disks that will be attached to each cluster node. Defaults to 0.
   *
   * @default 0.
   * @schema ClusterSpecForProviderNodeConfig#localSsdCount
   */
  readonly localSsdCount?: number;

  /**
   * wide default value. Valid values include DEFAULT and MAX_THROUGHPUT. See Increasing logging agent throughput for more information.
   *
   * @schema ClusterSpecForProviderNodeConfig#loggingVariant
   */
  readonly loggingVariant?: string;

  /**
   * The name of a Google Compute Engine machine type. Defaults to e2-medium. To create a custom machine type, value should be set as specified here.
   *
   * @default e2-medium. To create a custom machine type, value should be set as specified here.
   * @schema ClusterSpecForProviderNodeConfig#machineType
   */
  readonly machineType?: string;

  /**
   * The metadata key/value pairs assigned to instances in the cluster. From GKE 1. To avoid this, set the value in your config.
   *
   * @schema ClusterSpecForProviderNodeConfig#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell. See the official documentation for more information.
   *
   * @schema ClusterSpecForProviderNodeConfig#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
   *
   * @schema ClusterSpecForProviderNodeConfig#nodeGroup
   */
  readonly nodeGroup?: string;

  /**
   * The set of Google API scopes to be made available on all of the node VMs under the "default" service account. Use the "https://www.googleapis.com/auth/cloud-platform" scope to grant access to all APIs. It is recommended that you set service_account to a non-default service account and grant IAM roles to that service account for only the resources that it needs.
   *
   * @schema ClusterSpecForProviderNodeConfig#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * A boolean that represents whether or not the underlying node VMs are preemptible. See the official documentation for more information. Defaults to false.
   *
   * @default false.
   * @schema ClusterSpecForProviderNodeConfig#preemptible
   */
  readonly preemptible?: boolean;

  /**
   * The configuration of the desired reservation which instances could take capacity from. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#reservationAffinity
   */
  readonly reservationAffinity?: ClusterSpecForProviderNodeConfigReservationAffinity[];

  /**
   * The GCP labels (key/value pairs) to be applied to each node. Refer here for how these labels are applied to clusters, node pools and nodes.
   *
   * @schema ClusterSpecForProviderNodeConfig#resourceLabels
   */
  readonly resourceLabels?: { [key: string]: string };

  /**
   * The service account to be used by the Node VMs. If not specified, the "default" service account is used.
   *
   * @schema ClusterSpecForProviderNodeConfig#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
   *
   * @schema ClusterSpecForProviderNodeConfig#serviceAccountRef
   */
  readonly serviceAccountRef?: ClusterSpecForProviderNodeConfigServiceAccountRef;

  /**
   * Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
   *
   * @schema ClusterSpecForProviderNodeConfig#serviceAccountSelector
   */
  readonly serviceAccountSelector?: ClusterSpecForProviderNodeConfigServiceAccountSelector;

  /**
   * Shielded Instance options. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: ClusterSpecForProviderNodeConfigShieldedInstanceConfig[];

  /**
   * A boolean that represents whether the underlying node VMs are spot. See the official documentation for more information. Defaults to false.
   *
   * @default false.
   * @schema ClusterSpecForProviderNodeConfig#spot
   */
  readonly spot?: boolean;

  /**
   * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls.
   *
   * @schema ClusterSpecForProviderNodeConfig#tags
   */
  readonly tags?: string[];

  /**
   * A list of Kubernetes taints to apply to nodes. GKE's API can only set this field on cluster creation. However, GKE will add taints to your nodes if you enable certain features such as GPUs. Taint values can be updated safely in Kubernetes (eg. through kubectl), and it's recommended that you do not use this field to manage taints. If you do, lifecycle.ignore_changes is recommended. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#taint
   */
  readonly taint?: ClusterSpecForProviderNodeConfigTaint[];

  /**
   * Metadata configuration to expose to workloads on the node pool. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfig#workloadMetadataConfig
   */
  readonly workloadMetadataConfig?: ClusterSpecForProviderNodeConfigWorkloadMetadataConfig[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfig(obj: ClusterSpecForProviderNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'advancedMachineFeatures': obj.advancedMachineFeatures?.map(y => toJson_ClusterSpecForProviderNodeConfigAdvancedMachineFeatures(y)),
    'bootDiskKmsKey': obj.bootDiskKmsKey,
    'diskSizeGb': obj.diskSizeGb,
    'diskType': obj.diskType,
    'ephemeralStorageLocalSsdConfig': obj.ephemeralStorageLocalSsdConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig(y)),
    'gcfsConfig': obj.gcfsConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigGcfsConfig(y)),
    'guestAccelerator': obj.guestAccelerator?.map(y => toJson_ClusterSpecForProviderNodeConfigGuestAccelerator(y)),
    'gvnic': obj.gvnic?.map(y => toJson_ClusterSpecForProviderNodeConfigGvnic(y)),
    'imageType': obj.imageType,
    'kubeletConfig': obj.kubeletConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigKubeletConfig(y)),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'linuxNodeConfig': obj.linuxNodeConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigLinuxNodeConfig(y)),
    'localNvmeSsdBlockConfig': obj.localNvmeSsdBlockConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig(y)),
    'localSsdCount': obj.localSsdCount,
    'loggingVariant': obj.loggingVariant,
    'machineType': obj.machineType,
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'minCpuPlatform': obj.minCpuPlatform,
    'nodeGroup': obj.nodeGroup,
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'preemptible': obj.preemptible,
    'reservationAffinity': obj.reservationAffinity?.map(y => toJson_ClusterSpecForProviderNodeConfigReservationAffinity(y)),
    'resourceLabels': ((obj.resourceLabels) === undefined) ? undefined : (Object.entries(obj.resourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'serviceAccountRef': toJson_ClusterSpecForProviderNodeConfigServiceAccountRef(obj.serviceAccountRef),
    'serviceAccountSelector': toJson_ClusterSpecForProviderNodeConfigServiceAccountSelector(obj.serviceAccountSelector),
    'shieldedInstanceConfig': obj.shieldedInstanceConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigShieldedInstanceConfig(y)),
    'spot': obj.spot,
    'tags': obj.tags?.map(y => y),
    'taint': obj.taint?.map(y => toJson_ClusterSpecForProviderNodeConfigTaint(y)),
    'workloadMetadataConfig': obj.workloadMetadataConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigWorkloadMetadataConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodePoolDefaults
 */
export interface ClusterSpecForProviderNodePoolDefaults {
  /**
   * Subset of NodeConfig message that has defaults.
   *
   * @schema ClusterSpecForProviderNodePoolDefaults#nodeConfigDefaults
   */
  readonly nodeConfigDefaults?: ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodePoolDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodePoolDefaults(obj: ClusterSpecForProviderNodePoolDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeConfigDefaults': obj.nodeConfigDefaults?.map(y => toJson_ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNotificationConfig
 */
export interface ClusterSpecForProviderNotificationConfig {
  /**
   * The pubsub config for the cluster's upgrade notifications.
   *
   * @schema ClusterSpecForProviderNotificationConfig#pubsub
   */
  readonly pubsub: ClusterSpecForProviderNotificationConfigPubsub[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderNotificationConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNotificationConfig(obj: ClusterSpecForProviderNotificationConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pubsub': obj.pubsub?.map(y => toJson_ClusterSpecForProviderNotificationConfigPubsub(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderPrivateClusterConfig
 */
export interface ClusterSpecForProviderPrivateClusterConfig {
  /**
   * When true, the cluster's private endpoint is used as the cluster endpoint and access through the public endpoint is disabled. When false, either endpoint can be used. This field only applies to private clusters, when enable_private_nodes is true.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfig#enablePrivateEndpoint
   */
  readonly enablePrivateEndpoint?: boolean;

  /**
   * Enables the private cluster feature, creating a private endpoint on the cluster. In a private cluster, nodes only have RFC 1918 private addresses and communicate with the master's private endpoint via private networking.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfig#enablePrivateNodes
   */
  readonly enablePrivateNodes?: boolean;

  /**
   * Controls cluster master global access settings. Structure is documented below.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfig#masterGlobalAccessConfig
   */
  readonly masterGlobalAccessConfig?: ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig[];

  /**
   * The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning private IP addresses to the cluster master(s) and the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network, and it must be a /28 subnet. See Private Cluster Limitations for more details. This field only applies to private clusters, when enable_private_nodes is true.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfig#masterIpv4CidrBlock
   */
  readonly masterIpv4CidrBlock?: string;

  /**
   * Subnetwork in cluster's network where master's endpoint will be provisioned.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfig#privateEndpointSubnetwork
   */
  readonly privateEndpointSubnetwork?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderPrivateClusterConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderPrivateClusterConfig(obj: ClusterSpecForProviderPrivateClusterConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enablePrivateEndpoint': obj.enablePrivateEndpoint,
    'enablePrivateNodes': obj.enablePrivateNodes,
    'masterGlobalAccessConfig': obj.masterGlobalAccessConfig?.map(y => toJson_ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig(y)),
    'masterIpv4CidrBlock': obj.masterIpv4CidrBlock,
    'privateEndpointSubnetwork': obj.privateEndpointSubnetwork,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderReleaseChannel
 */
export interface ClusterSpecForProviderReleaseChannel {
  /**
   * The selected release channel. Accepted values are:
   *
   * @schema ClusterSpecForProviderReleaseChannel#channel
   */
  readonly channel: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderReleaseChannel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderReleaseChannel(obj: ClusterSpecForProviderReleaseChannel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderResourceUsageExportConfig
 */
export interface ClusterSpecForProviderResourceUsageExportConfig {
  /**
   * Parameters for using BigQuery as the destination of resource usage export.
   *
   * @schema ClusterSpecForProviderResourceUsageExportConfig#bigqueryDestination
   */
  readonly bigqueryDestination: ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination[];

  /**
   * Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.
   *
   * @schema ClusterSpecForProviderResourceUsageExportConfig#enableNetworkEgressMetering
   */
  readonly enableNetworkEgressMetering?: boolean;

  /**
   * Whether to enable resource consumption metering on this cluster. When enabled, a table will be created in the resource export BigQuery dataset to store resource consumption data. The resulting table can be joined with the resource usage table or with BigQuery billing export. Defaults to true.
   *
   * @default true.
   * @schema ClusterSpecForProviderResourceUsageExportConfig#enableResourceConsumptionMetering
   */
  readonly enableResourceConsumptionMetering?: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderResourceUsageExportConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderResourceUsageExportConfig(obj: ClusterSpecForProviderResourceUsageExportConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bigqueryDestination': obj.bigqueryDestination?.map(y => toJson_ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination(y)),
    'enableNetworkEgressMetering': obj.enableNetworkEgressMetering,
    'enableResourceConsumptionMetering': obj.enableResourceConsumptionMetering,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderServiceExternalIpsConfig
 */
export interface ClusterSpecForProviderServiceExternalIpsConfig {
  /**
   * Controls whether external ips specified by a service will be allowed. It is enabled by default.
   *
   * @schema ClusterSpecForProviderServiceExternalIpsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderServiceExternalIpsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderServiceExternalIpsConfig(obj: ClusterSpecForProviderServiceExternalIpsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Subnetwork in compute to populate subnetwork.
 *
 * @schema ClusterSpecForProviderSubnetworkRef
 */
export interface ClusterSpecForProviderSubnetworkRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecForProviderSubnetworkRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecForProviderSubnetworkRef#policy
   */
  readonly policy?: ClusterSpecForProviderSubnetworkRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderSubnetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderSubnetworkRef(obj: ClusterSpecForProviderSubnetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecForProviderSubnetworkRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Subnetwork in compute to populate subnetwork.
 *
 * @schema ClusterSpecForProviderSubnetworkSelector
 */
export interface ClusterSpecForProviderSubnetworkSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ClusterSpecForProviderSubnetworkSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ClusterSpecForProviderSubnetworkSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ClusterSpecForProviderSubnetworkSelector#policy
   */
  readonly policy?: ClusterSpecForProviderSubnetworkSelectorPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderSubnetworkSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderSubnetworkSelector(obj: ClusterSpecForProviderSubnetworkSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ClusterSpecForProviderSubnetworkSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderVerticalPodAutoscaling
 */
export interface ClusterSpecForProviderVerticalPodAutoscaling {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderVerticalPodAutoscaling#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderVerticalPodAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderVerticalPodAutoscaling(obj: ClusterSpecForProviderVerticalPodAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderWorkloadIdentityConfig
 */
export interface ClusterSpecForProviderWorkloadIdentityConfig {
  /**
   * The workload pool to attach all Kubernetes service accounts to.
   *
   * @schema ClusterSpecForProviderWorkloadIdentityConfig#workloadPool
   */
  readonly workloadPool?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderWorkloadIdentityConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderWorkloadIdentityConfig(obj: ClusterSpecForProviderWorkloadIdentityConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'workloadPool': obj.workloadPool,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecProviderConfigRefPolicy
 */
export interface ClusterSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderConfigRefPolicy(obj: ClusterSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecProviderRefPolicy
 */
export interface ClusterSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecProviderRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecProviderRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderRefPolicy(obj: ClusterSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRef
 */
export interface ClusterSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ClusterSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToConfigRef(obj: ClusterSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ClusterSpecPublishConnectionDetailsToMetadata
 */
export interface ClusterSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToMetadata(obj: ClusterSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigCloudrunConfig
 */
export interface ClusterSpecForProviderAddonsConfigCloudrunConfig {
  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfigCloudrunConfig#disabled
   */
  readonly disabled: boolean;

  /**
   * The load balancer type of CloudRun ingress service. It is external load balancer by default. Set load_balancer_type=LOAD_BALANCER_TYPE_INTERNAL to configure it as internal load balancer.
   *
   * @schema ClusterSpecForProviderAddonsConfigCloudrunConfig#loadBalancerType
   */
  readonly loadBalancerType?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigCloudrunConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigCloudrunConfig(obj: ClusterSpecForProviderAddonsConfigCloudrunConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
    'loadBalancerType': obj.loadBalancerType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigConfigConnectorConfig
 */
export interface ClusterSpecForProviderAddonsConfigConfigConnectorConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderAddonsConfigConfigConnectorConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigConfigConnectorConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigConfigConnectorConfig(obj: ClusterSpecForProviderAddonsConfigConfigConnectorConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigDnsCacheConfig
 */
export interface ClusterSpecForProviderAddonsConfigDnsCacheConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderAddonsConfigDnsCacheConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigDnsCacheConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigDnsCacheConfig(obj: ClusterSpecForProviderAddonsConfigDnsCacheConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig
 */
export interface ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig(obj: ClusterSpecForProviderAddonsConfigGcePersistentDiskCsiDriverConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig
 */
export interface ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig(obj: ClusterSpecForProviderAddonsConfigGcpFilestoreCsiDriverConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig
 */
export interface ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig(obj: ClusterSpecForProviderAddonsConfigGkeBackupAgentConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling
 */
export interface ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling {
  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling(obj: ClusterSpecForProviderAddonsConfigHorizontalPodAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigHttpLoadBalancing
 */
export interface ClusterSpecForProviderAddonsConfigHttpLoadBalancing {
  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfigHttpLoadBalancing#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigHttpLoadBalancing' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigHttpLoadBalancing(obj: ClusterSpecForProviderAddonsConfigHttpLoadBalancing | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAddonsConfigNetworkPolicyConfig
 */
export interface ClusterSpecForProviderAddonsConfigNetworkPolicyConfig {
  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ClusterSpecForProviderAddonsConfigNetworkPolicyConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAddonsConfigNetworkPolicyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAddonsConfigNetworkPolicyConfig(obj: ClusterSpecForProviderAddonsConfigNetworkPolicyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults {
  /**
   * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#bootDiskKmsKey
   */
  readonly bootDiskKmsKey?: string;

  /**
   * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. Defaults to 100
   *
   * @default 100
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#diskSize
   */
  readonly diskSize?: number;

  /**
   * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-balanced' or 'pd-ssd'). If unspecified, the default disk type is 'pd-standard'
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#diskType
   */
  readonly diskType?: string;

  /**
   * The image type to use for this node. Note that changing the image type will delete and recreate all nodes in the node pool.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#imageType
   */
  readonly imageType?: string;

  /**
   * NodeManagement configuration for this NodePool. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#management
   */
  readonly management?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement[];

  /**
   * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell. See the official documentation for more information.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * The set of Google API scopes to be made available on all of the node VMs under the "default" service account. Use the "https://www.googleapis.com/auth/cloud-platform" scope to grant access to all APIs. It is recommended that you set service_account to a non-default service account and grant IAM roles to that service account for only the resources that it needs.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * The service account to be used by the Node VMs. If not specified, the "default" service account is used.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * Shielded Instance options. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig[];

  /**
   * Specifies the upgrade settings for NAP created node pools. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults#upgradeSettings
   */
  readonly upgradeSettings?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bootDiskKmsKey': obj.bootDiskKmsKey,
    'diskSize': obj.diskSize,
    'diskType': obj.diskType,
    'imageType': obj.imageType,
    'management': obj.management?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement(y)),
    'minCpuPlatform': obj.minCpuPlatform,
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'serviceAccount': obj.serviceAccount,
    'shieldedInstanceConfig': obj.shieldedInstanceConfig?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig(y)),
    'upgradeSettings': obj.upgradeSettings?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscalingResourceLimits
 */
export interface ClusterSpecForProviderClusterAutoscalingResourceLimits {
  /**
   * Maximum amount of the resource in the cluster.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingResourceLimits#maximum
   */
  readonly maximum?: number;

  /**
   * Minimum amount of the resource in the cluster.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingResourceLimits#minimum
   */
  readonly minimum?: number;

  /**
   * The type of the resource. For example, cpu and memory.  See the guide to using Node Auto-Provisioning for a list of types.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingResourceLimits#resourceType
   */
  readonly resourceType: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingResourceLimits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingResourceLimits(obj: ClusterSpecForProviderClusterAutoscalingResourceLimits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maximum': obj.maximum,
    'minimum': obj.minimum,
    'resourceType': obj.resourceType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig
 */
export interface ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig {
  /**
   * The status of the Istio addon, which makes it easy to set up Istio for services in a cluster. It is disabled by default. Set disabled = false to enable.
   *
   * @schema ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig(obj: ClusterSpecForProviderIpAllocationPolicyPodCidrOverprovisionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow
 */
export interface ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow {
  /**
   * @schema ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow(obj: ClusterSpecForProviderMaintenancePolicyDailyMaintenanceWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion
 */
export interface ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion {
  /**
   * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion#endTime
   */
  readonly endTime: string;

  /**
   * The name of the cluster, unique within the project and location.
   *
   * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion#exclusionName
   */
  readonly exclusionName: string;

  /**
   * MaintenanceExclusionOptions provides maintenance exclusion related options.
   *
   * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion#exclusionOptions
   */
  readonly exclusionOptions?: ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions[];

  /**
   * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion(obj: ClusterSpecForProviderMaintenancePolicyMaintenanceExclusion | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'exclusionName': obj.exclusionName,
    'exclusionOptions': obj.exclusionOptions?.map(y => toJson_ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions(y)),
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMaintenancePolicyRecurringWindow
 */
export interface ClusterSpecForProviderMaintenancePolicyRecurringWindow {
  /**
   * @schema ClusterSpecForProviderMaintenancePolicyRecurringWindow#endTime
   */
  readonly endTime: string;

  /**
   * @schema ClusterSpecForProviderMaintenancePolicyRecurringWindow#recurrence
   */
  readonly recurrence: string;

  /**
   * @schema ClusterSpecForProviderMaintenancePolicyRecurringWindow#startTime
   */
  readonly startTime: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMaintenancePolicyRecurringWindow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMaintenancePolicyRecurringWindow(obj: ClusterSpecForProviderMaintenancePolicyRecurringWindow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endTime': obj.endTime,
    'recurrence': obj.recurrence,
    'startTime': obj.startTime,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMasterAuthClientCertificateConfig
 */
export interface ClusterSpecForProviderMasterAuthClientCertificateConfig {
  /**
   * @schema ClusterSpecForProviderMasterAuthClientCertificateConfig#issueClientCertificate
   */
  readonly issueClientCertificate: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMasterAuthClientCertificateConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMasterAuthClientCertificateConfig(obj: ClusterSpecForProviderMasterAuthClientCertificateConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'issueClientCertificate': obj.issueClientCertificate,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks
 */
export interface ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks {
  /**
   * External network that can access Kubernetes master through HTTPS. Must be specified in CIDR notation.
   *
   * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks#cidrBlock
   */
  readonly cidrBlock: string;

  /**
   * Field for users to identify CIDR blocks.
   *
   * @schema ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks#displayName
   */
  readonly displayName?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks(obj: ClusterSpecForProviderMasterAuthorizedNetworksConfigCidrBlocks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cidrBlock': obj.cidrBlock,
    'displayName': obj.displayName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMonitoringConfigManagedPrometheus
 */
export interface ClusterSpecForProviderMonitoringConfigManagedPrometheus {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderMonitoringConfigManagedPrometheus#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMonitoringConfigManagedPrometheus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMonitoringConfigManagedPrometheus(obj: ClusterSpecForProviderMonitoringConfigManagedPrometheus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecForProviderNetworkRefPolicy
 */
export interface ClusterSpecForProviderNetworkRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderNetworkRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderNetworkRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderNetworkRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderNetworkRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworkRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworkRefPolicy(obj: ClusterSpecForProviderNetworkRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ClusterSpecForProviderNetworkSelectorPolicy
 */
export interface ClusterSpecForProviderNetworkSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderNetworkSelectorPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderNetworkSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderNetworkSelectorPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderNetworkSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworkSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworkSelectorPolicy(obj: ClusterSpecForProviderNetworkSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigAdvancedMachineFeatures
 */
export interface ClusterSpecForProviderNodeConfigAdvancedMachineFeatures {
  /**
   * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
   *
   * @schema ClusterSpecForProviderNodeConfigAdvancedMachineFeatures#threadsPerCore
   */
  readonly threadsPerCore: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigAdvancedMachineFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigAdvancedMachineFeatures(obj: ClusterSpecForProviderNodeConfigAdvancedMachineFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'threadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig
 */
export interface ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig {
  /**
   * The amount of local SSD disks that will be attached to each cluster node. Defaults to 0.
   *
   * @default 0.
   * @schema ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig(obj: ClusterSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigGcfsConfig
 */
export interface ClusterSpecForProviderNodeConfigGcfsConfig {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderNodeConfigGcfsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigGcfsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigGcfsConfig(obj: ClusterSpecForProviderNodeConfigGcfsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigGuestAccelerator
 */
export interface ClusterSpecForProviderNodeConfigGuestAccelerator {
  /**
   * The number of the guest accelerator cards exposed to this instance.
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAccelerator#count
   */
  readonly count?: number;

  /**
   * Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide.
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAccelerator#gpuPartitionSize
   */
  readonly gpuPartitionSize?: string;

  /**
   * Configuration for GPU sharing. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAccelerator#gpuSharingConfig
   */
  readonly gpuSharingConfig?: ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig[];

  /**
   * The accelerator type resource to expose to this instance. E.g. nvidia-tesla-k80.
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAccelerator#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigGuestAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigGuestAccelerator(obj: ClusterSpecForProviderNodeConfigGuestAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count,
    'gpuPartitionSize': obj.gpuPartitionSize,
    'gpuSharingConfig': obj.gpuSharingConfig?.map(y => toJson_ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigGvnic
 */
export interface ClusterSpecForProviderNodeConfigGvnic {
  /**
   * Enables vertical pod autoscaling
   *
   * @schema ClusterSpecForProviderNodeConfigGvnic#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigGvnic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigGvnic(obj: ClusterSpecForProviderNodeConfigGvnic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigKubeletConfig
 */
export interface ClusterSpecForProviderNodeConfigKubeletConfig {
  /**
   * If true, enables CPU CFS quota enforcement for containers that specify CPU limits.
   *
   * @schema ClusterSpecForProviderNodeConfigKubeletConfig#cpuCfsQuota
   */
  readonly cpuCfsQuota?: boolean;

  /**
   * The CPU CFS quota period value. Specified as a sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". The value must be a positive duration.
   *
   * @schema ClusterSpecForProviderNodeConfigKubeletConfig#cpuCfsQuotaPeriod
   */
  readonly cpuCfsQuotaPeriod?: string;

  /**
   * The CPU management policy on the node. See K8S CPU Management Policies. One of "none" or "static". Defaults to none when kubelet_config is unset.
   *
   * @default none when kubelet_config is unset.
   * @schema ClusterSpecForProviderNodeConfigKubeletConfig#cpuManagerPolicy
   */
  readonly cpuManagerPolicy: string;

  /**
   * Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.
   *
   * @schema ClusterSpecForProviderNodeConfigKubeletConfig#podPidsLimit
   */
  readonly podPidsLimit?: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigKubeletConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigKubeletConfig(obj: ClusterSpecForProviderNodeConfigKubeletConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cpuCfsQuota': obj.cpuCfsQuota,
    'cpuCfsQuotaPeriod': obj.cpuCfsQuotaPeriod,
    'cpuManagerPolicy': obj.cpuManagerPolicy,
    'podPidsLimit': obj.podPidsLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigLinuxNodeConfig
 */
export interface ClusterSpecForProviderNodeConfigLinuxNodeConfig {
  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. Specified as a map from the key, such as net.core.wmem_max, to a string value.
   *
   * @schema ClusterSpecForProviderNodeConfigLinuxNodeConfig#sysctls
   */
  readonly sysctls: { [key: string]: string };

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigLinuxNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigLinuxNodeConfig(obj: ClusterSpecForProviderNodeConfigLinuxNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sysctls': ((obj.sysctls) === undefined) ? undefined : (Object.entries(obj.sysctls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig
 */
export interface ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig {
  /**
   * The amount of local SSD disks that will be attached to each cluster node. Defaults to 0.
   *
   * @default 0.
   * @schema ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig(obj: ClusterSpecForProviderNodeConfigLocalNvmeSsdBlockConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigReservationAffinity
 */
export interface ClusterSpecForProviderNodeConfigReservationAffinity {
  /**
   * The type of reservation consumption Accepted values are:
   *
   * @schema ClusterSpecForProviderNodeConfigReservationAffinity#consumeReservationType
   */
  readonly consumeReservationType: string;

  /**
   * Key for taint.
   *
   * @schema ClusterSpecForProviderNodeConfigReservationAffinity#key
   */
  readonly key?: string;

  /**
   * name"
   *
   * @schema ClusterSpecForProviderNodeConfigReservationAffinity#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigReservationAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigReservationAffinity(obj: ClusterSpecForProviderNodeConfigReservationAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consumeReservationType': obj.consumeReservationType,
    'key': obj.key,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountRef
 */
export interface ClusterSpecForProviderNodeConfigServiceAccountRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountRef#policy
   */
  readonly policy?: ClusterSpecForProviderNodeConfigServiceAccountRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigServiceAccountRef(obj: ClusterSpecForProviderNodeConfigServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecForProviderNodeConfigServiceAccountRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountSelector
 */
export interface ClusterSpecForProviderNodeConfigServiceAccountSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountSelector#policy
   */
  readonly policy?: ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigServiceAccountSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigServiceAccountSelector(obj: ClusterSpecForProviderNodeConfigServiceAccountSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigShieldedInstanceConfig
 */
export interface ClusterSpecForProviderNodeConfigShieldedInstanceConfig {
  /**
   * Defines if the instance has integrity monitoring enabled.
   *
   * @schema ClusterSpecForProviderNodeConfigShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * Defines if the instance has Secure Boot enabled.
   *
   * @schema ClusterSpecForProviderNodeConfigShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigShieldedInstanceConfig(obj: ClusterSpecForProviderNodeConfigShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigTaint
 */
export interface ClusterSpecForProviderNodeConfigTaint {
  /**
   * Effect for taint. Accepted values are NO_SCHEDULE, PREFER_NO_SCHEDULE, and NO_EXECUTE.
   *
   * @schema ClusterSpecForProviderNodeConfigTaint#effect
   */
  readonly effect?: string;

  /**
   * Key for taint.
   *
   * @schema ClusterSpecForProviderNodeConfigTaint#key
   */
  readonly key?: string;

  /**
   * Value for taint.
   *
   * @schema ClusterSpecForProviderNodeConfigTaint#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigTaint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigTaint(obj: ClusterSpecForProviderNodeConfigTaint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodeConfigWorkloadMetadataConfig
 */
export interface ClusterSpecForProviderNodeConfigWorkloadMetadataConfig {
  /**
   * How to expose the node metadata to the workload running on the node. Accepted values are:
   *
   * @schema ClusterSpecForProviderNodeConfigWorkloadMetadataConfig#mode
   */
  readonly mode: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigWorkloadMetadataConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigWorkloadMetadataConfig(obj: ClusterSpecForProviderNodeConfigWorkloadMetadataConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults
 */
export interface ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults {
  /**
   * The type of logging agent that is deployed by default for newly created node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT. See Increasing logging agent throughput for more information.
   *
   * @schema ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults#loggingVariant
   */
  readonly loggingVariant?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults(obj: ClusterSpecForProviderNodePoolDefaultsNodeConfigDefaults | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'loggingVariant': obj.loggingVariant,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNotificationConfigPubsub
 */
export interface ClusterSpecForProviderNotificationConfigPubsub {
  /**
   * Whether or not the notification config is enabled
   *
   * @schema ClusterSpecForProviderNotificationConfigPubsub#enabled
   */
  readonly enabled: boolean;

  /**
   * Choose what type of notifications you want to receive. If no filters are applied, you'll receive all notification types. Structure is documented below.
   *
   * @schema ClusterSpecForProviderNotificationConfigPubsub#filter
   */
  readonly filter?: ClusterSpecForProviderNotificationConfigPubsubFilter[];

  /**
   * The pubsub topic to push upgrade notifications to. Must be in the same project as the cluster. Must be in the format: projects/{project}/topics/{topic}.
   *
   * @schema ClusterSpecForProviderNotificationConfigPubsub#topic
   */
  readonly topic?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNotificationConfigPubsub' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNotificationConfigPubsub(obj: ClusterSpecForProviderNotificationConfigPubsub | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
    'filter': obj.filter?.map(y => toJson_ClusterSpecForProviderNotificationConfigPubsubFilter(y)),
    'topic': obj.topic,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig
 */
export interface ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig {
  /**
   * Whether the cluster master is accessible globally or not.
   *
   * @schema ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig(obj: ClusterSpecForProviderPrivateClusterConfigMasterGlobalAccessConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination
 */
export interface ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination {
  /**
   * The ID of a BigQuery Dataset. For Example:
   *
   * @schema ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination#datasetId
   */
  readonly datasetId: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination(obj: ClusterSpecForProviderResourceUsageExportConfigBigqueryDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetId': obj.datasetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecForProviderSubnetworkRefPolicy
 */
export interface ClusterSpecForProviderSubnetworkRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderSubnetworkRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderSubnetworkRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderSubnetworkRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderSubnetworkRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderSubnetworkRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderSubnetworkRefPolicy(obj: ClusterSpecForProviderSubnetworkRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ClusterSpecForProviderSubnetworkSelectorPolicy
 */
export interface ClusterSpecForProviderSubnetworkSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderSubnetworkSelectorPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderSubnetworkSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderSubnetworkSelectorPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderSubnetworkSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderSubnetworkSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderSubnetworkSelectorPolicy(obj: ClusterSpecForProviderSubnetworkSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecProviderConfigRefPolicyResolution
 */
export enum ClusterSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecProviderConfigRefPolicyResolve
 */
export enum ClusterSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecProviderRefPolicyResolution
 */
export enum ClusterSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecProviderRefPolicyResolve
 */
export enum ClusterSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ClusterSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj: ClusterSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement {
  /**
   * Specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement#autoRepair
   */
  readonly autoRepair?: boolean;

  /**
   * Specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement#autoUpgrade
   */
  readonly autoUpgrade?: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsManagement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoRepair': obj.autoRepair,
    'autoUpgrade': obj.autoUpgrade,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig {
  /**
   * Defines if the instance has integrity monitoring enabled.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * Defines if the instance has Secure Boot enabled.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings {
  /**
   * Settings for blue-green upgrade strategy. To be specified when strategy is set to BLUE_GREEN. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#blueGreenSettings
   */
  readonly blueGreenSettings?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings[];

  /**
   * The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process. To be used when strategy is set to SURGE. Default is 0.
   *
   * @default 0.
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#maxSurge
   */
  readonly maxSurge?: number;

  /**
   * The maximum number of nodes that can be simultaneously unavailable during the upgrade process. To be used when strategy is set to SURGE. Default is 0.
   *
   * @default 0.
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#maxUnavailable
   */
  readonly maxUnavailable?: number;

  /**
   * Strategy used for node pool update. Strategy can only be one of BLUE_GREEN or SURGE. The default is value is SURGE.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings#strategy
   */
  readonly strategy?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blueGreenSettings': obj.blueGreenSettings?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings(y)),
    'maxSurge': obj.maxSurge,
    'maxUnavailable': obj.maxUnavailable,
    'strategy': obj.strategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions
 */
export interface ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions {
  /**
   * The scope of automatic upgrades to restrict in the exclusion window. One of: NO_UPGRADES | NO_MINOR_UPGRADES | NO_MINOR_OR_NODE_UPGRADES
   *
   * @schema ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions#scope
   */
  readonly scope: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions(obj: ClusterSpecForProviderMaintenancePolicyMaintenanceExclusionExclusionOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'scope': obj.scope,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderNetworkRefPolicyResolution
 */
export enum ClusterSpecForProviderNetworkRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderNetworkRefPolicyResolve
 */
export enum ClusterSpecForProviderNetworkRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderNetworkSelectorPolicyResolution
 */
export enum ClusterSpecForProviderNetworkSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderNetworkSelectorPolicyResolve
 */
export enum ClusterSpecForProviderNetworkSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig
 */
export interface ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig {
  /**
   * The type of GPU sharing strategy to enable on the GPU node. Accepted values are:
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig#gpuSharingStrategy
   */
  readonly gpuSharingStrategy?: string;

  /**
   * The maximum number of containers that can share a GPU.
   *
   * @schema ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig#maxSharedClientsPerGpu
   */
  readonly maxSharedClientsPerGpu?: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig(obj: ClusterSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuSharingStrategy': obj.gpuSharingStrategy,
    'maxSharedClientsPerGpu': obj.maxSharedClientsPerGpu,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountRefPolicy
 */
export interface ClusterSpecForProviderNodeConfigServiceAccountRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigServiceAccountRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigServiceAccountRefPolicy(obj: ClusterSpecForProviderNodeConfigServiceAccountRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy
 */
export interface ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy#resolution
   */
  readonly resolution?: ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy#resolve
   */
  readonly resolve?: ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy(obj: ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNotificationConfigPubsubFilter
 */
export interface ClusterSpecForProviderNotificationConfigPubsubFilter {
  /**
   * Can be used to filter what notifications are sent. Accepted values are UPGRADE_AVAILABLE_EVENT, UPGRADE_EVENT and SECURITY_BULLETIN_EVENT. See Filtering notifications for more details.
   *
   * @schema ClusterSpecForProviderNotificationConfigPubsubFilter#eventType
   */
  readonly eventType: string[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderNotificationConfigPubsubFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNotificationConfigPubsubFilter(obj: ClusterSpecForProviderNotificationConfigPubsubFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'eventType': obj.eventType?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderSubnetworkRefPolicyResolution
 */
export enum ClusterSpecForProviderSubnetworkRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderSubnetworkRefPolicyResolve
 */
export enum ClusterSpecForProviderSubnetworkRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderSubnetworkSelectorPolicyResolution
 */
export enum ClusterSpecForProviderSubnetworkSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderSubnetworkSelectorPolicyResolve
 */
export enum ClusterSpecForProviderSubnetworkSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings {
  /**
   * Time needed after draining entire blue pool. After this period, blue pool will be cleaned up. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings#nodePoolSoakDuration
   */
  readonly nodePoolSoakDuration?: string;

  /**
   * green upgrade. To be specified when strategy is set to BLUE_GREEN. Structure is documented below.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings#standardRolloutPolicy
   */
  readonly standardRolloutPolicy?: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodePoolSoakDuration': obj.nodePoolSoakDuration,
    'standardRolloutPolicy': obj.standardRolloutPolicy?.map(y => toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolution
 */
export enum ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolve
 */
export enum ClusterSpecForProviderNodeConfigServiceAccountRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution
 */
export enum ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve
 */
export enum ClusterSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy
 */
export interface ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy {
  /**
   * Number of blue nodes to drain in a batch. Only one of the batch_percentage or batch_node_count can be specified.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchNodeCount
   */
  readonly batchNodeCount?: number;

  /**
   * :  Percentage of the bool pool nodes to drain in a batch. The range of this field should be (0.0, 1.0). Only one of the batch_percentage or batch_node_count can be specified.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchPercentage
   */
  readonly batchPercentage?: number;

  /**
   * Soak time after each batch gets drained. A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".`.
   *
   * @schema ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchSoakDuration
   */
  readonly batchSoakDuration?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj: ClusterSpecForProviderClusterAutoscalingAutoProvisioningDefaultsUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchNodeCount': obj.batchNodeCount,
    'batchPercentage': obj.batchPercentage,
    'batchSoakDuration': obj.batchSoakDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * NodePool is the Schema for the NodePools API. Manages a GKE NodePool resource.
 *
 * @schema NodePool
 */
export class NodePool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "NodePool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'container.gcp.upbound.io/v1beta1',
    kind: 'NodePool',
  }

  /**
   * Renders a Kubernetes manifest for "NodePool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: NodePoolProps): any {
    return {
      ...NodePool.GVK,
      ...toJson_NodePoolProps(props),
    };
  }

  /**
   * Defines a "NodePool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NodePoolProps) {
    super(scope, id, {
      ...NodePool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...NodePool.GVK,
      ...toJson_NodePoolProps(resolved),
    };
  }
}

/**
 * NodePool is the Schema for the NodePools API. Manages a GKE NodePool resource.
 *
 * @schema NodePool
 */
export interface NodePoolProps {
  /**
   * @schema NodePool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * NodePoolSpec defines the desired state of NodePool
   *
   * @schema NodePool#spec
   */
  readonly spec: NodePoolSpec;

}

/**
 * Converts an object of type 'NodePoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolProps(obj: NodePoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_NodePoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodePoolSpec defines the desired state of NodePool
 *
 * @schema NodePoolSpec
 */
export interface NodePoolSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema NodePoolSpec#deletionPolicy
   */
  readonly deletionPolicy?: NodePoolSpecDeletionPolicy;

  /**
   * @schema NodePoolSpec#forProvider
   */
  readonly forProvider: NodePoolSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema NodePoolSpec#managementPolicy
   */
  readonly managementPolicy?: NodePoolSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NodePoolSpec#providerConfigRef
   */
  readonly providerConfigRef?: NodePoolSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema NodePoolSpec#providerRef
   */
  readonly providerRef?: NodePoolSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NodePoolSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: NodePoolSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema NodePoolSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NodePoolSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'NodePoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpec(obj: NodePoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_NodePoolSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_NodePoolSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_NodePoolSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_NodePoolSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_NodePoolSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema NodePoolSpecDeletionPolicy
 */
export enum NodePoolSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema NodePoolSpecForProvider
 */
export interface NodePoolSpecForProvider {
  /**
   * Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. Structure is documented below.
   *
   * @schema NodePoolSpecForProvider#autoscaling
   */
  readonly autoscaling?: NodePoolSpecForProviderAutoscaling[];

  /**
   * The cluster to create the node pool for. Cluster must be present in location provided for clusters. May be specified in the format projects/{{project}}/locations/{{location}}/clusters/{{cluster}} or as just the name of the cluster.
   *
   * @schema NodePoolSpecForProvider#cluster
   */
  readonly cluster?: string;

  /**
   * Reference to a Cluster to populate cluster.
   *
   * @schema NodePoolSpecForProvider#clusterRef
   */
  readonly clusterRef?: NodePoolSpecForProviderClusterRef;

  /**
   * Selector for a Cluster to populate cluster.
   *
   * @schema NodePoolSpecForProvider#clusterSelector
   */
  readonly clusterSelector?: NodePoolSpecForProviderClusterSelector;

  /**
   * The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource.  If you don't need this value, don't set it.  If you do need it, you can use a lifecycle block to ignore subsequent changes to this field.
   *
   * @schema NodePoolSpecForProvider#initialNodeCount
   */
  readonly initialNodeCount?: number;

  /**
   * The location (region or zone) of the cluster.
   *
   * @schema NodePoolSpecForProvider#location
   */
  readonly location?: string;

  /**
   * Node management configuration, wherein auto-repair and auto-upgrade is configured. Structure is documented below.
   *
   * @schema NodePoolSpecForProvider#management
   */
  readonly management?: NodePoolSpecForProviderManagement[];

  /**
   * The maximum number of pods per node in this node pool. Note that this does not work on node pools which are "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled. See the official documentation for more information.
   *
   * @schema NodePoolSpecForProvider#maxPodsPerNode
   */
  readonly maxPodsPerNode?: number;

  /**
   * The network configuration of the pool. Such as configuration for Adding Pod IP address ranges) to the node pool. Or enabling private nodes. Structure is documented below
   *
   * @schema NodePoolSpecForProvider#networkConfig
   */
  readonly networkConfig?: NodePoolSpecForProviderNetworkConfig[];

  /**
   * Parameters used in creating the node pool. See google_container_cluster for schema.
   *
   * @schema NodePoolSpecForProvider#nodeConfig
   */
  readonly nodeConfig?: NodePoolSpecForProviderNodeConfig[];

  /**
   * The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.
   *
   * @schema NodePoolSpecForProvider#nodeCount
   */
  readonly nodeCount?: number;

  /**
   * The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used.
   *
   * @schema NodePoolSpecForProvider#nodeLocations
   */
  readonly nodeLocations?: string[];

  /**
   * Specifies a custom placement policy for the nodes.
   *
   * @schema NodePoolSpecForProvider#placementPolicy
   */
  readonly placementPolicy?: NodePoolSpecForProviderPlacementPolicy[];

  /**
   * The ID of the project in which to create the node pool. If blank, the provider-configured project will be used.
   *
   * @schema NodePoolSpecForProvider#project
   */
  readonly project?: string;

  /**
   * Specify node upgrade settings to change how GKE upgrades nodes. The maximum number of nodes upgraded simultaneously is limited to 20. Structure is documented below.
   *
   * @schema NodePoolSpecForProvider#upgradeSettings
   */
  readonly upgradeSettings?: NodePoolSpecForProviderUpgradeSettings[];

  /**
   * The Kubernetes version for the nodes in this pool. Note that if this field and auto_upgrade are both specified, they will fight each other for what the node version should be, so setting both is highly discouraged.
   *
   * @schema NodePoolSpecForProvider#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProvider(obj: NodePoolSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoscaling': obj.autoscaling?.map(y => toJson_NodePoolSpecForProviderAutoscaling(y)),
    'cluster': obj.cluster,
    'clusterRef': toJson_NodePoolSpecForProviderClusterRef(obj.clusterRef),
    'clusterSelector': toJson_NodePoolSpecForProviderClusterSelector(obj.clusterSelector),
    'initialNodeCount': obj.initialNodeCount,
    'location': obj.location,
    'management': obj.management?.map(y => toJson_NodePoolSpecForProviderManagement(y)),
    'maxPodsPerNode': obj.maxPodsPerNode,
    'networkConfig': obj.networkConfig?.map(y => toJson_NodePoolSpecForProviderNetworkConfig(y)),
    'nodeConfig': obj.nodeConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfig(y)),
    'nodeCount': obj.nodeCount,
    'nodeLocations': obj.nodeLocations?.map(y => y),
    'placementPolicy': obj.placementPolicy?.map(y => toJson_NodePoolSpecForProviderPlacementPolicy(y)),
    'project': obj.project,
    'upgradeSettings': obj.upgradeSettings?.map(y => toJson_NodePoolSpecForProviderUpgradeSettings(y)),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema NodePoolSpecManagementPolicy
 */
export enum NodePoolSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NodePoolSpecProviderConfigRef
 */
export interface NodePoolSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecProviderConfigRef#policy
   */
  readonly policy?: NodePoolSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderConfigRef(obj: NodePoolSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema NodePoolSpecProviderRef
 */
export interface NodePoolSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecProviderRef#policy
   */
  readonly policy?: NodePoolSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderRef(obj: NodePoolSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NodePoolSpecPublishConnectionDetailsTo
 */
export interface NodePoolSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: NodePoolSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: NodePoolSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsTo(obj: NodePoolSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_NodePoolSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_NodePoolSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema NodePoolSpecWriteConnectionSecretToRef
 */
export interface NodePoolSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NodePoolSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NodePoolSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'NodePoolSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecWriteConnectionSecretToRef(obj: NodePoolSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderAutoscaling
 */
export interface NodePoolSpecForProviderAutoscaling {
  /**
   * Location policy specifies the algorithm used when scaling-up the node pool. Location policy is supported only in 1.24.1+ clusters.
   *
   * @schema NodePoolSpecForProviderAutoscaling#locationPolicy
   */
  readonly locationPolicy?: string;

  /**
   * Maximum number of nodes per zone in the NodePool. Must be >= min_node_count. Cannot be used with total limits.
   *
   * @schema NodePoolSpecForProviderAutoscaling#maxNodeCount
   */
  readonly maxNodeCount?: number;

  /**
   * Minimum number of nodes per zone in the NodePool. Must be >=0 and <= max_node_count. Cannot be used with total limits.
   *
   * @schema NodePoolSpecForProviderAutoscaling#minNodeCount
   */
  readonly minNodeCount?: number;

  /**
   * Total maximum number of nodes in the NodePool. Must be >= total_min_node_count. Cannot be used with per zone limits. Total size limits are supported only in 1.24.1+ clusters.
   *
   * @schema NodePoolSpecForProviderAutoscaling#totalMaxNodeCount
   */
  readonly totalMaxNodeCount?: number;

  /**
   * Total minimum number of nodes in the NodePool. Must be >=0 and <= total_max_node_count. Cannot be used with per zone limits. Total size limits are supported only in 1.24.1+ clusters.
   *
   * @schema NodePoolSpecForProviderAutoscaling#totalMinNodeCount
   */
  readonly totalMinNodeCount?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderAutoscaling(obj: NodePoolSpecForProviderAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'locationPolicy': obj.locationPolicy,
    'maxNodeCount': obj.maxNodeCount,
    'minNodeCount': obj.minNodeCount,
    'totalMaxNodeCount': obj.totalMaxNodeCount,
    'totalMinNodeCount': obj.totalMinNodeCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Cluster to populate cluster.
 *
 * @schema NodePoolSpecForProviderClusterRef
 */
export interface NodePoolSpecForProviderClusterRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecForProviderClusterRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecForProviderClusterRef#policy
   */
  readonly policy?: NodePoolSpecForProviderClusterRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterRef(obj: NodePoolSpecForProviderClusterRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecForProviderClusterRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Cluster to populate cluster.
 *
 * @schema NodePoolSpecForProviderClusterSelector
 */
export interface NodePoolSpecForProviderClusterSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NodePoolSpecForProviderClusterSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NodePoolSpecForProviderClusterSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema NodePoolSpecForProviderClusterSelector#policy
   */
  readonly policy?: NodePoolSpecForProviderClusterSelectorPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterSelector(obj: NodePoolSpecForProviderClusterSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_NodePoolSpecForProviderClusterSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderManagement
 */
export interface NodePoolSpecForProviderManagement {
  /**
   * Whether the nodes will be automatically repaired.
   *
   * @schema NodePoolSpecForProviderManagement#autoRepair
   */
  readonly autoRepair?: boolean;

  /**
   * Whether the nodes will be automatically upgraded.
   *
   * @schema NodePoolSpecForProviderManagement#autoUpgrade
   */
  readonly autoUpgrade?: boolean;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderManagement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderManagement(obj: NodePoolSpecForProviderManagement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'autoRepair': obj.autoRepair,
    'autoUpgrade': obj.autoUpgrade,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNetworkConfig
 */
export interface NodePoolSpecForProviderNetworkConfig {
  /**
   * Whether to create a new range for pod IPs in this node pool. Defaults are provided for pod_range and pod_ipv4_cidr_block if they are not specified.
   *
   * @schema NodePoolSpecForProviderNetworkConfig#createPodRange
   */
  readonly createPodRange?: boolean;

  /**
   * Whether nodes have internal IP addresses only.
   *
   * @schema NodePoolSpecForProviderNetworkConfig#enablePrivateNodes
   */
  readonly enablePrivateNodes?: boolean;

  /**
   * @schema NodePoolSpecForProviderNetworkConfig#podCidrOverprovisionConfig
   */
  readonly podCidrOverprovisionConfig?: NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig[];

  /**
   * The IP address range for pod IPs in this node pool. Only applicable if createPodRange is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.
   *
   * @schema NodePoolSpecForProviderNetworkConfig#podIpv4CidrBlock
   */
  readonly podIpv4CidrBlock?: string;

  /**
   * The ID of the secondary range for pod IPs. If create_pod_range is true, this ID is used for the new range. If create_pod_range is false, uses an existing secondary range with this ID.
   *
   * @schema NodePoolSpecForProviderNetworkConfig#podRange
   */
  readonly podRange?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNetworkConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNetworkConfig(obj: NodePoolSpecForProviderNetworkConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'createPodRange': obj.createPodRange,
    'enablePrivateNodes': obj.enablePrivateNodes,
    'podCidrOverprovisionConfig': obj.podCidrOverprovisionConfig?.map(y => toJson_NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig(y)),
    'podIpv4CidrBlock': obj.podIpv4CidrBlock,
    'podRange': obj.podRange,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfig
 */
export interface NodePoolSpecForProviderNodeConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfig#advancedMachineFeatures
   */
  readonly advancedMachineFeatures?: NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#bootDiskKmsKey
   */
  readonly bootDiskKmsKey?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#diskSizeGb
   */
  readonly diskSizeGb?: number;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#diskType
   */
  readonly diskType?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#ephemeralStorageLocalSsdConfig
   */
  readonly ephemeralStorageLocalSsdConfig?: NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#gcfsConfig
   */
  readonly gcfsConfig?: NodePoolSpecForProviderNodeConfigGcfsConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#guestAccelerator
   */
  readonly guestAccelerator?: NodePoolSpecForProviderNodeConfigGuestAccelerator[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#gvnic
   */
  readonly gvnic?: NodePoolSpecForProviderNodeConfigGvnic[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#imageType
   */
  readonly imageType?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#kubeletConfig
   */
  readonly kubeletConfig?: NodePoolSpecForProviderNodeConfigKubeletConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Parameters used in creating the node pool. See google_container_cluster for schema.
   *
   * @schema NodePoolSpecForProviderNodeConfig#linuxNodeConfig
   */
  readonly linuxNodeConfig?: NodePoolSpecForProviderNodeConfigLinuxNodeConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#localNvmeSsdBlockConfig
   */
  readonly localNvmeSsdBlockConfig?: NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#localSsdCount
   */
  readonly localSsdCount?: number;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#loggingVariant
   */
  readonly loggingVariant?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#machineType
   */
  readonly machineType?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * @schema NodePoolSpecForProviderNodeConfig#minCpuPlatform
   */
  readonly minCpuPlatform?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#nodeGroup
   */
  readonly nodeGroup?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#oauthScopes
   */
  readonly oauthScopes?: string[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#preemptible
   */
  readonly preemptible?: boolean;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#reservationAffinity
   */
  readonly reservationAffinity?: NodePoolSpecForProviderNodeConfigReservationAffinity[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#resourceLabels
   */
  readonly resourceLabels?: { [key: string]: string };

  /**
   * @schema NodePoolSpecForProviderNodeConfig#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
   *
   * @schema NodePoolSpecForProviderNodeConfig#serviceAccountRef
   */
  readonly serviceAccountRef?: NodePoolSpecForProviderNodeConfigServiceAccountRef;

  /**
   * Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
   *
   * @schema NodePoolSpecForProviderNodeConfig#serviceAccountSelector
   */
  readonly serviceAccountSelector?: NodePoolSpecForProviderNodeConfigServiceAccountSelector;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#shieldedInstanceConfig
   */
  readonly shieldedInstanceConfig?: NodePoolSpecForProviderNodeConfigShieldedInstanceConfig[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#spot
   */
  readonly spot?: boolean;

  /**
   * @schema NodePoolSpecForProviderNodeConfig#tags
   */
  readonly tags?: string[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#taint
   */
  readonly taint?: NodePoolSpecForProviderNodeConfigTaint[];

  /**
   * @schema NodePoolSpecForProviderNodeConfig#workloadMetadataConfig
   */
  readonly workloadMetadataConfig?: NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig[];

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfig(obj: NodePoolSpecForProviderNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'advancedMachineFeatures': obj.advancedMachineFeatures?.map(y => toJson_NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures(y)),
    'bootDiskKmsKey': obj.bootDiskKmsKey,
    'diskSizeGb': obj.diskSizeGb,
    'diskType': obj.diskType,
    'ephemeralStorageLocalSsdConfig': obj.ephemeralStorageLocalSsdConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig(y)),
    'gcfsConfig': obj.gcfsConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigGcfsConfig(y)),
    'guestAccelerator': obj.guestAccelerator?.map(y => toJson_NodePoolSpecForProviderNodeConfigGuestAccelerator(y)),
    'gvnic': obj.gvnic?.map(y => toJson_NodePoolSpecForProviderNodeConfigGvnic(y)),
    'imageType': obj.imageType,
    'kubeletConfig': obj.kubeletConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigKubeletConfig(y)),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'linuxNodeConfig': obj.linuxNodeConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigLinuxNodeConfig(y)),
    'localNvmeSsdBlockConfig': obj.localNvmeSsdBlockConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig(y)),
    'localSsdCount': obj.localSsdCount,
    'loggingVariant': obj.loggingVariant,
    'machineType': obj.machineType,
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'minCpuPlatform': obj.minCpuPlatform,
    'nodeGroup': obj.nodeGroup,
    'oauthScopes': obj.oauthScopes?.map(y => y),
    'preemptible': obj.preemptible,
    'reservationAffinity': obj.reservationAffinity?.map(y => toJson_NodePoolSpecForProviderNodeConfigReservationAffinity(y)),
    'resourceLabels': ((obj.resourceLabels) === undefined) ? undefined : (Object.entries(obj.resourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'serviceAccountRef': toJson_NodePoolSpecForProviderNodeConfigServiceAccountRef(obj.serviceAccountRef),
    'serviceAccountSelector': toJson_NodePoolSpecForProviderNodeConfigServiceAccountSelector(obj.serviceAccountSelector),
    'shieldedInstanceConfig': obj.shieldedInstanceConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigShieldedInstanceConfig(y)),
    'spot': obj.spot,
    'tags': obj.tags?.map(y => y),
    'taint': obj.taint?.map(y => toJson_NodePoolSpecForProviderNodeConfigTaint(y)),
    'workloadMetadataConfig': obj.workloadMetadataConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderPlacementPolicy
 */
export interface NodePoolSpecForProviderPlacementPolicy {
  /**
   * The type of the policy. Supports a single value: COMPACT. Specifying COMPACT placement policy type places node pool's nodes in a closer physical proximity in order to reduce network latency between nodes.
   *
   * @schema NodePoolSpecForProviderPlacementPolicy#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderPlacementPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderPlacementPolicy(obj: NodePoolSpecForProviderPlacementPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderUpgradeSettings
 */
export interface NodePoolSpecForProviderUpgradeSettings {
  /**
   * The settings to adjust blue green upgrades. Structure is documented below
   *
   * @schema NodePoolSpecForProviderUpgradeSettings#blueGreenSettings
   */
  readonly blueGreenSettings?: NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings[];

  /**
   * The number of additional nodes that can be added to the node pool during an upgrade. Increasing max_surge raises the number of nodes that can be upgraded simultaneously. Can be set to 0 or greater.
   *
   * @schema NodePoolSpecForProviderUpgradeSettings#maxSurge
   */
  readonly maxSurge?: number;

  /**
   * The number of nodes that can be simultaneously unavailable during an upgrade. Increasing max_unavailable raises the number of nodes that can be upgraded in parallel. Can be set to 0 or greater.
   *
   * @schema NodePoolSpecForProviderUpgradeSettings#maxUnavailable
   */
  readonly maxUnavailable?: number;

  /**
   * (Default SURGE) The upgrade stragey to be used for upgrading the nodes.
   *
   * @schema NodePoolSpecForProviderUpgradeSettings#strategy
   */
  readonly strategy?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderUpgradeSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderUpgradeSettings(obj: NodePoolSpecForProviderUpgradeSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'blueGreenSettings': obj.blueGreenSettings?.map(y => toJson_NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings(y)),
    'maxSurge': obj.maxSurge,
    'maxUnavailable': obj.maxUnavailable,
    'strategy': obj.strategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecProviderConfigRefPolicy
 */
export interface NodePoolSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderConfigRefPolicy(obj: NodePoolSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecProviderRefPolicy
 */
export interface NodePoolSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecProviderRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecProviderRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderRefPolicy(obj: NodePoolSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRef
 */
export interface NodePoolSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToConfigRef(obj: NodePoolSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToMetadata
 */
export interface NodePoolSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToMetadata(obj: NodePoolSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicy
 */
export interface NodePoolSpecForProviderClusterRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderClusterRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderClusterRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderClusterRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderClusterRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterRefPolicy(obj: NodePoolSpecForProviderClusterRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicy
 */
export interface NodePoolSpecForProviderClusterSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderClusterSelectorPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderClusterSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderClusterSelectorPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderClusterSelectorPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterSelectorPolicy(obj: NodePoolSpecForProviderClusterSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig
 */
export interface NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig {
  /**
   * @schema NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig#disabled
   */
  readonly disabled: boolean;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig(obj: NodePoolSpecForProviderNetworkConfigPodCidrOverprovisionConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures
 */
export interface NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures {
  /**
   * @schema NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures#threadsPerCore
   */
  readonly threadsPerCore: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures(obj: NodePoolSpecForProviderNodeConfigAdvancedMachineFeatures | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'threadsPerCore': obj.threadsPerCore,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig
 */
export interface NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig(obj: NodePoolSpecForProviderNodeConfigEphemeralStorageLocalSsdConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigGcfsConfig
 */
export interface NodePoolSpecForProviderNodeConfigGcfsConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigGcfsConfig#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigGcfsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigGcfsConfig(obj: NodePoolSpecForProviderNodeConfigGcfsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigGuestAccelerator
 */
export interface NodePoolSpecForProviderNodeConfigGuestAccelerator {
  /**
   * @schema NodePoolSpecForProviderNodeConfigGuestAccelerator#count
   */
  readonly count?: number;

  /**
   * @schema NodePoolSpecForProviderNodeConfigGuestAccelerator#gpuPartitionSize
   */
  readonly gpuPartitionSize?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigGuestAccelerator#gpuSharingConfig
   */
  readonly gpuSharingConfig?: NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig[];

  /**
   * The type of the policy. Supports a single value: COMPACT. Specifying COMPACT placement policy type places node pool's nodes in a closer physical proximity in order to reduce network latency between nodes.
   *
   * @schema NodePoolSpecForProviderNodeConfigGuestAccelerator#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigGuestAccelerator' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigGuestAccelerator(obj: NodePoolSpecForProviderNodeConfigGuestAccelerator | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'count': obj.count,
    'gpuPartitionSize': obj.gpuPartitionSize,
    'gpuSharingConfig': obj.gpuSharingConfig?.map(y => toJson_NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigGvnic
 */
export interface NodePoolSpecForProviderNodeConfigGvnic {
  /**
   * @schema NodePoolSpecForProviderNodeConfigGvnic#enabled
   */
  readonly enabled: boolean;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigGvnic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigGvnic(obj: NodePoolSpecForProviderNodeConfigGvnic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigKubeletConfig
 */
export interface NodePoolSpecForProviderNodeConfigKubeletConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigKubeletConfig#cpuCfsQuota
   */
  readonly cpuCfsQuota?: boolean;

  /**
   * @schema NodePoolSpecForProviderNodeConfigKubeletConfig#cpuCfsQuotaPeriod
   */
  readonly cpuCfsQuotaPeriod?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigKubeletConfig#cpuManagerPolicy
   */
  readonly cpuManagerPolicy: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigKubeletConfig#podPidsLimit
   */
  readonly podPidsLimit?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigKubeletConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigKubeletConfig(obj: NodePoolSpecForProviderNodeConfigKubeletConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cpuCfsQuota': obj.cpuCfsQuota,
    'cpuCfsQuotaPeriod': obj.cpuCfsQuotaPeriod,
    'cpuManagerPolicy': obj.cpuManagerPolicy,
    'podPidsLimit': obj.podPidsLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigLinuxNodeConfig
 */
export interface NodePoolSpecForProviderNodeConfigLinuxNodeConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigLinuxNodeConfig#sysctls
   */
  readonly sysctls: { [key: string]: string };

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigLinuxNodeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigLinuxNodeConfig(obj: NodePoolSpecForProviderNodeConfigLinuxNodeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sysctls': ((obj.sysctls) === undefined) ? undefined : (Object.entries(obj.sysctls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig
 */
export interface NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig#localSsdCount
   */
  readonly localSsdCount: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig(obj: NodePoolSpecForProviderNodeConfigLocalNvmeSsdBlockConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localSsdCount': obj.localSsdCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigReservationAffinity
 */
export interface NodePoolSpecForProviderNodeConfigReservationAffinity {
  /**
   * @schema NodePoolSpecForProviderNodeConfigReservationAffinity#consumeReservationType
   */
  readonly consumeReservationType: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigReservationAffinity#key
   */
  readonly key?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigReservationAffinity#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigReservationAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigReservationAffinity(obj: NodePoolSpecForProviderNodeConfigReservationAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consumeReservationType': obj.consumeReservationType,
    'key': obj.key,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a ServiceAccount in cloudplatform to populate serviceAccount.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountRef
 */
export interface NodePoolSpecForProviderNodeConfigServiceAccountRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountRef#policy
   */
  readonly policy?: NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigServiceAccountRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigServiceAccountRef(obj: NodePoolSpecForProviderNodeConfigServiceAccountRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a ServiceAccount in cloudplatform to populate serviceAccount.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelector
 */
export interface NodePoolSpecForProviderNodeConfigServiceAccountSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelector#policy
   */
  readonly policy?: NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigServiceAccountSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigServiceAccountSelector(obj: NodePoolSpecForProviderNodeConfigServiceAccountSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigShieldedInstanceConfig
 */
export interface NodePoolSpecForProviderNodeConfigShieldedInstanceConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigShieldedInstanceConfig#enableIntegrityMonitoring
   */
  readonly enableIntegrityMonitoring?: boolean;

  /**
   * @schema NodePoolSpecForProviderNodeConfigShieldedInstanceConfig#enableSecureBoot
   */
  readonly enableSecureBoot?: boolean;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigShieldedInstanceConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigShieldedInstanceConfig(obj: NodePoolSpecForProviderNodeConfigShieldedInstanceConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableIntegrityMonitoring': obj.enableIntegrityMonitoring,
    'enableSecureBoot': obj.enableSecureBoot,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigTaint
 */
export interface NodePoolSpecForProviderNodeConfigTaint {
  /**
   * @schema NodePoolSpecForProviderNodeConfigTaint#effect
   */
  readonly effect?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigTaint#key
   */
  readonly key?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigTaint#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigTaint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigTaint(obj: NodePoolSpecForProviderNodeConfigTaint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig
 */
export interface NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig#mode
   */
  readonly mode: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig(obj: NodePoolSpecForProviderNodeConfigWorkloadMetadataConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings
 */
export interface NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings {
  /**
   * Time needed after draining the entire blue pool. After this period, the blue pool will be cleaned up.
   *
   * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings#nodePoolSoakDuration
   */
  readonly nodePoolSoakDuration?: string;

  /**
   * Specifies the standard policy settings for blue-green upgrades.
   *
   * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings#standardRolloutPolicy
   */
  readonly standardRolloutPolicy: NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy[];

}

/**
 * Converts an object of type 'NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings(obj: NodePoolSpecForProviderUpgradeSettingsBlueGreenSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodePoolSoakDuration': obj.nodePoolSoakDuration,
    'standardRolloutPolicy': obj.standardRolloutPolicy?.map(y => toJson_NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecProviderConfigRefPolicyResolution
 */
export enum NodePoolSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecProviderConfigRefPolicyResolve
 */
export enum NodePoolSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecProviderRefPolicyResolution
 */
export enum NodePoolSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecProviderRefPolicyResolve
 */
export enum NodePoolSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface NodePoolSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToConfigRefPolicy(obj: NodePoolSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicyResolution
 */
export enum NodePoolSpecForProviderClusterRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicyResolve
 */
export enum NodePoolSpecForProviderClusterRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicyResolution
 */
export enum NodePoolSpecForProviderClusterSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicyResolve
 */
export enum NodePoolSpecForProviderClusterSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig
 */
export interface NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig {
  /**
   * @schema NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig#gpuSharingStrategy
   */
  readonly gpuSharingStrategy?: string;

  /**
   * @schema NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig#maxSharedClientsPerGpu
   */
  readonly maxSharedClientsPerGpu?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig(obj: NodePoolSpecForProviderNodeConfigGuestAcceleratorGpuSharingConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gpuSharingStrategy': obj.gpuSharingStrategy,
    'maxSharedClientsPerGpu': obj.maxSharedClientsPerGpu,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy
 */
export interface NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy(obj: NodePoolSpecForProviderNodeConfigServiceAccountRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy
 */
export interface NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy(obj: NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy
 */
export interface NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy {
  /**
   * Number of blue nodes to drain in a batch.
   *
   * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchNodeCount
   */
  readonly batchNodeCount?: number;

  /**
   * Percentage of the blue pool nodes to drain in a batch.
   *
   * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchPercentage
   */
  readonly batchPercentage?: number;

  /**
   * (Optionial) Soak time after each batch gets drained.
   *
   * @schema NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy#batchSoakDuration
   */
  readonly batchSoakDuration?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy(obj: NodePoolSpecForProviderUpgradeSettingsBlueGreenSettingsStandardRolloutPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchNodeCount': obj.batchNodeCount,
    'batchPercentage': obj.batchPercentage,
    'batchSoakDuration': obj.batchSoakDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolution
 */
export enum NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolve
 */
export enum NodePoolSpecForProviderNodeConfigServiceAccountRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution
 */
export enum NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve
 */
export enum NodePoolSpecForProviderNodeConfigServiceAccountSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * Registry is the Schema for the Registrys API. Ensures the GCS bucket backing Google Container Registry exists.
 *
 * @schema Registry
 */
export class Registry extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Registry"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'container.gcp.upbound.io/v1beta1',
    kind: 'Registry',
  }

  /**
   * Renders a Kubernetes manifest for "Registry".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RegistryProps): any {
    return {
      ...Registry.GVK,
      ...toJson_RegistryProps(props),
    };
  }

  /**
   * Defines a "Registry" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RegistryProps) {
    super(scope, id, {
      ...Registry.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Registry.GVK,
      ...toJson_RegistryProps(resolved),
    };
  }
}

/**
 * Registry is the Schema for the Registrys API. Ensures the GCS bucket backing Google Container Registry exists.
 *
 * @schema Registry
 */
export interface RegistryProps {
  /**
   * @schema Registry#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RegistrySpec defines the desired state of Registry
   *
   * @schema Registry#spec
   */
  readonly spec: RegistrySpec;

}

/**
 * Converts an object of type 'RegistryProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryProps(obj: RegistryProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RegistrySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RegistrySpec defines the desired state of Registry
 *
 * @schema RegistrySpec
 */
export interface RegistrySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema RegistrySpec#deletionPolicy
   */
  readonly deletionPolicy?: RegistrySpecDeletionPolicy;

  /**
   * @schema RegistrySpec#forProvider
   */
  readonly forProvider: RegistrySpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema RegistrySpec#managementPolicy
   */
  readonly managementPolicy?: RegistrySpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RegistrySpec#providerConfigRef
   */
  readonly providerConfigRef?: RegistrySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RegistrySpec#providerRef
   */
  readonly providerRef?: RegistrySpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RegistrySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RegistrySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RegistrySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RegistrySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RegistrySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpec(obj: RegistrySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RegistrySpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_RegistrySpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_RegistrySpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_RegistrySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RegistrySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema RegistrySpecDeletionPolicy
 */
export enum RegistrySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema RegistrySpecForProvider
 */
export interface RegistrySpecForProvider {
  /**
   * The location of the registry. One of ASIA, EU, US or not specified. See the official documentation for more information on registry locations.
   *
   * @schema RegistrySpecForProvider#location
   */
  readonly location?: string;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema RegistrySpecForProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'RegistrySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecForProvider(obj: RegistrySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'location': obj.location,
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema RegistrySpecManagementPolicy
 */
export enum RegistrySpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RegistrySpecProviderConfigRef
 */
export interface RegistrySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistrySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistrySpecProviderConfigRef#policy
   */
  readonly policy?: RegistrySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistrySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecProviderConfigRef(obj: RegistrySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistrySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RegistrySpecProviderRef
 */
export interface RegistrySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistrySpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistrySpecProviderRef#policy
   */
  readonly policy?: RegistrySpecProviderRefPolicy;

}

/**
 * Converts an object of type 'RegistrySpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecProviderRef(obj: RegistrySpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistrySpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RegistrySpecPublishConnectionDetailsTo
 */
export interface RegistrySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RegistrySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RegistrySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RegistrySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RegistrySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RegistrySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RegistrySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecPublishConnectionDetailsTo(obj: RegistrySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RegistrySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RegistrySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RegistrySpecWriteConnectionSecretToRef
 */
export interface RegistrySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RegistrySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RegistrySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RegistrySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecWriteConnectionSecretToRef(obj: RegistrySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistrySpecProviderConfigRefPolicy
 */
export interface RegistrySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistrySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RegistrySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistrySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RegistrySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistrySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecProviderConfigRefPolicy(obj: RegistrySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistrySpecProviderRefPolicy
 */
export interface RegistrySpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistrySpecProviderRefPolicy#resolution
   */
  readonly resolution?: RegistrySpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistrySpecProviderRefPolicy#resolve
   */
  readonly resolve?: RegistrySpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistrySpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecProviderRefPolicy(obj: RegistrySpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RegistrySpecPublishConnectionDetailsToConfigRef
 */
export interface RegistrySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistrySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistrySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RegistrySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistrySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecPublishConnectionDetailsToConfigRef(obj: RegistrySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistrySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RegistrySpecPublishConnectionDetailsToMetadata
 */
export interface RegistrySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistrySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistrySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RegistrySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RegistrySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecPublishConnectionDetailsToMetadata(obj: RegistrySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistrySpecProviderConfigRefPolicyResolution
 */
export enum RegistrySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistrySpecProviderConfigRefPolicyResolve
 */
export enum RegistrySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistrySpecProviderRefPolicyResolution
 */
export enum RegistrySpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistrySpecProviderRefPolicyResolve
 */
export enum RegistrySpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RegistrySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RegistrySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistrySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistrySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistrySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistrySpecPublishConnectionDetailsToConfigRefPolicy(obj: RegistrySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RegistrySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

