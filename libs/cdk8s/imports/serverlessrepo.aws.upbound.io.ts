// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * CloudFormationStack is the Schema for the CloudFormationStacks API. Deploys an Application CloudFormation Stack from the Serverless Application Repository.
 *
 * @schema CloudFormationStack
 */
export class CloudFormationStack extends ApiObject {
  /**
   * Returns the apiVersion and kind for "CloudFormationStack"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'serverlessrepo.aws.upbound.io/v1beta1',
    kind: 'CloudFormationStack',
  }

  /**
   * Renders a Kubernetes manifest for "CloudFormationStack".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CloudFormationStackProps): any {
    return {
      ...CloudFormationStack.GVK,
      ...toJson_CloudFormationStackProps(props),
    };
  }

  /**
   * Defines a "CloudFormationStack" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CloudFormationStackProps) {
    super(scope, id, {
      ...CloudFormationStack.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...CloudFormationStack.GVK,
      ...toJson_CloudFormationStackProps(resolved),
    };
  }
}

/**
 * CloudFormationStack is the Schema for the CloudFormationStacks API. Deploys an Application CloudFormation Stack from the Serverless Application Repository.
 *
 * @schema CloudFormationStack
 */
export interface CloudFormationStackProps {
  /**
   * @schema CloudFormationStack#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CloudFormationStackSpec defines the desired state of CloudFormationStack
   *
   * @schema CloudFormationStack#spec
   */
  readonly spec: CloudFormationStackSpec;

}

/**
 * Converts an object of type 'CloudFormationStackProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackProps(obj: CloudFormationStackProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CloudFormationStackSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CloudFormationStackSpec defines the desired state of CloudFormationStack
 *
 * @schema CloudFormationStackSpec
 */
export interface CloudFormationStackSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CloudFormationStackSpec#deletionPolicy
   */
  readonly deletionPolicy?: CloudFormationStackSpecDeletionPolicy;

  /**
   * @schema CloudFormationStackSpec#forProvider
   */
  readonly forProvider: CloudFormationStackSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CloudFormationStackSpec#managementPolicy
   */
  readonly managementPolicy?: CloudFormationStackSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CloudFormationStackSpec#providerConfigRef
   */
  readonly providerConfigRef?: CloudFormationStackSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema CloudFormationStackSpec#providerRef
   */
  readonly providerRef?: CloudFormationStackSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CloudFormationStackSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CloudFormationStackSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CloudFormationStackSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CloudFormationStackSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CloudFormationStackSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpec(obj: CloudFormationStackSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CloudFormationStackSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_CloudFormationStackSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_CloudFormationStackSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_CloudFormationStackSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CloudFormationStackSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CloudFormationStackSpecDeletionPolicy
 */
export enum CloudFormationStackSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema CloudFormationStackSpecForProvider
 */
export interface CloudFormationStackSpecForProvider {
  /**
   * The ARN of the application from the Serverless Application Repository.
   *
   * @schema CloudFormationStackSpecForProvider#applicationId
   */
  readonly applicationId?: string;

  /**
   * A list of capabilities. Valid values are CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_RESOURCE_POLICY, or CAPABILITY_AUTO_EXPAND
   *
   * @schema CloudFormationStackSpecForProvider#capabilities
   */
  readonly capabilities?: string[];

  /**
   * The name of the stack to create. The resource deployed in AWS will be prefixed with serverlessrepo-
   *
   * @schema CloudFormationStackSpecForProvider#name
   */
  readonly name?: string;

  /**
   * A map of Parameter structures that specify input parameters for the stack.
   *
   * @schema CloudFormationStackSpecForProvider#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema CloudFormationStackSpecForProvider#region
   */
  readonly region: string;

  /**
   * The version of the application to deploy. If not supplied, deploys the latest version.
   *
   * @schema CloudFormationStackSpecForProvider#semanticVersion
   */
  readonly semanticVersion?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema CloudFormationStackSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'CloudFormationStackSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecForProvider(obj: CloudFormationStackSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationId': obj.applicationId,
    'capabilities': obj.capabilities?.map(y => y),
    'name': obj.name,
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'region': obj.region,
    'semanticVersion': obj.semanticVersion,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CloudFormationStackSpecManagementPolicy
 */
export enum CloudFormationStackSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CloudFormationStackSpecProviderConfigRef
 */
export interface CloudFormationStackSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CloudFormationStackSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CloudFormationStackSpecProviderConfigRef#policy
   */
  readonly policy?: CloudFormationStackSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CloudFormationStackSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecProviderConfigRef(obj: CloudFormationStackSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CloudFormationStackSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema CloudFormationStackSpecProviderRef
 */
export interface CloudFormationStackSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema CloudFormationStackSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CloudFormationStackSpecProviderRef#policy
   */
  readonly policy?: CloudFormationStackSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'CloudFormationStackSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecProviderRef(obj: CloudFormationStackSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CloudFormationStackSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsTo
 */
export interface CloudFormationStackSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CloudFormationStackSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CloudFormationStackSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CloudFormationStackSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecPublishConnectionDetailsTo(obj: CloudFormationStackSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CloudFormationStackSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CloudFormationStackSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CloudFormationStackSpecWriteConnectionSecretToRef
 */
export interface CloudFormationStackSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CloudFormationStackSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CloudFormationStackSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CloudFormationStackSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecWriteConnectionSecretToRef(obj: CloudFormationStackSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CloudFormationStackSpecProviderConfigRefPolicy
 */
export interface CloudFormationStackSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CloudFormationStackSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CloudFormationStackSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CloudFormationStackSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CloudFormationStackSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CloudFormationStackSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecProviderConfigRefPolicy(obj: CloudFormationStackSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CloudFormationStackSpecProviderRefPolicy
 */
export interface CloudFormationStackSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CloudFormationStackSpecProviderRefPolicy#resolution
   */
  readonly resolution?: CloudFormationStackSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CloudFormationStackSpecProviderRefPolicy#resolve
   */
  readonly resolve?: CloudFormationStackSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'CloudFormationStackSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecProviderRefPolicy(obj: CloudFormationStackSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRef
 */
export interface CloudFormationStackSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CloudFormationStackSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecPublishConnectionDetailsToConfigRef(obj: CloudFormationStackSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsToMetadata
 */
export interface CloudFormationStackSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CloudFormationStackSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecPublishConnectionDetailsToMetadata(obj: CloudFormationStackSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CloudFormationStackSpecProviderConfigRefPolicyResolution
 */
export enum CloudFormationStackSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CloudFormationStackSpecProviderConfigRefPolicyResolve
 */
export enum CloudFormationStackSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CloudFormationStackSpecProviderRefPolicyResolution
 */
export enum CloudFormationStackSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CloudFormationStackSpecProviderRefPolicyResolve
 */
export enum CloudFormationStackSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy(obj: CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CloudFormationStackSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

