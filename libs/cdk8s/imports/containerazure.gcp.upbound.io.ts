// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Client is the Schema for the Clients API. AzureClient resources hold client authentication information needed by the Anthos Multi-Cloud API to manage Azure resources on your Azure subscription.When an AzureCluster is created, an AzureClient resource needs to be provided and all operations on Azure resources associated to that cluster will authenticate to Azure services using the given client.AzureClient resources are immutable and cannot be modified upon creation.Each AzureClient resource is bound to a single Azure Active Directory Application and tenant.
 *
 * @schema Client
 */
export class Client extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Client"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'containerazure.gcp.upbound.io/v1beta1',
    kind: 'Client',
  }

  /**
   * Renders a Kubernetes manifest for "Client".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClientProps): any {
    return {
      ...Client.GVK,
      ...toJson_ClientProps(props),
    };
  }

  /**
   * Defines a "Client" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClientProps) {
    super(scope, id, {
      ...Client.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Client.GVK,
      ...toJson_ClientProps(resolved),
    };
  }
}

/**
 * Client is the Schema for the Clients API. AzureClient resources hold client authentication information needed by the Anthos Multi-Cloud API to manage Azure resources on your Azure subscription.When an AzureCluster is created, an AzureClient resource needs to be provided and all operations on Azure resources associated to that cluster will authenticate to Azure services using the given client.AzureClient resources are immutable and cannot be modified upon creation.Each AzureClient resource is bound to a single Azure Active Directory Application and tenant.
 *
 * @schema Client
 */
export interface ClientProps {
  /**
   * @schema Client#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ClientSpec defines the desired state of Client
   *
   * @schema Client#spec
   */
  readonly spec: ClientSpec;

}

/**
 * Converts an object of type 'ClientProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientProps(obj: ClientProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ClientSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientSpec defines the desired state of Client
 *
 * @schema ClientSpec
 */
export interface ClientSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ClientSpec#deletionPolicy
   */
  readonly deletionPolicy?: ClientSpecDeletionPolicy;

  /**
   * @schema ClientSpec#forProvider
   */
  readonly forProvider: ClientSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ClientSpec#initProvider
   */
  readonly initProvider?: ClientSpecInitProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ClientSpec#managementPolicies
   */
  readonly managementPolicies?: ClientSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ClientSpec#providerConfigRef
   */
  readonly providerConfigRef?: ClientSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ClientSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ClientSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ClientSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ClientSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ClientSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpec(obj: ClientSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ClientSpecForProvider(obj.forProvider),
    'initProvider': toJson_ClientSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ClientSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ClientSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ClientSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ClientSpecDeletionPolicy
 */
export enum ClientSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ClientSpecForProvider
 */
export interface ClientSpecForProvider {
  /**
   * The Azure Active Directory Application ID.
   *
   * @schema ClientSpecForProvider#applicationId
   */
  readonly applicationId?: string;

  /**
   * The location for the resource
   *
   * @schema ClientSpecForProvider#location
   */
  readonly location: string;

  /**
   * The project for the resource
   *
   * @schema ClientSpecForProvider#project
   */
  readonly project?: string;

  /**
   * The Azure Active Directory Tenant ID.
   *
   * @schema ClientSpecForProvider#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Converts an object of type 'ClientSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecForProvider(obj: ClientSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationId': obj.applicationId,
    'location': obj.location,
    'project': obj.project,
    'tenantId': obj.tenantId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ClientSpecInitProvider
 */
export interface ClientSpecInitProvider {
  /**
   * The Azure Active Directory Application ID.
   *
   * @schema ClientSpecInitProvider#applicationId
   */
  readonly applicationId?: string;

  /**
   * The project for the resource
   *
   * @schema ClientSpecInitProvider#project
   */
  readonly project?: string;

  /**
   * The Azure Active Directory Tenant ID.
   *
   * @schema ClientSpecInitProvider#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Converts an object of type 'ClientSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecInitProvider(obj: ClientSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationId': obj.applicationId,
    'project': obj.project,
    'tenantId': obj.tenantId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ClientSpecManagementPolicies
 */
export enum ClientSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ClientSpecProviderConfigRef
 */
export interface ClientSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClientSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClientSpecProviderConfigRef#policy
   */
  readonly policy?: ClientSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ClientSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecProviderConfigRef(obj: ClientSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClientSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ClientSpecPublishConnectionDetailsTo
 */
export interface ClientSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ClientSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ClientSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ClientSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ClientSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ClientSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ClientSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecPublishConnectionDetailsTo(obj: ClientSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ClientSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ClientSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ClientSpecWriteConnectionSecretToRef
 */
export interface ClientSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ClientSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ClientSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ClientSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecWriteConnectionSecretToRef(obj: ClientSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClientSpecProviderConfigRefPolicy
 */
export interface ClientSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClientSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ClientSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClientSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ClientSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClientSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecProviderConfigRefPolicy(obj: ClientSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ClientSpecPublishConnectionDetailsToConfigRef
 */
export interface ClientSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClientSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClientSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ClientSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ClientSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecPublishConnectionDetailsToConfigRef(obj: ClientSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClientSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ClientSpecPublishConnectionDetailsToMetadata
 */
export interface ClientSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClientSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClientSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ClientSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ClientSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecPublishConnectionDetailsToMetadata(obj: ClientSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClientSpecProviderConfigRefPolicyResolution
 */
export enum ClientSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClientSpecProviderConfigRefPolicyResolve
 */
export enum ClientSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ClientSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ClientSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClientSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ClientSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClientSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ClientSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClientSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClientSpecPublishConnectionDetailsToConfigRefPolicy(obj: ClientSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClientSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ClientSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClientSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ClientSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * Cluster is the Schema for the Clusters API. An Anthos cluster running on Azure.
 *
 * @schema Cluster
 */
export class Cluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Cluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'containerazure.gcp.upbound.io/v1beta1',
    kind: 'Cluster',
  }

  /**
   * Renders a Kubernetes manifest for "Cluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClusterProps): any {
    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(props),
    };
  }

  /**
   * Defines a "Cluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClusterProps) {
    super(scope, id, {
      ...Cluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(resolved),
    };
  }
}

/**
 * Cluster is the Schema for the Clusters API. An Anthos cluster running on Azure.
 *
 * @schema Cluster
 */
export interface ClusterProps {
  /**
   * @schema Cluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ClusterSpec defines the desired state of Cluster
   *
   * @schema Cluster#spec
   */
  readonly spec: ClusterSpec;

}

/**
 * Converts an object of type 'ClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterProps(obj: ClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterSpec defines the desired state of Cluster
 *
 * @schema ClusterSpec
 */
export interface ClusterSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ClusterSpec#deletionPolicy
   */
  readonly deletionPolicy?: ClusterSpecDeletionPolicy;

  /**
   * @schema ClusterSpec#forProvider
   */
  readonly forProvider: ClusterSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ClusterSpec#initProvider
   */
  readonly initProvider?: ClusterSpecInitProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ClusterSpec#managementPolicies
   */
  readonly managementPolicies?: ClusterSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ClusterSpec#providerConfigRef
   */
  readonly providerConfigRef?: ClusterSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ClusterSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ClusterSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ClusterSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ClusterSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpec(obj: ClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ClusterSpecForProvider(obj.forProvider),
    'initProvider': toJson_ClusterSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ClusterSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ClusterSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ClusterSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ClusterSpecDeletionPolicy
 */
export enum ClusterSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ClusterSpecForProvider
 */
export interface ClusterSpecForProvider {
  /**
   * Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   *
   * @schema ClusterSpecForProvider#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Configuration related to the cluster RBAC settings.
   *
   * @schema ClusterSpecForProvider#authorization
   */
  readonly authorization?: ClusterSpecForProviderAuthorization[];

  /**
   * The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
   *
   * @schema ClusterSpecForProvider#azureRegion
   */
  readonly azureRegion?: string;

  /**
   * Azure authentication configuration for management of Azure resources
   *
   * @schema ClusterSpecForProvider#azureServicesAuthentication
   */
  readonly azureServicesAuthentication?: ClusterSpecForProviderAzureServicesAuthentication[];

  /**
   * Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
   *
   * @schema ClusterSpecForProvider#client
   */
  readonly client?: string;

  /**
   * Configuration related to the cluster control plane.
   *
   * @schema ClusterSpecForProvider#controlPlane
   */
  readonly controlPlane?: ClusterSpecForProviderControlPlane[];

  /**
   * Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
   *
   * @schema ClusterSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Fleet configuration.
   *
   * @schema ClusterSpecForProvider#fleet
   */
  readonly fleet?: ClusterSpecForProviderFleet[];

  /**
   * The location for the resource
   *
   * @schema ClusterSpecForProvider#location
   */
  readonly location: string;

  /**
   * Cluster-wide networking configuration.
   *
   * @schema ClusterSpecForProvider#networking
   */
  readonly networking?: ClusterSpecForProviderNetworking[];

  /**
   * The project for the resource
   *
   * @schema ClusterSpecForProvider#project
   */
  readonly project?: string;

  /**
   * The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/_/resourceGroups/*
   *
   * @schema ClusterSpecForProvider#resourceGroupId
   */
  readonly resourceGroupId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProvider(obj: ClusterSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'authorization': obj.authorization?.map(y => toJson_ClusterSpecForProviderAuthorization(y)),
    'azureRegion': obj.azureRegion,
    'azureServicesAuthentication': obj.azureServicesAuthentication?.map(y => toJson_ClusterSpecForProviderAzureServicesAuthentication(y)),
    'client': obj.client,
    'controlPlane': obj.controlPlane?.map(y => toJson_ClusterSpecForProviderControlPlane(y)),
    'description': obj.description,
    'fleet': obj.fleet?.map(y => toJson_ClusterSpecForProviderFleet(y)),
    'location': obj.location,
    'networking': obj.networking?.map(y => toJson_ClusterSpecForProviderNetworking(y)),
    'project': obj.project,
    'resourceGroupId': obj.resourceGroupId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ClusterSpecInitProvider
 */
export interface ClusterSpecInitProvider {
  /**
   * Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   *
   * @schema ClusterSpecInitProvider#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Configuration related to the cluster RBAC settings.
   *
   * @schema ClusterSpecInitProvider#authorization
   */
  readonly authorization?: ClusterSpecInitProviderAuthorization[];

  /**
   * The Azure region where the cluster runs. Each Google Cloud region supports a subset of nearby Azure regions. You can call to list all supported Azure regions within a given Google Cloud region.
   *
   * @schema ClusterSpecInitProvider#azureRegion
   */
  readonly azureRegion?: string;

  /**
   * Azure authentication configuration for management of Azure resources
   *
   * @schema ClusterSpecInitProvider#azureServicesAuthentication
   */
  readonly azureServicesAuthentication?: ClusterSpecInitProviderAzureServicesAuthentication[];

  /**
   * Name of the AzureClient. The AzureClient resource must reside on the same GCP project and region as the AzureCluster. AzureClient names are formatted as projects/<project-number>/locations/<region>/azureClients/<client-id>. See Resource Names (https:cloud.google.com/apis/design/resource_names) for more details on Google Cloud resource names.
   *
   * @schema ClusterSpecInitProvider#client
   */
  readonly client?: string;

  /**
   * Configuration related to the cluster control plane.
   *
   * @schema ClusterSpecInitProvider#controlPlane
   */
  readonly controlPlane?: ClusterSpecInitProviderControlPlane[];

  /**
   * Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
   *
   * @schema ClusterSpecInitProvider#description
   */
  readonly description?: string;

  /**
   * Fleet configuration.
   *
   * @schema ClusterSpecInitProvider#fleet
   */
  readonly fleet?: ClusterSpecInitProviderFleet[];

  /**
   * Cluster-wide networking configuration.
   *
   * @schema ClusterSpecInitProvider#networking
   */
  readonly networking?: ClusterSpecInitProviderNetworking[];

  /**
   * The project for the resource
   *
   * @schema ClusterSpecInitProvider#project
   */
  readonly project?: string;

  /**
   * The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/_/resourceGroups/*
   *
   * @schema ClusterSpecInitProvider#resourceGroupId
   */
  readonly resourceGroupId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProvider(obj: ClusterSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'authorization': obj.authorization?.map(y => toJson_ClusterSpecInitProviderAuthorization(y)),
    'azureRegion': obj.azureRegion,
    'azureServicesAuthentication': obj.azureServicesAuthentication?.map(y => toJson_ClusterSpecInitProviderAzureServicesAuthentication(y)),
    'client': obj.client,
    'controlPlane': obj.controlPlane?.map(y => toJson_ClusterSpecInitProviderControlPlane(y)),
    'description': obj.description,
    'fleet': obj.fleet?.map(y => toJson_ClusterSpecInitProviderFleet(y)),
    'networking': obj.networking?.map(y => toJson_ClusterSpecInitProviderNetworking(y)),
    'project': obj.project,
    'resourceGroupId': obj.resourceGroupId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ClusterSpecManagementPolicies
 */
export enum ClusterSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ClusterSpecProviderConfigRef
 */
export interface ClusterSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecProviderConfigRef#policy
   */
  readonly policy?: ClusterSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderConfigRef(obj: ClusterSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ClusterSpecPublishConnectionDetailsTo
 */
export interface ClusterSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ClusterSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ClusterSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ClusterSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsTo(obj: ClusterSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ClusterSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ClusterSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ClusterSpecWriteConnectionSecretToRef
 */
export interface ClusterSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ClusterSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ClusterSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ClusterSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecWriteConnectionSecretToRef(obj: ClusterSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAuthorization
 */
export interface ClusterSpecForProviderAuthorization {
  /**
   * Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
   *
   * @schema ClusterSpecForProviderAuthorization#adminUsers
   */
  readonly adminUsers?: ClusterSpecForProviderAuthorizationAdminUsers[];

}

/**
 * Converts an object of type 'ClusterSpecForProviderAuthorization' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAuthorization(obj: ClusterSpecForProviderAuthorization | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'adminUsers': obj.adminUsers?.map(y => toJson_ClusterSpecForProviderAuthorizationAdminUsers(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAzureServicesAuthentication
 */
export interface ClusterSpecForProviderAzureServicesAuthentication {
  /**
   * The Azure Active Directory Application ID for Authentication configuration.
   *
   * @schema ClusterSpecForProviderAzureServicesAuthentication#applicationId
   */
  readonly applicationId?: string;

  /**
   * The Azure Active Directory Tenant ID for Authentication configuration.
   *
   * @schema ClusterSpecForProviderAzureServicesAuthentication#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAzureServicesAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAzureServicesAuthentication(obj: ClusterSpecForProviderAzureServicesAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationId': obj.applicationId,
    'tenantId': obj.tenantId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlane
 */
export interface ClusterSpecForProviderControlPlane {
  /**
   * Optional. Configuration related to application-layer secrets encryption.
   *
   * @schema ClusterSpecForProviderControlPlane#databaseEncryption
   */
  readonly databaseEncryption?: ClusterSpecForProviderControlPlaneDatabaseEncryption[];

  /**
   * Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
   *
   * @schema ClusterSpecForProviderControlPlane#mainVolume
   */
  readonly mainVolume?: ClusterSpecForProviderControlPlaneMainVolume[];

  /**
   * Proxy configuration for outbound HTTP(S) traffic.
   *
   * @schema ClusterSpecForProviderControlPlane#proxyConfig
   */
  readonly proxyConfig?: ClusterSpecForProviderControlPlaneProxyConfig[];

  /**
   * Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
   *
   * @schema ClusterSpecForProviderControlPlane#replicaPlacements
   */
  readonly replicaPlacements?: ClusterSpecForProviderControlPlaneReplicaPlacements[];

  /**
   * Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
   *
   * @schema ClusterSpecForProviderControlPlane#rootVolume
   */
  readonly rootVolume?: ClusterSpecForProviderControlPlaneRootVolume[];

  /**
   * SSH configuration for how to access the underlying control plane machines.
   *
   * @schema ClusterSpecForProviderControlPlane#sshConfig
   */
  readonly sshConfig?: ClusterSpecForProviderControlPlaneSshConfig[];

  /**
   * The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
   *
   * @schema ClusterSpecForProviderControlPlane#subnetId
   */
  readonly subnetId?: string;

  /**
   * Optional. A set of tags to apply to all underlying control plane Azure resources.
   *
   * @schema ClusterSpecForProviderControlPlane#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
   *
   * @schema ClusterSpecForProviderControlPlane#version
   */
  readonly version?: string;

  /**
   * Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
   *
   * @schema ClusterSpecForProviderControlPlane#vmSize
   */
  readonly vmSize?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlane' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlane(obj: ClusterSpecForProviderControlPlane | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'databaseEncryption': obj.databaseEncryption?.map(y => toJson_ClusterSpecForProviderControlPlaneDatabaseEncryption(y)),
    'mainVolume': obj.mainVolume?.map(y => toJson_ClusterSpecForProviderControlPlaneMainVolume(y)),
    'proxyConfig': obj.proxyConfig?.map(y => toJson_ClusterSpecForProviderControlPlaneProxyConfig(y)),
    'replicaPlacements': obj.replicaPlacements?.map(y => toJson_ClusterSpecForProviderControlPlaneReplicaPlacements(y)),
    'rootVolume': obj.rootVolume?.map(y => toJson_ClusterSpecForProviderControlPlaneRootVolume(y)),
    'sshConfig': obj.sshConfig?.map(y => toJson_ClusterSpecForProviderControlPlaneSshConfig(y)),
    'subnetId': obj.subnetId,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'version': obj.version,
    'vmSize': obj.vmSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderFleet
 */
export interface ClusterSpecForProviderFleet {
  /**
   * The number of the Fleet host project where this cluster will be registered.
   *
   * @schema ClusterSpecForProviderFleet#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderFleet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderFleet(obj: ClusterSpecForProviderFleet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderNetworking
 */
export interface ClusterSpecForProviderNetworking {
  /**
   * The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
   *
   * @schema ClusterSpecForProviderNetworking#podAddressCidrBlocks
   */
  readonly podAddressCidrBlocks?: string[];

  /**
   * The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
   *
   * @schema ClusterSpecForProviderNetworking#serviceAddressCidrBlocks
   */
  readonly serviceAddressCidrBlocks?: string[];

  /**
   * The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/_/resourceGroups/_/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
   *
   * @schema ClusterSpecForProviderNetworking#virtualNetworkId
   */
  readonly virtualNetworkId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderNetworking' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderNetworking(obj: ClusterSpecForProviderNetworking | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAddressCidrBlocks': obj.podAddressCidrBlocks?.map(y => y),
    'serviceAddressCidrBlocks': obj.serviceAddressCidrBlocks?.map(y => y),
    'virtualNetworkId': obj.virtualNetworkId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderAuthorization
 */
export interface ClusterSpecInitProviderAuthorization {
  /**
   * Users that can perform operations as a cluster admin. A new ClusterRoleBinding will be created to grant the cluster-admin ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
   *
   * @schema ClusterSpecInitProviderAuthorization#adminUsers
   */
  readonly adminUsers?: ClusterSpecInitProviderAuthorizationAdminUsers[];

}

/**
 * Converts an object of type 'ClusterSpecInitProviderAuthorization' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderAuthorization(obj: ClusterSpecInitProviderAuthorization | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'adminUsers': obj.adminUsers?.map(y => toJson_ClusterSpecInitProviderAuthorizationAdminUsers(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderAzureServicesAuthentication
 */
export interface ClusterSpecInitProviderAzureServicesAuthentication {
  /**
   * The Azure Active Directory Application ID for Authentication configuration.
   *
   * @schema ClusterSpecInitProviderAzureServicesAuthentication#applicationId
   */
  readonly applicationId?: string;

  /**
   * The Azure Active Directory Tenant ID for Authentication configuration.
   *
   * @schema ClusterSpecInitProviderAzureServicesAuthentication#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderAzureServicesAuthentication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderAzureServicesAuthentication(obj: ClusterSpecInitProviderAzureServicesAuthentication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationId': obj.applicationId,
    'tenantId': obj.tenantId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlane
 */
export interface ClusterSpecInitProviderControlPlane {
  /**
   * Optional. Configuration related to application-layer secrets encryption.
   *
   * @schema ClusterSpecInitProviderControlPlane#databaseEncryption
   */
  readonly databaseEncryption?: ClusterSpecInitProviderControlPlaneDatabaseEncryption[];

  /**
   * Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster's etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
   *
   * @schema ClusterSpecInitProviderControlPlane#mainVolume
   */
  readonly mainVolume?: ClusterSpecInitProviderControlPlaneMainVolume[];

  /**
   * Proxy configuration for outbound HTTP(S) traffic.
   *
   * @schema ClusterSpecInitProviderControlPlane#proxyConfig
   */
  readonly proxyConfig?: ClusterSpecInitProviderControlPlaneProxyConfig[];

  /**
   * Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
   *
   * @schema ClusterSpecInitProviderControlPlane#replicaPlacements
   */
  readonly replicaPlacements?: ClusterSpecInitProviderControlPlaneReplicaPlacements[];

  /**
   * Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
   *
   * @schema ClusterSpecInitProviderControlPlane#rootVolume
   */
  readonly rootVolume?: ClusterSpecInitProviderControlPlaneRootVolume[];

  /**
   * SSH configuration for how to access the underlying control plane machines.
   *
   * @schema ClusterSpecInitProviderControlPlane#sshConfig
   */
  readonly sshConfig?: ClusterSpecInitProviderControlPlaneSshConfig[];

  /**
   * The ARM ID of the subnet where the control plane VMs are deployed. Example: /subscriptions//resourceGroups//providers/Microsoft.Network/virtualNetworks//subnets/default.
   *
   * @schema ClusterSpecInitProviderControlPlane#subnetId
   */
  readonly subnetId?: string;

  /**
   * Optional. A set of tags to apply to all underlying control plane Azure resources.
   *
   * @schema ClusterSpecInitProviderControlPlane#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The Kubernetes version to run on control plane replicas (e.g. 1.19.10-gke.1000). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
   *
   * @schema ClusterSpecInitProviderControlPlane#version
   */
  readonly version?: string;

  /**
   * Optional. The Azure VM size name. Example: Standard_DS2_v2. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to Standard_DS2_v2.
   *
   * @schema ClusterSpecInitProviderControlPlane#vmSize
   */
  readonly vmSize?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlane' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlane(obj: ClusterSpecInitProviderControlPlane | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'databaseEncryption': obj.databaseEncryption?.map(y => toJson_ClusterSpecInitProviderControlPlaneDatabaseEncryption(y)),
    'mainVolume': obj.mainVolume?.map(y => toJson_ClusterSpecInitProviderControlPlaneMainVolume(y)),
    'proxyConfig': obj.proxyConfig?.map(y => toJson_ClusterSpecInitProviderControlPlaneProxyConfig(y)),
    'replicaPlacements': obj.replicaPlacements?.map(y => toJson_ClusterSpecInitProviderControlPlaneReplicaPlacements(y)),
    'rootVolume': obj.rootVolume?.map(y => toJson_ClusterSpecInitProviderControlPlaneRootVolume(y)),
    'sshConfig': obj.sshConfig?.map(y => toJson_ClusterSpecInitProviderControlPlaneSshConfig(y)),
    'subnetId': obj.subnetId,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'version': obj.version,
    'vmSize': obj.vmSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderFleet
 */
export interface ClusterSpecInitProviderFleet {
  /**
   * The number of the Fleet host project where this cluster will be registered.
   *
   * @schema ClusterSpecInitProviderFleet#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderFleet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderFleet(obj: ClusterSpecInitProviderFleet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderNetworking
 */
export interface ClusterSpecInitProviderNetworking {
  /**
   * The IP address range of the pods in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All pods in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.
   *
   * @schema ClusterSpecInitProviderNetworking#podAddressCidrBlocks
   */
  readonly podAddressCidrBlocks?: string[];

  /**
   * The IP address range for services in this cluster, in CIDR notation (e.g. 10.96.0.0/14). All services in the cluster get assigned a unique RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creating a cluster.
   *
   * @schema ClusterSpecInitProviderNetworking#serviceAddressCidrBlocks
   */
  readonly serviceAddressCidrBlocks?: string[];

  /**
   * The Azure Resource Manager (ARM) ID of the VNet associated with your cluster. All components in the cluster (i.e. control plane and node pools) run on a single VNet. Example: /subscriptions/_/resourceGroups/_/providers/Microsoft.Network/virtualNetworks/* This field cannot be changed after creation.
   *
   * @schema ClusterSpecInitProviderNetworking#virtualNetworkId
   */
  readonly virtualNetworkId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderNetworking' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderNetworking(obj: ClusterSpecInitProviderNetworking | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAddressCidrBlocks': obj.podAddressCidrBlocks?.map(y => y),
    'serviceAddressCidrBlocks': obj.serviceAddressCidrBlocks?.map(y => y),
    'virtualNetworkId': obj.virtualNetworkId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecProviderConfigRefPolicy
 */
export interface ClusterSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecProviderConfigRefPolicy(obj: ClusterSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRef
 */
export interface ClusterSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ClusterSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToConfigRef(obj: ClusterSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ClusterSpecPublishConnectionDetailsToMetadata
 */
export interface ClusterSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ClusterSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToMetadata(obj: ClusterSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderAuthorizationAdminUsers
 */
export interface ClusterSpecForProviderAuthorizationAdminUsers {
  /**
   * The name of the user, e.g. my-gcp-id@gmail.com.
   *
   * @schema ClusterSpecForProviderAuthorizationAdminUsers#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderAuthorizationAdminUsers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderAuthorizationAdminUsers(obj: ClusterSpecForProviderAuthorizationAdminUsers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneDatabaseEncryption
 */
export interface ClusterSpecForProviderControlPlaneDatabaseEncryption {
  /**
   * The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
   *
   * @schema ClusterSpecForProviderControlPlaneDatabaseEncryption#keyId
   */
  readonly keyId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneDatabaseEncryption' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneDatabaseEncryption(obj: ClusterSpecForProviderControlPlaneDatabaseEncryption | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyId': obj.keyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneMainVolume
 */
export interface ClusterSpecForProviderControlPlaneMainVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema ClusterSpecForProviderControlPlaneMainVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneMainVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneMainVolume(obj: ClusterSpecForProviderControlPlaneMainVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneProxyConfig
 */
export interface ClusterSpecForProviderControlPlaneProxyConfig {
  /**
   * The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/_/resourceGroups/*
   *
   * @schema ClusterSpecForProviderControlPlaneProxyConfig#resourceGroupId
   */
  readonly resourceGroupId?: string;

  /**
   * The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
   *
   * @schema ClusterSpecForProviderControlPlaneProxyConfig#secretId
   */
  readonly secretId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneProxyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneProxyConfig(obj: ClusterSpecForProviderControlPlaneProxyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceGroupId': obj.resourceGroupId,
    'secretId': obj.secretId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneReplicaPlacements
 */
export interface ClusterSpecForProviderControlPlaneReplicaPlacements {
  /**
   * For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
   *
   * @schema ClusterSpecForProviderControlPlaneReplicaPlacements#azureAvailabilityZone
   */
  readonly azureAvailabilityZone?: string;

  /**
   * For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
   *
   * @schema ClusterSpecForProviderControlPlaneReplicaPlacements#subnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneReplicaPlacements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneReplicaPlacements(obj: ClusterSpecForProviderControlPlaneReplicaPlacements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azureAvailabilityZone': obj.azureAvailabilityZone,
    'subnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneRootVolume
 */
export interface ClusterSpecForProviderControlPlaneRootVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema ClusterSpecForProviderControlPlaneRootVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneRootVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneRootVolume(obj: ClusterSpecForProviderControlPlaneRootVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecForProviderControlPlaneSshConfig
 */
export interface ClusterSpecForProviderControlPlaneSshConfig {
  /**
   * The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
   *
   * @schema ClusterSpecForProviderControlPlaneSshConfig#authorizedKey
   */
  readonly authorizedKey?: string;

}

/**
 * Converts an object of type 'ClusterSpecForProviderControlPlaneSshConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecForProviderControlPlaneSshConfig(obj: ClusterSpecForProviderControlPlaneSshConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizedKey': obj.authorizedKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderAuthorizationAdminUsers
 */
export interface ClusterSpecInitProviderAuthorizationAdminUsers {
  /**
   * The name of the user, e.g. my-gcp-id@gmail.com.
   *
   * @schema ClusterSpecInitProviderAuthorizationAdminUsers#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderAuthorizationAdminUsers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderAuthorizationAdminUsers(obj: ClusterSpecInitProviderAuthorizationAdminUsers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneDatabaseEncryption
 */
export interface ClusterSpecInitProviderControlPlaneDatabaseEncryption {
  /**
   * The ARM ID of the Azure Key Vault key to encrypt / decrypt data. For example: /subscriptions/<subscription-id>/resourceGroups/<resource-group-id>/providers/Microsoft.KeyVault/vaults/<key-vault-id>/keys/<key-name> Encryption will always take the latest version of the key and hence specific version is not supported.
   *
   * @schema ClusterSpecInitProviderControlPlaneDatabaseEncryption#keyId
   */
  readonly keyId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneDatabaseEncryption' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneDatabaseEncryption(obj: ClusterSpecInitProviderControlPlaneDatabaseEncryption | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'keyId': obj.keyId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneMainVolume
 */
export interface ClusterSpecInitProviderControlPlaneMainVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema ClusterSpecInitProviderControlPlaneMainVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneMainVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneMainVolume(obj: ClusterSpecInitProviderControlPlaneMainVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneProxyConfig
 */
export interface ClusterSpecInitProviderControlPlaneProxyConfig {
  /**
   * The ARM ID of the resource group where the cluster resources are deployed. For example: /subscriptions/_/resourceGroups/*
   *
   * @schema ClusterSpecInitProviderControlPlaneProxyConfig#resourceGroupId
   */
  readonly resourceGroupId?: string;

  /**
   * The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
   *
   * @schema ClusterSpecInitProviderControlPlaneProxyConfig#secretId
   */
  readonly secretId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneProxyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneProxyConfig(obj: ClusterSpecInitProviderControlPlaneProxyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceGroupId': obj.resourceGroupId,
    'secretId': obj.secretId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneReplicaPlacements
 */
export interface ClusterSpecInitProviderControlPlaneReplicaPlacements {
  /**
   * For a given replica, the Azure availability zone where to provision the control plane VM and the ETCD disk.
   *
   * @schema ClusterSpecInitProviderControlPlaneReplicaPlacements#azureAvailabilityZone
   */
  readonly azureAvailabilityZone?: string;

  /**
   * For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it's a subnet under the virtual network in the cluster configuration.
   *
   * @schema ClusterSpecInitProviderControlPlaneReplicaPlacements#subnetId
   */
  readonly subnetId?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneReplicaPlacements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneReplicaPlacements(obj: ClusterSpecInitProviderControlPlaneReplicaPlacements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'azureAvailabilityZone': obj.azureAvailabilityZone,
    'subnetId': obj.subnetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneRootVolume
 */
export interface ClusterSpecInitProviderControlPlaneRootVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema ClusterSpecInitProviderControlPlaneRootVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneRootVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneRootVolume(obj: ClusterSpecInitProviderControlPlaneRootVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ClusterSpecInitProviderControlPlaneSshConfig
 */
export interface ClusterSpecInitProviderControlPlaneSshConfig {
  /**
   * The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
   *
   * @schema ClusterSpecInitProviderControlPlaneSshConfig#authorizedKey
   */
  readonly authorizedKey?: string;

}

/**
 * Converts an object of type 'ClusterSpecInitProviderControlPlaneSshConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecInitProviderControlPlaneSshConfig(obj: ClusterSpecInitProviderControlPlaneSshConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizedKey': obj.authorizedKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecProviderConfigRefPolicyResolution
 */
export enum ClusterSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecProviderConfigRefPolicyResolve
 */
export enum ClusterSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ClusterSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ClusterSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecPublishConnectionDetailsToConfigRefPolicy(obj: ClusterSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ClusterSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * NodePool is the Schema for the NodePools API. An Anthos node pool running on Azure.
 *
 * @schema NodePool
 */
export class NodePool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "NodePool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'containerazure.gcp.upbound.io/v1beta1',
    kind: 'NodePool',
  }

  /**
   * Renders a Kubernetes manifest for "NodePool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: NodePoolProps): any {
    return {
      ...NodePool.GVK,
      ...toJson_NodePoolProps(props),
    };
  }

  /**
   * Defines a "NodePool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NodePoolProps) {
    super(scope, id, {
      ...NodePool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...NodePool.GVK,
      ...toJson_NodePoolProps(resolved),
    };
  }
}

/**
 * NodePool is the Schema for the NodePools API. An Anthos node pool running on Azure.
 *
 * @schema NodePool
 */
export interface NodePoolProps {
  /**
   * @schema NodePool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * NodePoolSpec defines the desired state of NodePool
   *
   * @schema NodePool#spec
   */
  readonly spec: NodePoolSpec;

}

/**
 * Converts an object of type 'NodePoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolProps(obj: NodePoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_NodePoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodePoolSpec defines the desired state of NodePool
 *
 * @schema NodePoolSpec
 */
export interface NodePoolSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema NodePoolSpec#deletionPolicy
   */
  readonly deletionPolicy?: NodePoolSpecDeletionPolicy;

  /**
   * @schema NodePoolSpec#forProvider
   */
  readonly forProvider: NodePoolSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema NodePoolSpec#initProvider
   */
  readonly initProvider?: NodePoolSpecInitProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema NodePoolSpec#managementPolicies
   */
  readonly managementPolicies?: NodePoolSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NodePoolSpec#providerConfigRef
   */
  readonly providerConfigRef?: NodePoolSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NodePoolSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: NodePoolSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema NodePoolSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NodePoolSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'NodePoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpec(obj: NodePoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_NodePoolSpecForProvider(obj.forProvider),
    'initProvider': toJson_NodePoolSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_NodePoolSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_NodePoolSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_NodePoolSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema NodePoolSpecDeletionPolicy
 */
export enum NodePoolSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema NodePoolSpecForProvider
 */
export interface NodePoolSpecForProvider {
  /**
   * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   *
   * @schema NodePoolSpecForProvider#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Autoscaler configuration for this node pool.
   *
   * @schema NodePoolSpecForProvider#autoscaling
   */
  readonly autoscaling?: NodePoolSpecForProviderAutoscaling[];

  /**
   * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to 1.
   *
   * @schema NodePoolSpecForProvider#azureAvailabilityZone
   */
  readonly azureAvailabilityZone?: string;

  /**
   * The azureCluster for the resource
   *
   * @schema NodePoolSpecForProvider#cluster
   */
  readonly cluster?: string;

  /**
   * Reference to a Cluster to populate cluster.
   *
   * @schema NodePoolSpecForProvider#clusterRef
   */
  readonly clusterRef?: NodePoolSpecForProviderClusterRef;

  /**
   * Selector for a Cluster to populate cluster.
   *
   * @schema NodePoolSpecForProvider#clusterSelector
   */
  readonly clusterSelector?: NodePoolSpecForProviderClusterSelector;

  /**
   * The node configuration of the node pool.
   *
   * @schema NodePoolSpecForProvider#config
   */
  readonly config?: NodePoolSpecForProviderConfig[];

  /**
   * The location for the resource
   *
   * @schema NodePoolSpecForProvider#location
   */
  readonly location: string;

  /**
   * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
   *
   * @schema NodePoolSpecForProvider#maxPodsConstraint
   */
  readonly maxPodsConstraint?: NodePoolSpecForProviderMaxPodsConstraint[];

  /**
   * The project for the resource
   *
   * @schema NodePoolSpecForProvider#project
   */
  readonly project?: string;

  /**
   * The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
   *
   * @schema NodePoolSpecForProvider#subnetId
   */
  readonly subnetId?: string;

  /**
   * The Kubernetes version (e.g. 1.19.10-gke.1000) running on this node pool.
   *
   * @schema NodePoolSpecForProvider#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProvider(obj: NodePoolSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'autoscaling': obj.autoscaling?.map(y => toJson_NodePoolSpecForProviderAutoscaling(y)),
    'azureAvailabilityZone': obj.azureAvailabilityZone,
    'cluster': obj.cluster,
    'clusterRef': toJson_NodePoolSpecForProviderClusterRef(obj.clusterRef),
    'clusterSelector': toJson_NodePoolSpecForProviderClusterSelector(obj.clusterSelector),
    'config': obj.config?.map(y => toJson_NodePoolSpecForProviderConfig(y)),
    'location': obj.location,
    'maxPodsConstraint': obj.maxPodsConstraint?.map(y => toJson_NodePoolSpecForProviderMaxPodsConstraint(y)),
    'project': obj.project,
    'subnetId': obj.subnetId,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema NodePoolSpecInitProvider
 */
export interface NodePoolSpecInitProvider {
  /**
   * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix  and name , separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
   *
   * @schema NodePoolSpecInitProvider#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Autoscaler configuration for this node pool.
   *
   * @schema NodePoolSpecInitProvider#autoscaling
   */
  readonly autoscaling?: NodePoolSpecInitProviderAutoscaling[];

  /**
   * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to 1.
   *
   * @schema NodePoolSpecInitProvider#azureAvailabilityZone
   */
  readonly azureAvailabilityZone?: string;

  /**
   * The node configuration of the node pool.
   *
   * @schema NodePoolSpecInitProvider#config
   */
  readonly config?: NodePoolSpecInitProviderConfig[];

  /**
   * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
   *
   * @schema NodePoolSpecInitProvider#maxPodsConstraint
   */
  readonly maxPodsConstraint?: NodePoolSpecInitProviderMaxPodsConstraint[];

  /**
   * The project for the resource
   *
   * @schema NodePoolSpecInitProvider#project
   */
  readonly project?: string;

  /**
   * The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
   *
   * @schema NodePoolSpecInitProvider#subnetId
   */
  readonly subnetId?: string;

  /**
   * The Kubernetes version (e.g. 1.19.10-gke.1000) running on this node pool.
   *
   * @schema NodePoolSpecInitProvider#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'NodePoolSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProvider(obj: NodePoolSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'autoscaling': obj.autoscaling?.map(y => toJson_NodePoolSpecInitProviderAutoscaling(y)),
    'azureAvailabilityZone': obj.azureAvailabilityZone,
    'config': obj.config?.map(y => toJson_NodePoolSpecInitProviderConfig(y)),
    'maxPodsConstraint': obj.maxPodsConstraint?.map(y => toJson_NodePoolSpecInitProviderMaxPodsConstraint(y)),
    'project': obj.project,
    'subnetId': obj.subnetId,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema NodePoolSpecManagementPolicies
 */
export enum NodePoolSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NodePoolSpecProviderConfigRef
 */
export interface NodePoolSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecProviderConfigRef#policy
   */
  readonly policy?: NodePoolSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderConfigRef(obj: NodePoolSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NodePoolSpecPublishConnectionDetailsTo
 */
export interface NodePoolSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: NodePoolSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: NodePoolSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema NodePoolSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsTo(obj: NodePoolSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_NodePoolSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_NodePoolSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema NodePoolSpecWriteConnectionSecretToRef
 */
export interface NodePoolSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NodePoolSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NodePoolSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'NodePoolSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecWriteConnectionSecretToRef(obj: NodePoolSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderAutoscaling
 */
export interface NodePoolSpecForProviderAutoscaling {
  /**
   * Maximum number of nodes in the node pool. Must be >= min_node_count.
   *
   * @schema NodePoolSpecForProviderAutoscaling#maxNodeCount
   */
  readonly maxNodeCount?: number;

  /**
   * Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
   *
   * @schema NodePoolSpecForProviderAutoscaling#minNodeCount
   */
  readonly minNodeCount?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderAutoscaling(obj: NodePoolSpecForProviderAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxNodeCount': obj.maxNodeCount,
    'minNodeCount': obj.minNodeCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Cluster to populate cluster.
 *
 * @schema NodePoolSpecForProviderClusterRef
 */
export interface NodePoolSpecForProviderClusterRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecForProviderClusterRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecForProviderClusterRef#policy
   */
  readonly policy?: NodePoolSpecForProviderClusterRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterRef(obj: NodePoolSpecForProviderClusterRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecForProviderClusterRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Cluster to populate cluster.
 *
 * @schema NodePoolSpecForProviderClusterSelector
 */
export interface NodePoolSpecForProviderClusterSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NodePoolSpecForProviderClusterSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NodePoolSpecForProviderClusterSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema NodePoolSpecForProviderClusterSelector#policy
   */
  readonly policy?: NodePoolSpecForProviderClusterSelectorPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterSelector(obj: NodePoolSpecForProviderClusterSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_NodePoolSpecForProviderClusterSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderConfig
 */
export interface NodePoolSpecForProviderConfig {
  /**
   * Proxy configuration for outbound HTTP(S) traffic.
   *
   * @schema NodePoolSpecForProviderConfig#proxyConfig
   */
  readonly proxyConfig?: NodePoolSpecForProviderConfigProxyConfig[];

  /**
   * Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
   *
   * @schema NodePoolSpecForProviderConfig#rootVolume
   */
  readonly rootVolume?: NodePoolSpecForProviderConfigRootVolume[];

  /**
   * SSH configuration for how to access the node pool machines.
   *
   * @schema NodePoolSpecForProviderConfig#sshConfig
   */
  readonly sshConfig?: NodePoolSpecForProviderConfigSshConfig[];

  /**
   * Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
   *
   * @schema NodePoolSpecForProviderConfig#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Optional. The Azure VM size name. Example: Standard_DS2_v2. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to Standard_DS2_v2.
   *
   * @schema NodePoolSpecForProviderConfig#vmSize
   */
  readonly vmSize?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderConfig(obj: NodePoolSpecForProviderConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'proxyConfig': obj.proxyConfig?.map(y => toJson_NodePoolSpecForProviderConfigProxyConfig(y)),
    'rootVolume': obj.rootVolume?.map(y => toJson_NodePoolSpecForProviderConfigRootVolume(y)),
    'sshConfig': obj.sshConfig?.map(y => toJson_NodePoolSpecForProviderConfigSshConfig(y)),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'vmSize': obj.vmSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderMaxPodsConstraint
 */
export interface NodePoolSpecForProviderMaxPodsConstraint {
  /**
   * The maximum number of pods to schedule on a single node.
   *
   * @schema NodePoolSpecForProviderMaxPodsConstraint#maxPodsPerNode
   */
  readonly maxPodsPerNode?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderMaxPodsConstraint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderMaxPodsConstraint(obj: NodePoolSpecForProviderMaxPodsConstraint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxPodsPerNode': obj.maxPodsPerNode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderAutoscaling
 */
export interface NodePoolSpecInitProviderAutoscaling {
  /**
   * Maximum number of nodes in the node pool. Must be >= min_node_count.
   *
   * @schema NodePoolSpecInitProviderAutoscaling#maxNodeCount
   */
  readonly maxNodeCount?: number;

  /**
   * Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
   *
   * @schema NodePoolSpecInitProviderAutoscaling#minNodeCount
   */
  readonly minNodeCount?: number;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderAutoscaling' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderAutoscaling(obj: NodePoolSpecInitProviderAutoscaling | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxNodeCount': obj.maxNodeCount,
    'minNodeCount': obj.minNodeCount,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderConfig
 */
export interface NodePoolSpecInitProviderConfig {
  /**
   * Proxy configuration for outbound HTTP(S) traffic.
   *
   * @schema NodePoolSpecInitProviderConfig#proxyConfig
   */
  readonly proxyConfig?: NodePoolSpecInitProviderConfigProxyConfig[];

  /**
   * Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
   *
   * @schema NodePoolSpecInitProviderConfig#rootVolume
   */
  readonly rootVolume?: NodePoolSpecInitProviderConfigRootVolume[];

  /**
   * SSH configuration for how to access the node pool machines.
   *
   * @schema NodePoolSpecInitProviderConfig#sshConfig
   */
  readonly sshConfig?: NodePoolSpecInitProviderConfigSshConfig[];

  /**
   * Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
   *
   * @schema NodePoolSpecInitProviderConfig#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * Optional. The Azure VM size name. Example: Standard_DS2_v2. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to Standard_DS2_v2.
   *
   * @schema NodePoolSpecInitProviderConfig#vmSize
   */
  readonly vmSize?: string;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderConfig(obj: NodePoolSpecInitProviderConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'proxyConfig': obj.proxyConfig?.map(y => toJson_NodePoolSpecInitProviderConfigProxyConfig(y)),
    'rootVolume': obj.rootVolume?.map(y => toJson_NodePoolSpecInitProviderConfigRootVolume(y)),
    'sshConfig': obj.sshConfig?.map(y => toJson_NodePoolSpecInitProviderConfigSshConfig(y)),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'vmSize': obj.vmSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderMaxPodsConstraint
 */
export interface NodePoolSpecInitProviderMaxPodsConstraint {
  /**
   * The maximum number of pods to schedule on a single node.
   *
   * @schema NodePoolSpecInitProviderMaxPodsConstraint#maxPodsPerNode
   */
  readonly maxPodsPerNode?: number;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderMaxPodsConstraint' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderMaxPodsConstraint(obj: NodePoolSpecInitProviderMaxPodsConstraint | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'maxPodsPerNode': obj.maxPodsPerNode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecProviderConfigRefPolicy
 */
export interface NodePoolSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecProviderConfigRefPolicy(obj: NodePoolSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRef
 */
export interface NodePoolSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToConfigRef(obj: NodePoolSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NodePoolSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToMetadata
 */
export interface NodePoolSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToMetadata(obj: NodePoolSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicy
 */
export interface NodePoolSpecForProviderClusterRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderClusterRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderClusterRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderClusterRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderClusterRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterRefPolicy(obj: NodePoolSpecForProviderClusterRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicy
 */
export interface NodePoolSpecForProviderClusterSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecForProviderClusterSelectorPolicy#resolution
   */
  readonly resolution?: NodePoolSpecForProviderClusterSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecForProviderClusterSelectorPolicy#resolve
   */
  readonly resolve?: NodePoolSpecForProviderClusterSelectorPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderClusterSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderClusterSelectorPolicy(obj: NodePoolSpecForProviderClusterSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderConfigProxyConfig
 */
export interface NodePoolSpecForProviderConfigProxyConfig {
  /**
   * The ARM ID the of the resource group containing proxy keyvault. Resource group ids are formatted as /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>
   *
   * @schema NodePoolSpecForProviderConfigProxyConfig#resourceGroupId
   */
  readonly resourceGroupId?: string;

  /**
   * The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
   *
   * @schema NodePoolSpecForProviderConfigProxyConfig#secretId
   */
  readonly secretId?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderConfigProxyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderConfigProxyConfig(obj: NodePoolSpecForProviderConfigProxyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceGroupId': obj.resourceGroupId,
    'secretId': obj.secretId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderConfigRootVolume
 */
export interface NodePoolSpecForProviderConfigRootVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema NodePoolSpecForProviderConfigRootVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderConfigRootVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderConfigRootVolume(obj: NodePoolSpecForProviderConfigRootVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecForProviderConfigSshConfig
 */
export interface NodePoolSpecForProviderConfigSshConfig {
  /**
   * The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
   *
   * @schema NodePoolSpecForProviderConfigSshConfig#authorizedKey
   */
  readonly authorizedKey?: string;

}

/**
 * Converts an object of type 'NodePoolSpecForProviderConfigSshConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecForProviderConfigSshConfig(obj: NodePoolSpecForProviderConfigSshConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizedKey': obj.authorizedKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderConfigProxyConfig
 */
export interface NodePoolSpecInitProviderConfigProxyConfig {
  /**
   * The ARM ID the of the resource group containing proxy keyvault. Resource group ids are formatted as /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>
   *
   * @schema NodePoolSpecInitProviderConfigProxyConfig#resourceGroupId
   */
  readonly resourceGroupId?: string;

  /**
   * The URL the of the proxy setting secret with its version. Secret ids are formatted as https:<key-vault-name>.vault.azure.net/secrets/<secret-name>/<secret-version>.
   *
   * @schema NodePoolSpecInitProviderConfigProxyConfig#secretId
   */
  readonly secretId?: string;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderConfigProxyConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderConfigProxyConfig(obj: NodePoolSpecInitProviderConfigProxyConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceGroupId': obj.resourceGroupId,
    'secretId': obj.secretId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderConfigRootVolume
 */
export interface NodePoolSpecInitProviderConfigRootVolume {
  /**
   * Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
   *
   * @schema NodePoolSpecInitProviderConfigRootVolume#sizeGib
   */
  readonly sizeGib?: number;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderConfigRootVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderConfigRootVolume(obj: NodePoolSpecInitProviderConfigRootVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'sizeGib': obj.sizeGib,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema NodePoolSpecInitProviderConfigSshConfig
 */
export interface NodePoolSpecInitProviderConfigSshConfig {
  /**
   * The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
   *
   * @schema NodePoolSpecInitProviderConfigSshConfig#authorizedKey
   */
  readonly authorizedKey?: string;

}

/**
 * Converts an object of type 'NodePoolSpecInitProviderConfigSshConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecInitProviderConfigSshConfig(obj: NodePoolSpecInitProviderConfigSshConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authorizedKey': obj.authorizedKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecProviderConfigRefPolicyResolution
 */
export enum NodePoolSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecProviderConfigRefPolicyResolve
 */
export enum NodePoolSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface NodePoolSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NodePoolSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NodePoolSpecPublishConnectionDetailsToConfigRefPolicy(obj: NodePoolSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicyResolution
 */
export enum NodePoolSpecForProviderClusterRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderClusterRefPolicyResolve
 */
export enum NodePoolSpecForProviderClusterRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicyResolution
 */
export enum NodePoolSpecForProviderClusterSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecForProviderClusterSelectorPolicyResolve
 */
export enum NodePoolSpecForProviderClusterSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum NodePoolSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

