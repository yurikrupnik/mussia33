// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * WorkloadIdentityPool is the Schema for the WorkloadIdentityPools API. Represents a collection of external workload identities.
 *
 * @schema WorkloadIdentityPool
 */
export class WorkloadIdentityPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadIdentityPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.gcp.upbound.io/v1beta1',
    kind: 'WorkloadIdentityPool',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadIdentityPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadIdentityPoolProps): any {
    return {
      ...WorkloadIdentityPool.GVK,
      ...toJson_WorkloadIdentityPoolProps(props),
    };
  }

  /**
   * Defines a "WorkloadIdentityPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadIdentityPoolProps) {
    super(scope, id, {
      ...WorkloadIdentityPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadIdentityPool.GVK,
      ...toJson_WorkloadIdentityPoolProps(resolved),
    };
  }
}

/**
 * WorkloadIdentityPool is the Schema for the WorkloadIdentityPools API. Represents a collection of external workload identities.
 *
 * @schema WorkloadIdentityPool
 */
export interface WorkloadIdentityPoolProps {
  /**
   * @schema WorkloadIdentityPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * WorkloadIdentityPoolSpec defines the desired state of WorkloadIdentityPool
   *
   * @schema WorkloadIdentityPool#spec
   */
  readonly spec: WorkloadIdentityPoolSpec;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProps(obj: WorkloadIdentityPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadIdentityPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadIdentityPoolSpec defines the desired state of WorkloadIdentityPool
 *
 * @schema WorkloadIdentityPoolSpec
 */
export interface WorkloadIdentityPoolSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema WorkloadIdentityPoolSpec#deletionPolicy
   */
  readonly deletionPolicy?: WorkloadIdentityPoolSpecDeletionPolicy;

  /**
   * @schema WorkloadIdentityPoolSpec#forProvider
   */
  readonly forProvider: WorkloadIdentityPoolSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema WorkloadIdentityPoolSpec#providerConfigRef
   */
  readonly providerConfigRef?: WorkloadIdentityPoolSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema WorkloadIdentityPoolSpec#providerRef
   */
  readonly providerRef?: WorkloadIdentityPoolSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema WorkloadIdentityPoolSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: WorkloadIdentityPoolSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema WorkloadIdentityPoolSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: WorkloadIdentityPoolSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpec(obj: WorkloadIdentityPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_WorkloadIdentityPoolSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_WorkloadIdentityPoolSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_WorkloadIdentityPoolSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_WorkloadIdentityPoolSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema WorkloadIdentityPoolSpecDeletionPolicy
 */
export enum WorkloadIdentityPoolSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema WorkloadIdentityPoolSpecForProvider
 */
export interface WorkloadIdentityPoolSpecForProvider {
  /**
   * A description of the pool. Cannot exceed 256 characters.
   *
   * @schema WorkloadIdentityPoolSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.
   *
   * @schema WorkloadIdentityPoolSpecForProvider#disabled
   */
  readonly disabled?: boolean;

  /**
   * A display name for the pool. Cannot exceed 32 characters.
   *
   * @schema WorkloadIdentityPoolSpecForProvider#displayName
   */
  readonly displayName?: string;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema WorkloadIdentityPoolSpecForProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecForProvider(obj: WorkloadIdentityPoolSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema WorkloadIdentityPoolSpecProviderConfigRef
 */
export interface WorkloadIdentityPoolSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolSpecProviderConfigRef#policy
   */
  readonly policy?: WorkloadIdentityPoolSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecProviderConfigRef(obj: WorkloadIdentityPoolSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema WorkloadIdentityPoolSpecProviderRef
 */
export interface WorkloadIdentityPoolSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolSpecProviderRef#policy
   */
  readonly policy?: WorkloadIdentityPoolSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecProviderRef(obj: WorkloadIdentityPoolSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsTo
 */
export interface WorkloadIdentityPoolSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsTo(obj: WorkloadIdentityPoolSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema WorkloadIdentityPoolSpecWriteConnectionSecretToRef
 */
export interface WorkloadIdentityPoolSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema WorkloadIdentityPoolSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema WorkloadIdentityPoolSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecWriteConnectionSecretToRef(obj: WorkloadIdentityPoolSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolSpecProviderConfigRefPolicy
 */
export interface WorkloadIdentityPoolSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecProviderConfigRefPolicy(obj: WorkloadIdentityPoolSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolSpecProviderRefPolicy
 */
export interface WorkloadIdentityPoolSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolSpecProviderRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolSpecProviderRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecProviderRefPolicy(obj: WorkloadIdentityPoolSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef
 */
export interface WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef(obj: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata
 */
export interface WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata(obj: WorkloadIdentityPoolSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolSpecProviderConfigRefPolicyResolution
 */
export enum WorkloadIdentityPoolSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolSpecProviderConfigRefPolicyResolve
 */
export enum WorkloadIdentityPoolSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolSpecProviderRefPolicyResolution
 */
export enum WorkloadIdentityPoolSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolSpecProviderRefPolicyResolve
 */
export enum WorkloadIdentityPoolSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj: WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum WorkloadIdentityPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * WorkloadIdentityPoolProvider is the Schema for the WorkloadIdentityPoolProviders API. A configuration for an external identity provider.
 *
 * @schema WorkloadIdentityPoolProvider
 */
export class WorkloadIdentityPoolProvider extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadIdentityPoolProvider"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'iam.gcp.upbound.io/v1beta1',
    kind: 'WorkloadIdentityPoolProvider',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadIdentityPoolProvider".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadIdentityPoolProviderProps): any {
    return {
      ...WorkloadIdentityPoolProvider.GVK,
      ...toJson_WorkloadIdentityPoolProviderProps(props),
    };
  }

  /**
   * Defines a "WorkloadIdentityPoolProvider" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadIdentityPoolProviderProps) {
    super(scope, id, {
      ...WorkloadIdentityPoolProvider.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadIdentityPoolProvider.GVK,
      ...toJson_WorkloadIdentityPoolProviderProps(resolved),
    };
  }
}

/**
 * WorkloadIdentityPoolProvider is the Schema for the WorkloadIdentityPoolProviders API. A configuration for an external identity provider.
 *
 * @schema WorkloadIdentityPoolProvider
 */
export interface WorkloadIdentityPoolProviderProps {
  /**
   * @schema WorkloadIdentityPoolProvider#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * WorkloadIdentityPoolProviderSpec defines the desired state of WorkloadIdentityPoolProvider
   *
   * @schema WorkloadIdentityPoolProvider#spec
   */
  readonly spec: WorkloadIdentityPoolProviderSpec;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderProps(obj: WorkloadIdentityPoolProviderProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadIdentityPoolProviderSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadIdentityPoolProviderSpec defines the desired state of WorkloadIdentityPoolProvider
 *
 * @schema WorkloadIdentityPoolProviderSpec
 */
export interface WorkloadIdentityPoolProviderSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema WorkloadIdentityPoolProviderSpec#deletionPolicy
   */
  readonly deletionPolicy?: WorkloadIdentityPoolProviderSpecDeletionPolicy;

  /**
   * @schema WorkloadIdentityPoolProviderSpec#forProvider
   */
  readonly forProvider: WorkloadIdentityPoolProviderSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema WorkloadIdentityPoolProviderSpec#providerConfigRef
   */
  readonly providerConfigRef?: WorkloadIdentityPoolProviderSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema WorkloadIdentityPoolProviderSpec#providerRef
   */
  readonly providerRef?: WorkloadIdentityPoolProviderSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema WorkloadIdentityPoolProviderSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema WorkloadIdentityPoolProviderSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpec(obj: WorkloadIdentityPoolProviderSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_WorkloadIdentityPoolProviderSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_WorkloadIdentityPoolProviderSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_WorkloadIdentityPoolProviderSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema WorkloadIdentityPoolProviderSpecDeletionPolicy
 */
export enum WorkloadIdentityPoolProviderSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema WorkloadIdentityPoolProviderSpecForProvider
 */
export interface WorkloadIdentityPoolProviderSpecForProvider {
  /**
   * A Common Expression Language expression, in plain text, to restrict what otherwise valid authentication credentials issued by the provider should not be accepted. The expression must output a boolean representing whether to allow the federation. The following keywords may be referenced in the expressions:
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#attributeCondition
   */
  readonly attributeCondition?: string;

  /**
   * Maps attributes from authentication credentials issued by an external identity provider to Google Cloud attributes, such as subject and segment. Each key must be a string specifying the Google Cloud IAM attribute to map to. The following keys are supported:
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#attributeMapping
   */
  readonly attributeMapping?: { [key: string]: string };

  /**
   * An Amazon Web Services identity provider. Not compatible with the property oidc. Structure is documented below.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#aws
   */
  readonly aws?: WorkloadIdentityPoolProviderSpecForProviderAws[];

  /**
   * A description for the provider. Cannot exceed 256 characters.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Whether the provider is disabled. You cannot use a disabled provider to exchange tokens. However, existing tokens still grant access.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#disabled
   */
  readonly disabled?: boolean;

  /**
   * A display name for the provider. Cannot exceed 32 characters.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#displayName
   */
  readonly displayName?: string;

  /**
   * An OpenId Connect 1.0 identity provider. Not compatible with the property aws. Structure is documented below.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#oidc
   */
  readonly oidc?: WorkloadIdentityPoolProviderSpecForProviderOidc[];

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#project
   */
  readonly project?: string;

  /**
   * The ID used for the pool, which is the final component of the pool resource name. This value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix gcp- is reserved for use by Google, and may not be specified.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#workloadIdentityPoolId
   */
  readonly workloadIdentityPoolId?: string;

  /**
   * Reference to a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#workloadIdentityPoolIdRef
   */
  readonly workloadIdentityPoolIdRef?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef;

  /**
   * Selector for a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProvider#workloadIdentityPoolIdSelector
   */
  readonly workloadIdentityPoolIdSelector?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProvider(obj: WorkloadIdentityPoolProviderSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attributeCondition': obj.attributeCondition,
    'attributeMapping': ((obj.attributeMapping) === undefined) ? undefined : (Object.entries(obj.attributeMapping).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'aws': obj.aws?.map(y => toJson_WorkloadIdentityPoolProviderSpecForProviderAws(y)),
    'description': obj.description,
    'disabled': obj.disabled,
    'displayName': obj.displayName,
    'oidc': obj.oidc?.map(y => toJson_WorkloadIdentityPoolProviderSpecForProviderOidc(y)),
    'project': obj.project,
    'workloadIdentityPoolId': obj.workloadIdentityPoolId,
    'workloadIdentityPoolIdRef': toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef(obj.workloadIdentityPoolIdRef),
    'workloadIdentityPoolIdSelector': toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector(obj.workloadIdentityPoolIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderConfigRef
 */
export interface WorkloadIdentityPoolProviderSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderConfigRef#policy
   */
  readonly policy?: WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecProviderConfigRef(obj: WorkloadIdentityPoolProviderSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderRef
 */
export interface WorkloadIdentityPoolProviderSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderRef#policy
   */
  readonly policy?: WorkloadIdentityPoolProviderSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecProviderRef(obj: WorkloadIdentityPoolProviderSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolProviderSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo
 */
export interface WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo(obj: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef
 */
export interface WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef(obj: WorkloadIdentityPoolProviderSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadIdentityPoolProviderSpecForProviderAws
 */
export interface WorkloadIdentityPoolProviderSpecForProviderAws {
  /**
   * The AWS account ID.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderAws#accountId
   */
  readonly accountId: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderAws' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderAws(obj: WorkloadIdentityPoolProviderSpecForProviderAws | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accountId': obj.accountId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadIdentityPoolProviderSpecForProviderOidc
 */
export interface WorkloadIdentityPoolProviderSpecForProviderOidc {
  /**
   * Acceptable values for the aud field (audience) in the OIDC token. Token exchange requests are rejected if the token audience does not match one of the configured values. Each audience may be at most 256 characters. A maximum of 10 audiences may be configured. If this list is empty, the OIDC token audience must be equal to the full canonical resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix. For example:
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderOidc#allowedAudiences
   */
  readonly allowedAudiences?: string[];

  /**
   * The OIDC issuer URL.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderOidc#issuerUri
   */
  readonly issuerUri: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderOidc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderOidc(obj: WorkloadIdentityPoolProviderSpecForProviderOidc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowedAudiences': obj.allowedAudiences?.map(y => y),
    'issuerUri': obj.issuerUri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef
 */
export interface WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef#policy
   */
  readonly policy?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef(obj: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a WorkloadIdentityPool in iam to populate workloadIdentityPoolId.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector
 */
export interface WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector#policy
   */
  readonly policy?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector(obj: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy
 */
export interface WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy(obj: WorkloadIdentityPoolProviderSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderRefPolicy
 */
export interface WorkloadIdentityPoolProviderSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolProviderSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolProviderSpecProviderRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolProviderSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecProviderRefPolicy(obj: WorkloadIdentityPoolProviderSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef
 */
export interface WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef(obj: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata
 */
export interface WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata(obj: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy
 */
export interface WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy(obj: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy
 */
export interface WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy(obj: WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolution
 */
export enum WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolve
 */
export enum WorkloadIdentityPoolProviderSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderRefPolicyResolution
 */
export enum WorkloadIdentityPoolProviderSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolProviderSpecProviderRefPolicyResolve
 */
export enum WorkloadIdentityPoolProviderSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy(obj: WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolution
 */
export enum WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolve
 */
export enum WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolution
 */
export enum WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolve
 */
export enum WorkloadIdentityPoolProviderSpecForProviderWorkloadIdentityPoolIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum WorkloadIdentityPoolProviderSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

