// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * VoiceConnector is the Schema for the VoiceConnectors API. Enables you to connect your phone system to the telephone network at a substantial cost savings by using SIP trunking.
 *
 * @schema VoiceConnector
 */
export class VoiceConnector extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnector"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnector',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnector".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorProps): any {
    return {
      ...VoiceConnector.GVK,
      ...toJson_VoiceConnectorProps(props),
    };
  }

  /**
   * Defines a "VoiceConnector" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorProps) {
    super(scope, id, {
      ...VoiceConnector.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnector.GVK,
      ...toJson_VoiceConnectorProps(resolved),
    };
  }
}

/**
 * VoiceConnector is the Schema for the VoiceConnectors API. Enables you to connect your phone system to the telephone network at a substantial cost savings by using SIP trunking.
 *
 * @schema VoiceConnector
 */
export interface VoiceConnectorProps {
  /**
   * @schema VoiceConnector#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorSpec defines the desired state of VoiceConnector
   *
   * @schema VoiceConnector#spec
   */
  readonly spec: VoiceConnectorSpec;

}

/**
 * Converts an object of type 'VoiceConnectorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorProps(obj: VoiceConnectorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorSpec defines the desired state of VoiceConnector
 *
 * @schema VoiceConnectorSpec
 */
export interface VoiceConnectorSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorSpec#forProvider
   */
  readonly forProvider: VoiceConnectorSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpec(obj: VoiceConnectorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorSpecDeletionPolicy
 */
export enum VoiceConnectorSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorSpecForProvider
 */
export interface VoiceConnectorSpecForProvider {
  /**
   * The AWS Region in which the Amazon Chime Voice Connector is created. Default value: us-east-1
   *
   * @schema VoiceConnectorSpecForProvider#awsRegion
   */
  readonly awsRegion?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorSpecForProvider#region
   */
  readonly region: string;

  /**
   * When enabled, requires encryption for the Amazon Chime Voice Connector.
   *
   * @schema VoiceConnectorSpecForProvider#requireEncryption
   */
  readonly requireEncryption?: boolean;

}

/**
 * Converts an object of type 'VoiceConnectorSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecForProvider(obj: VoiceConnectorSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsRegion': obj.awsRegion,
    'region': obj.region,
    'requireEncryption': obj.requireEncryption,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorSpecManagementPolicy
 */
export enum VoiceConnectorSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorSpecProviderConfigRef
 */
export interface VoiceConnectorSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecProviderConfigRef(obj: VoiceConnectorSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorSpecProviderRef
 */
export interface VoiceConnectorSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecProviderRef(obj: VoiceConnectorSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecPublishConnectionDetailsTo(obj: VoiceConnectorSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecWriteConnectionSecretToRef(obj: VoiceConnectorSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecProviderConfigRefPolicy(obj: VoiceConnectorSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorSpecProviderRefPolicy
 */
export interface VoiceConnectorSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecProviderRefPolicy(obj: VoiceConnectorSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorGroup is the Schema for the VoiceConnectorGroups API. Creates an Amazon Chime Voice Connector group under the administrator's AWS account.
 *
 * @schema VoiceConnectorGroup
 */
export class VoiceConnectorGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorGroup',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorGroupProps): any {
    return {
      ...VoiceConnectorGroup.GVK,
      ...toJson_VoiceConnectorGroupProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorGroupProps) {
    super(scope, id, {
      ...VoiceConnectorGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorGroup.GVK,
      ...toJson_VoiceConnectorGroupProps(resolved),
    };
  }
}

/**
 * VoiceConnectorGroup is the Schema for the VoiceConnectorGroups API. Creates an Amazon Chime Voice Connector group under the administrator's AWS account.
 *
 * @schema VoiceConnectorGroup
 */
export interface VoiceConnectorGroupProps {
  /**
   * @schema VoiceConnectorGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorGroupSpec defines the desired state of VoiceConnectorGroup
   *
   * @schema VoiceConnectorGroup#spec
   */
  readonly spec: VoiceConnectorGroupSpec;

}

/**
 * Converts an object of type 'VoiceConnectorGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupProps(obj: VoiceConnectorGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorGroupSpec defines the desired state of VoiceConnectorGroup
 *
 * @schema VoiceConnectorGroupSpec
 */
export interface VoiceConnectorGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorGroupSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorGroupSpec#forProvider
   */
  readonly forProvider: VoiceConnectorGroupSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorGroupSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorGroupSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorGroupSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorGroupSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorGroupSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpec(obj: VoiceConnectorGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorGroupSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorGroupSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorGroupSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorGroupSpecDeletionPolicy
 */
export enum VoiceConnectorGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorGroupSpecForProvider
 */
export interface VoiceConnectorGroupSpecForProvider {
  /**
   * The Amazon Chime Voice Connectors to route inbound calls to.
   *
   * @schema VoiceConnectorGroupSpecForProvider#connector
   */
  readonly connector?: VoiceConnectorGroupSpecForProviderConnector[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorGroupSpecForProvider#region
   */
  readonly region: string;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProvider(obj: VoiceConnectorGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connector': obj.connector?.map(y => toJson_VoiceConnectorGroupSpecForProviderConnector(y)),
    'region': obj.region,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorGroupSpecManagementPolicy
 */
export enum VoiceConnectorGroupSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorGroupSpecProviderConfigRef
 */
export interface VoiceConnectorGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorGroupSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecProviderConfigRef(obj: VoiceConnectorGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorGroupSpecProviderRef
 */
export interface VoiceConnectorGroupSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorGroupSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorGroupSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorGroupSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecProviderRef(obj: VoiceConnectorGroupSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorGroupSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecPublishConnectionDetailsTo(obj: VoiceConnectorGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorGroupSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecWriteConnectionSecretToRef(obj: VoiceConnectorGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VoiceConnectorGroupSpecForProviderConnector
 */
export interface VoiceConnectorGroupSpecForProviderConnector {
  /**
   * The priority associated with the Amazon Chime Voice Connector, with 1 being the highest priority. Higher priority Amazon Chime Voice Connectors are attempted first.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnector#priority
   */
  readonly priority: number;

  /**
   * The Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnector#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnector#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnector#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProviderConnector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProviderConnector(obj: VoiceConnectorGroupSpecForProviderConnector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'priority': obj.priority,
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorGroupSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecProviderConfigRefPolicy(obj: VoiceConnectorGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorGroupSpecProviderRefPolicy
 */
export interface VoiceConnectorGroupSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorGroupSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorGroupSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorGroupSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorGroupSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecProviderRefPolicy(obj: VoiceConnectorGroupSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef
 */
export interface VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef(obj: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector
 */
export interface VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector(obj: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorGroupSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorGroupSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorGroupSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorGroupSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorGroupSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorGroupSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy(obj: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorGroupSpecForProviderConnectorVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorLogging is the Schema for the VoiceConnectorLoggings API. Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
 *
 * @schema VoiceConnectorLogging
 */
export class VoiceConnectorLogging extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorLogging"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorLogging',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorLogging".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorLoggingProps): any {
    return {
      ...VoiceConnectorLogging.GVK,
      ...toJson_VoiceConnectorLoggingProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorLogging" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorLoggingProps) {
    super(scope, id, {
      ...VoiceConnectorLogging.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorLogging.GVK,
      ...toJson_VoiceConnectorLoggingProps(resolved),
    };
  }
}

/**
 * VoiceConnectorLogging is the Schema for the VoiceConnectorLoggings API. Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
 *
 * @schema VoiceConnectorLogging
 */
export interface VoiceConnectorLoggingProps {
  /**
   * @schema VoiceConnectorLogging#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorLoggingSpec defines the desired state of VoiceConnectorLogging
   *
   * @schema VoiceConnectorLogging#spec
   */
  readonly spec: VoiceConnectorLoggingSpec;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingProps(obj: VoiceConnectorLoggingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorLoggingSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorLoggingSpec defines the desired state of VoiceConnectorLogging
 *
 * @schema VoiceConnectorLoggingSpec
 */
export interface VoiceConnectorLoggingSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorLoggingSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorLoggingSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorLoggingSpec#forProvider
   */
  readonly forProvider: VoiceConnectorLoggingSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorLoggingSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorLoggingSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorLoggingSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorLoggingSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorLoggingSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorLoggingSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorLoggingSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorLoggingSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorLoggingSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorLoggingSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpec(obj: VoiceConnectorLoggingSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorLoggingSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorLoggingSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorLoggingSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorLoggingSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorLoggingSpecDeletionPolicy
 */
export enum VoiceConnectorLoggingSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorLoggingSpecForProvider
 */
export interface VoiceConnectorLoggingSpecForProvider {
  /**
   * When true, enables logging of detailed media metrics for Voice Connectors to Amazon CloudWatch logs.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#enableMediaMetricLogs
   */
  readonly enableMediaMetricLogs?: boolean;

  /**
   * When true, enables SIP message logs for sending to Amazon CloudWatch Logs.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#enableSipLogs
   */
  readonly enableSipLogs?: boolean;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorLoggingSpecForProvider#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecForProvider(obj: VoiceConnectorLoggingSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enableMediaMetricLogs': obj.enableMediaMetricLogs,
    'enableSipLogs': obj.enableSipLogs,
    'region': obj.region,
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorLoggingSpecManagementPolicy
 */
export enum VoiceConnectorLoggingSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorLoggingSpecProviderConfigRef
 */
export interface VoiceConnectorLoggingSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorLoggingSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorLoggingSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorLoggingSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecProviderConfigRef(obj: VoiceConnectorLoggingSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorLoggingSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorLoggingSpecProviderRef
 */
export interface VoiceConnectorLoggingSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorLoggingSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorLoggingSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorLoggingSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecProviderRef(obj: VoiceConnectorLoggingSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorLoggingSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorLoggingSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsTo(obj: VoiceConnectorLoggingSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorLoggingSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorLoggingSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorLoggingSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorLoggingSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecWriteConnectionSecretToRef(obj: VoiceConnectorLoggingSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef
 */
export interface VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef(obj: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector
 */
export interface VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector(obj: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorLoggingSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorLoggingSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorLoggingSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorLoggingSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorLoggingSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorLoggingSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecProviderConfigRefPolicy(obj: VoiceConnectorLoggingSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorLoggingSpecProviderRefPolicy
 */
export interface VoiceConnectorLoggingSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorLoggingSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorLoggingSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorLoggingSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorLoggingSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecProviderRefPolicy(obj: VoiceConnectorLoggingSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorLoggingSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy(obj: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorLoggingSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorLoggingSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorLoggingSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorLoggingSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorLoggingSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorLoggingSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorLoggingSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorLoggingSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorLoggingSpecForProviderVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorLoggingSpecForProviderVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorLoggingSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorOrigination is the Schema for the VoiceConnectorOriginations API. Enable origination settings to control inbound calling to your SIP infrastructure.
 *
 * @schema VoiceConnectorOrigination
 */
export class VoiceConnectorOrigination extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorOrigination"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorOrigination',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorOrigination".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorOriginationProps): any {
    return {
      ...VoiceConnectorOrigination.GVK,
      ...toJson_VoiceConnectorOriginationProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorOrigination" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorOriginationProps) {
    super(scope, id, {
      ...VoiceConnectorOrigination.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorOrigination.GVK,
      ...toJson_VoiceConnectorOriginationProps(resolved),
    };
  }
}

/**
 * VoiceConnectorOrigination is the Schema for the VoiceConnectorOriginations API. Enable origination settings to control inbound calling to your SIP infrastructure.
 *
 * @schema VoiceConnectorOrigination
 */
export interface VoiceConnectorOriginationProps {
  /**
   * @schema VoiceConnectorOrigination#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorOriginationSpec defines the desired state of VoiceConnectorOrigination
   *
   * @schema VoiceConnectorOrigination#spec
   */
  readonly spec: VoiceConnectorOriginationSpec;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationProps(obj: VoiceConnectorOriginationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorOriginationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorOriginationSpec defines the desired state of VoiceConnectorOrigination
 *
 * @schema VoiceConnectorOriginationSpec
 */
export interface VoiceConnectorOriginationSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorOriginationSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorOriginationSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorOriginationSpec#forProvider
   */
  readonly forProvider: VoiceConnectorOriginationSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorOriginationSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorOriginationSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorOriginationSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorOriginationSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorOriginationSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorOriginationSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorOriginationSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorOriginationSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorOriginationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorOriginationSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpec(obj: VoiceConnectorOriginationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorOriginationSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorOriginationSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorOriginationSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorOriginationSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorOriginationSpecDeletionPolicy
 */
export enum VoiceConnectorOriginationSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorOriginationSpecForProvider
 */
export interface VoiceConnectorOriginationSpecForProvider {
  /**
   * When origination settings are disabled, inbound calls are not enabled for your Amazon Chime Voice Connector.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#disabled
   */
  readonly disabled?: boolean;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#region
   */
  readonly region: string;

  /**
   * Set of call distribution properties defined for your SIP hosts. See route below for more details. Minimum of 1. Maximum of 20.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#route
   */
  readonly route?: VoiceConnectorOriginationSpecForProviderRoute[];

  /**
   * The Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorOriginationSpecForProvider#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProvider(obj: VoiceConnectorOriginationSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disabled': obj.disabled,
    'region': obj.region,
    'route': obj.route?.map(y => toJson_VoiceConnectorOriginationSpecForProviderRoute(y)),
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorOriginationSpecManagementPolicy
 */
export enum VoiceConnectorOriginationSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorOriginationSpecProviderConfigRef
 */
export interface VoiceConnectorOriginationSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorOriginationSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorOriginationSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorOriginationSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecProviderConfigRef(obj: VoiceConnectorOriginationSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorOriginationSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorOriginationSpecProviderRef
 */
export interface VoiceConnectorOriginationSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorOriginationSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorOriginationSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorOriginationSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecProviderRef(obj: VoiceConnectorOriginationSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorOriginationSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorOriginationSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsTo(obj: VoiceConnectorOriginationSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorOriginationSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorOriginationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorOriginationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorOriginationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecWriteConnectionSecretToRef(obj: VoiceConnectorOriginationSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VoiceConnectorOriginationSpecForProviderRoute
 */
export interface VoiceConnectorOriginationSpecForProviderRoute {
  /**
   * The FQDN or IP address to contact for origination traffic.
   *
   * @schema VoiceConnectorOriginationSpecForProviderRoute#host
   */
  readonly host: string;

  /**
   * The designated origination route port. Defaults to 5060.
   *
   * @default 5060.
   * @schema VoiceConnectorOriginationSpecForProviderRoute#port
   */
  readonly port?: number;

  /**
   * The priority associated with the host, with 1 being the highest priority. Higher priority hosts are attempted first.
   *
   * @schema VoiceConnectorOriginationSpecForProviderRoute#priority
   */
  readonly priority: number;

  /**
   * The protocol to use for the origination route. Encryption-enabled Amazon Chime Voice Connectors use TCP protocol by default.
   *
   * @schema VoiceConnectorOriginationSpecForProviderRoute#protocol
   */
  readonly protocol: string;

  /**
   * The weight associated with the host. If hosts are equal in priority, calls are redistributed among them based on their relative weight.
   *
   * @schema VoiceConnectorOriginationSpecForProviderRoute#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProviderRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProviderRoute(obj: VoiceConnectorOriginationSpecForProviderRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port,
    'priority': obj.priority,
    'protocol': obj.protocol,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef
 */
export interface VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef(obj: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector
 */
export interface VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector(obj: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorOriginationSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorOriginationSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorOriginationSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorOriginationSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorOriginationSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorOriginationSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecProviderConfigRefPolicy(obj: VoiceConnectorOriginationSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorOriginationSpecProviderRefPolicy
 */
export interface VoiceConnectorOriginationSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorOriginationSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorOriginationSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorOriginationSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorOriginationSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecProviderRefPolicy(obj: VoiceConnectorOriginationSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorOriginationSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy(obj: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorOriginationSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorOriginationSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorOriginationSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorOriginationSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorOriginationSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorOriginationSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorOriginationSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorOriginationSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorOriginationSpecForProviderVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorOriginationSpecForProviderVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorOriginationSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorStreaming is the Schema for the VoiceConnectorStreamings API. The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
 *
 * @schema VoiceConnectorStreaming
 */
export class VoiceConnectorStreaming extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorStreaming"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorStreaming',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorStreaming".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorStreamingProps): any {
    return {
      ...VoiceConnectorStreaming.GVK,
      ...toJson_VoiceConnectorStreamingProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorStreaming" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorStreamingProps) {
    super(scope, id, {
      ...VoiceConnectorStreaming.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorStreaming.GVK,
      ...toJson_VoiceConnectorStreamingProps(resolved),
    };
  }
}

/**
 * VoiceConnectorStreaming is the Schema for the VoiceConnectorStreamings API. The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
 *
 * @schema VoiceConnectorStreaming
 */
export interface VoiceConnectorStreamingProps {
  /**
   * @schema VoiceConnectorStreaming#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorStreamingSpec defines the desired state of VoiceConnectorStreaming
   *
   * @schema VoiceConnectorStreaming#spec
   */
  readonly spec: VoiceConnectorStreamingSpec;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingProps(obj: VoiceConnectorStreamingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorStreamingSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorStreamingSpec defines the desired state of VoiceConnectorStreaming
 *
 * @schema VoiceConnectorStreamingSpec
 */
export interface VoiceConnectorStreamingSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorStreamingSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorStreamingSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorStreamingSpec#forProvider
   */
  readonly forProvider: VoiceConnectorStreamingSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorStreamingSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorStreamingSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorStreamingSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorStreamingSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorStreamingSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorStreamingSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorStreamingSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorStreamingSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorStreamingSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorStreamingSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpec(obj: VoiceConnectorStreamingSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorStreamingSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorStreamingSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorStreamingSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorStreamingSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorStreamingSpecDeletionPolicy
 */
export enum VoiceConnectorStreamingSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorStreamingSpecForProvider
 */
export interface VoiceConnectorStreamingSpecForProvider {
  /**
   * The retention period, in hours, for the Amazon Kinesis data.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#dataRetention
   */
  readonly dataRetention?: number;

  /**
   * When true, media streaming to Amazon Kinesis is turned off. Default: false
   *
   * @schema VoiceConnectorStreamingSpecForProvider#disabled
   */
  readonly disabled?: boolean;

  /**
   * The media insights configuration. See media_insights_configuration.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#mediaInsightsConfiguration
   */
  readonly mediaInsightsConfiguration?: VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#region
   */
  readonly region: string;

  /**
   * The streaming notification targets. Valid Values: EventBridge | SNS | SQS
   *
   * @schema VoiceConnectorStreamingSpecForProvider#streamingNotificationTargets
   */
  readonly streamingNotificationTargets?: string[];

  /**
   * The Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorStreamingSpecForProvider#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProvider(obj: VoiceConnectorStreamingSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataRetention': obj.dataRetention,
    'disabled': obj.disabled,
    'mediaInsightsConfiguration': obj.mediaInsightsConfiguration?.map(y => toJson_VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration(y)),
    'region': obj.region,
    'streamingNotificationTargets': obj.streamingNotificationTargets?.map(y => y),
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorStreamingSpecManagementPolicy
 */
export enum VoiceConnectorStreamingSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorStreamingSpecProviderConfigRef
 */
export interface VoiceConnectorStreamingSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorStreamingSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorStreamingSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorStreamingSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecProviderConfigRef(obj: VoiceConnectorStreamingSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorStreamingSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorStreamingSpecProviderRef
 */
export interface VoiceConnectorStreamingSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorStreamingSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorStreamingSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorStreamingSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecProviderRef(obj: VoiceConnectorStreamingSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorStreamingSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorStreamingSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsTo(obj: VoiceConnectorStreamingSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorStreamingSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorStreamingSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorStreamingSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorStreamingSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecWriteConnectionSecretToRef(obj: VoiceConnectorStreamingSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration
 */
export interface VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration {
  /**
   * The media insights configuration that will be invoked by the Voice Connector.
   *
   * @schema VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration#configurationArn
   */
  readonly configurationArn?: string;

  /**
   * When true, the media insights configuration is not enabled. Defaults to false.
   *
   * @default false.
   * @schema VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration#disabled
   */
  readonly disabled?: boolean;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration(obj: VoiceConnectorStreamingSpecForProviderMediaInsightsConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configurationArn': obj.configurationArn,
    'disabled': obj.disabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef
 */
export interface VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef(obj: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector
 */
export interface VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector(obj: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorStreamingSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorStreamingSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorStreamingSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorStreamingSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorStreamingSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorStreamingSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecProviderConfigRefPolicy(obj: VoiceConnectorStreamingSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorStreamingSpecProviderRefPolicy
 */
export interface VoiceConnectorStreamingSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorStreamingSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorStreamingSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorStreamingSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorStreamingSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecProviderRefPolicy(obj: VoiceConnectorStreamingSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorStreamingSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy(obj: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorStreamingSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorStreamingSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorStreamingSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorStreamingSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorStreamingSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorStreamingSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorStreamingSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorStreamingSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorStreamingSpecForProviderVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorStreamingSpecForProviderVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorStreamingSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorTermination is the Schema for the VoiceConnectorTerminations API. Enable Termination settings to control outbound calling from your SIP infrastructure.
 *
 * @schema VoiceConnectorTermination
 */
export class VoiceConnectorTermination extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorTermination"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorTermination',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorTermination".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorTerminationProps): any {
    return {
      ...VoiceConnectorTermination.GVK,
      ...toJson_VoiceConnectorTerminationProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorTermination" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorTerminationProps) {
    super(scope, id, {
      ...VoiceConnectorTermination.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorTermination.GVK,
      ...toJson_VoiceConnectorTerminationProps(resolved),
    };
  }
}

/**
 * VoiceConnectorTermination is the Schema for the VoiceConnectorTerminations API. Enable Termination settings to control outbound calling from your SIP infrastructure.
 *
 * @schema VoiceConnectorTermination
 */
export interface VoiceConnectorTerminationProps {
  /**
   * @schema VoiceConnectorTermination#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorTerminationSpec defines the desired state of VoiceConnectorTermination
   *
   * @schema VoiceConnectorTermination#spec
   */
  readonly spec: VoiceConnectorTerminationSpec;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationProps(obj: VoiceConnectorTerminationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorTerminationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorTerminationSpec defines the desired state of VoiceConnectorTermination
 *
 * @schema VoiceConnectorTerminationSpec
 */
export interface VoiceConnectorTerminationSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorTerminationSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorTerminationSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorTerminationSpec#forProvider
   */
  readonly forProvider: VoiceConnectorTerminationSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorTerminationSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorTerminationSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorTerminationSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorTerminationSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorTerminationSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorTerminationSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorTerminationSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorTerminationSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorTerminationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorTerminationSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpec(obj: VoiceConnectorTerminationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorTerminationSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorTerminationSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorTerminationSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorTerminationSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorTerminationSpecDeletionPolicy
 */
export enum VoiceConnectorTerminationSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorTerminationSpecForProvider
 */
export interface VoiceConnectorTerminationSpecForProvider {
  /**
   * The countries to which calls are allowed, in ISO 3166-1 alpha-2 format.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#callingRegions
   */
  readonly callingRegions?: string[];

  /**
   * The IP addresses allowed to make calls, in CIDR format.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#cidrAllowList
   */
  readonly cidrAllowList?: string[];

  /**
   * The limit on calls per second. Max value based on account service quota. Default value of 1.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#cpsLimit
   */
  readonly cpsLimit?: number;

  /**
   * The default caller ID phone number.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#defaultPhoneNumber
   */
  readonly defaultPhoneNumber?: string;

  /**
   * When termination settings are disabled, outbound calls can not be made.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#disabled
   */
  readonly disabled?: boolean;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorTerminationSpecForProvider#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecForProvider(obj: VoiceConnectorTerminationSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'callingRegions': obj.callingRegions?.map(y => y),
    'cidrAllowList': obj.cidrAllowList?.map(y => y),
    'cpsLimit': obj.cpsLimit,
    'defaultPhoneNumber': obj.defaultPhoneNumber,
    'disabled': obj.disabled,
    'region': obj.region,
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorTerminationSpecManagementPolicy
 */
export enum VoiceConnectorTerminationSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorTerminationSpecProviderConfigRef
 */
export interface VoiceConnectorTerminationSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorTerminationSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecProviderConfigRef(obj: VoiceConnectorTerminationSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorTerminationSpecProviderRef
 */
export interface VoiceConnectorTerminationSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorTerminationSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecProviderRef(obj: VoiceConnectorTerminationSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorTerminationSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsTo(obj: VoiceConnectorTerminationSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorTerminationSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorTerminationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorTerminationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorTerminationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecWriteConnectionSecretToRef(obj: VoiceConnectorTerminationSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef
 */
export interface VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef(obj: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector
 */
export interface VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector(obj: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorTerminationSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecProviderConfigRefPolicy(obj: VoiceConnectorTerminationSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationSpecProviderRefPolicy
 */
export interface VoiceConnectorTerminationSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecProviderRefPolicy(obj: VoiceConnectorTerminationSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorTerminationSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy(obj: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorTerminationSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorTerminationSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorTerminationSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorTerminationSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorTerminationSpecForProviderVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorTerminationSpecForProviderVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorTerminationSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * VoiceConnectorTerminationCredentials is the Schema for the VoiceConnectorTerminationCredentialss API. Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
 *
 * @schema VoiceConnectorTerminationCredentials
 */
export class VoiceConnectorTerminationCredentials extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VoiceConnectorTerminationCredentials"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'chime.aws.upbound.io/v1beta1',
    kind: 'VoiceConnectorTerminationCredentials',
  }

  /**
   * Renders a Kubernetes manifest for "VoiceConnectorTerminationCredentials".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VoiceConnectorTerminationCredentialsProps): any {
    return {
      ...VoiceConnectorTerminationCredentials.GVK,
      ...toJson_VoiceConnectorTerminationCredentialsProps(props),
    };
  }

  /**
   * Defines a "VoiceConnectorTerminationCredentials" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VoiceConnectorTerminationCredentialsProps) {
    super(scope, id, {
      ...VoiceConnectorTerminationCredentials.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VoiceConnectorTerminationCredentials.GVK,
      ...toJson_VoiceConnectorTerminationCredentialsProps(resolved),
    };
  }
}

/**
 * VoiceConnectorTerminationCredentials is the Schema for the VoiceConnectorTerminationCredentialss API. Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
 *
 * @schema VoiceConnectorTerminationCredentials
 */
export interface VoiceConnectorTerminationCredentialsProps {
  /**
   * @schema VoiceConnectorTerminationCredentials#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * VoiceConnectorTerminationCredentialsSpec defines the desired state of VoiceConnectorTerminationCredentials
   *
   * @schema VoiceConnectorTerminationCredentials#spec
   */
  readonly spec: VoiceConnectorTerminationCredentialsSpec;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsProps(obj: VoiceConnectorTerminationCredentialsProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VoiceConnectorTerminationCredentialsSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VoiceConnectorTerminationCredentialsSpec defines the desired state of VoiceConnectorTerminationCredentials
 *
 * @schema VoiceConnectorTerminationCredentialsSpec
 */
export interface VoiceConnectorTerminationCredentialsSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#deletionPolicy
   */
  readonly deletionPolicy?: VoiceConnectorTerminationCredentialsSpecDeletionPolicy;

  /**
   * @schema VoiceConnectorTerminationCredentialsSpec#forProvider
   */
  readonly forProvider: VoiceConnectorTerminationCredentialsSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#managementPolicy
   */
  readonly managementPolicy?: VoiceConnectorTerminationCredentialsSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#providerConfigRef
   */
  readonly providerConfigRef?: VoiceConnectorTerminationCredentialsSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#providerRef
   */
  readonly providerRef?: VoiceConnectorTerminationCredentialsSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema VoiceConnectorTerminationCredentialsSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpec(obj: VoiceConnectorTerminationCredentialsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_VoiceConnectorTerminationCredentialsSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_VoiceConnectorTerminationCredentialsSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_VoiceConnectorTerminationCredentialsSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorTerminationCredentialsSpecDeletionPolicy
 */
export enum VoiceConnectorTerminationCredentialsSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema VoiceConnectorTerminationCredentialsSpecForProvider
 */
export interface VoiceConnectorTerminationCredentialsSpecForProvider {
  /**
   * List of termination SIP credentials.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProvider#credentials
   */
  readonly credentials?: VoiceConnectorTerminationCredentialsSpecForProviderCredentials[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProvider#region
   */
  readonly region: string;

  /**
   * Amazon Chime Voice Connector ID.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProvider#voiceConnectorId
   */
  readonly voiceConnectorId?: string;

  /**
   * Reference to a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProvider#voiceConnectorIdRef
   */
  readonly voiceConnectorIdRef?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef;

  /**
   * Selector for a VoiceConnector in chime to populate voiceConnectorId.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProvider#voiceConnectorIdSelector
   */
  readonly voiceConnectorIdSelector?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProvider(obj: VoiceConnectorTerminationCredentialsSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'credentials': obj.credentials?.map(y => toJson_VoiceConnectorTerminationCredentialsSpecForProviderCredentials(y)),
    'region': obj.region,
    'voiceConnectorId': obj.voiceConnectorId,
    'voiceConnectorIdRef': toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef(obj.voiceConnectorIdRef),
    'voiceConnectorIdSelector': toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector(obj.voiceConnectorIdSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema VoiceConnectorTerminationCredentialsSpecManagementPolicy
 */
export enum VoiceConnectorTerminationCredentialsSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRef
 */
export interface VoiceConnectorTerminationCredentialsSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRef#policy
   */
  readonly policy?: VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecProviderConfigRef(obj: VoiceConnectorTerminationCredentialsSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderRef
 */
export interface VoiceConnectorTerminationCredentialsSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderRef#policy
   */
  readonly policy?: VoiceConnectorTerminationCredentialsSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecProviderRef(obj: VoiceConnectorTerminationCredentialsSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationCredentialsSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo
 */
export interface VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo(obj: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef
 */
export interface VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef(obj: VoiceConnectorTerminationCredentialsSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentials
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderCredentials {
  /**
   * RFC2617 compliant password associated with the SIP credentials.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentials#passwordSecretRef
   */
  readonly passwordSecretRef: VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef;

  /**
   * RFC2617 compliant username associated with the SIP credentials.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentials#username
   */
  readonly username: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderCredentials' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderCredentials(obj: VoiceConnectorTerminationCredentialsSpecForProviderCredentials | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'passwordSecretRef': toJson_VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef(obj.passwordSecretRef),
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef#policy
   */
  readonly policy?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef(obj: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a VoiceConnector in chime to populate voiceConnectorId.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector#policy
   */
  readonly policy?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector(obj: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy
 */
export interface VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy(obj: VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderRefPolicy
 */
export interface VoiceConnectorTerminationCredentialsSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecProviderRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecProviderRefPolicy(obj: VoiceConnectorTerminationCredentialsSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef
 */
export interface VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef(obj: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata
 */
export interface VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata(obj: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RFC2617 compliant password associated with the SIP credentials.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef {
  /**
   * The key to select.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef(obj: VoiceConnectorTerminationCredentialsSpecForProviderCredentialsPasswordSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy(obj: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy
 */
export interface VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy(obj: VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolution
 */
export enum VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolve
 */
export enum VoiceConnectorTerminationCredentialsSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolution
 */
export enum VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolve
 */
export enum VoiceConnectorTerminationCredentialsSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy(obj: VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolution
 */
export enum VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolve
 */
export enum VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolution
 */
export enum VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolve
 */
export enum VoiceConnectorTerminationCredentialsSpecForProviderVoiceConnectorIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum VoiceConnectorTerminationCredentialsSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

