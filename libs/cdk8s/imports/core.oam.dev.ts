// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AppDeployment is the Schema for the AppDeployment API
 *
 * @schema AppDeployment
 */
export class AppDeployment extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AppDeployment"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'AppDeployment',
  }

  /**
   * Renders a Kubernetes manifest for "AppDeployment".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AppDeploymentProps = {}): any {
    return {
      ...AppDeployment.GVK,
      ...toJson_AppDeploymentProps(props),
    };
  }

  /**
   * Defines a "AppDeployment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AppDeploymentProps = {}) {
    super(scope, id, {
      ...AppDeployment.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AppDeployment.GVK,
      ...toJson_AppDeploymentProps(resolved),
    };
  }
}

/**
 * AppDeployment is the Schema for the AppDeployment API
 *
 * @schema AppDeployment
 */
export interface AppDeploymentProps {
  /**
   * @schema AppDeployment#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AppDeploymentSpec defines how to describe an upgrade between different apps
   *
   * @schema AppDeployment#spec
   */
  readonly spec?: AppDeploymentSpec;

}

/**
 * Converts an object of type 'AppDeploymentProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentProps(obj: AppDeploymentProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AppDeploymentSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppDeploymentSpec defines how to describe an upgrade between different apps
 *
 * @schema AppDeploymentSpec
 */
export interface AppDeploymentSpec {
  /**
   * AppRevision specifies  AppRevision resources to and the rules to apply to them.
   *
   * @schema AppDeploymentSpec#appRevisions
   */
  readonly appRevisions?: AppDeploymentSpecAppRevisions[];

  /**
   * Traffic defines the traffic rules to apply across revisions.
   *
   * @schema AppDeploymentSpec#traffic
   */
  readonly traffic?: AppDeploymentSpecTraffic;

}

/**
 * Converts an object of type 'AppDeploymentSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpec(obj: AppDeploymentSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appRevisions': obj.appRevisions?.map(y => toJson_AppDeploymentSpecAppRevisions(y)),
    'traffic': toJson_AppDeploymentSpecTraffic(obj.traffic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppRevision specifies an AppRevision resource to and the rules to apply to it.
 *
 * @schema AppDeploymentSpecAppRevisions
 */
export interface AppDeploymentSpecAppRevisions {
  /**
   * Placement defines the cluster placement rules for an app revision.
   *
   * @schema AppDeploymentSpecAppRevisions#placement
   */
  readonly placement?: AppDeploymentSpecAppRevisionsPlacement[];

  /**
   * RevisionName is the name of the AppRevision.
   *
   * @schema AppDeploymentSpecAppRevisions#revisionName
   */
  readonly revisionName?: string;

}

/**
 * Converts an object of type 'AppDeploymentSpecAppRevisions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecAppRevisions(obj: AppDeploymentSpecAppRevisions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'placement': obj.placement?.map(y => toJson_AppDeploymentSpecAppRevisionsPlacement(y)),
    'revisionName': obj.revisionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Traffic defines the traffic rules to apply across revisions.
 *
 * @schema AppDeploymentSpecTraffic
 */
export interface AppDeploymentSpecTraffic {
  /**
   * Gateways specifies the names of gateways that should apply these rules. Gateways in other namespaces may be referred to by `<gateway namespace>/<gateway name>`; specifying a gateway with no namespace qualifier is the same as specifying the AppDeployment's namespace.
   *
   * @schema AppDeploymentSpecTraffic#gateways
   */
  readonly gateways?: string[];

  /**
   * Hosts are the destination hosts to which traffic is being sent. Could be a DNS name with wildcard prefix or an IP address.
   *
   * @schema AppDeploymentSpecTraffic#hosts
   */
  readonly hosts?: string[];

  /**
   * HTTP defines the rules to match and split http traffoc across revisions.
   *
   * @schema AppDeploymentSpecTraffic#http
   */
  readonly http?: AppDeploymentSpecTrafficHttp[];

}

/**
 * Converts an object of type 'AppDeploymentSpecTraffic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecTraffic(obj: AppDeploymentSpecTraffic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gateways': obj.gateways?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'http': obj.http?.map(y => toJson_AppDeploymentSpecTrafficHttp(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterPlacement defines the cluster placement rules for an app revision.
 *
 * @schema AppDeploymentSpecAppRevisionsPlacement
 */
export interface AppDeploymentSpecAppRevisionsPlacement {
  /**
   * ClusterSelector selects the cluster to  deploy apps to. If not specified, it indicates the host cluster per se.
   *
   * @schema AppDeploymentSpecAppRevisionsPlacement#clusterSelector
   */
  readonly clusterSelector?: AppDeploymentSpecAppRevisionsPlacementClusterSelector;

  /**
   * Distribution defines the replica distribution of an AppRevision to a cluster.
   *
   * @schema AppDeploymentSpecAppRevisionsPlacement#distribution
   */
  readonly distribution?: AppDeploymentSpecAppRevisionsPlacementDistribution;

}

/**
 * Converts an object of type 'AppDeploymentSpecAppRevisionsPlacement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecAppRevisionsPlacement(obj: AppDeploymentSpecAppRevisionsPlacement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterSelector': toJson_AppDeploymentSpecAppRevisionsPlacementClusterSelector(obj.clusterSelector),
    'distribution': toJson_AppDeploymentSpecAppRevisionsPlacementDistribution(obj.distribution),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPRule defines the rules to match and split http traffic across revisions.
 *
 * @schema AppDeploymentSpecTrafficHttp
 */
export interface AppDeploymentSpecTrafficHttp {
  /**
   * Match defines the conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.
   *
   * @schema AppDeploymentSpecTrafficHttp#match
   */
  readonly match?: AppDeploymentSpecTrafficHttpMatch[];

  /**
   * WeightedTargets defines the revision targets to select and route traffic to.
   *
   * @schema AppDeploymentSpecTrafficHttp#weightedTargets
   */
  readonly weightedTargets?: AppDeploymentSpecTrafficHttpWeightedTargets[];

}

/**
 * Converts an object of type 'AppDeploymentSpecTrafficHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecTrafficHttp(obj: AppDeploymentSpecTrafficHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match?.map(y => toJson_AppDeploymentSpecTrafficHttpMatch(y)),
    'weightedTargets': obj.weightedTargets?.map(y => toJson_AppDeploymentSpecTrafficHttpWeightedTargets(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterSelector selects the cluster to  deploy apps to. If not specified, it indicates the host cluster per se.
 *
 * @schema AppDeploymentSpecAppRevisionsPlacementClusterSelector
 */
export interface AppDeploymentSpecAppRevisionsPlacementClusterSelector {
  /**
   * Labels defines the label selector to select the cluster.
   *
   * @schema AppDeploymentSpecAppRevisionsPlacementClusterSelector#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name is the name of the cluster.
   *
   * @schema AppDeploymentSpecAppRevisionsPlacementClusterSelector#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AppDeploymentSpecAppRevisionsPlacementClusterSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecAppRevisionsPlacementClusterSelector(obj: AppDeploymentSpecAppRevisionsPlacementClusterSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Distribution defines the replica distribution of an AppRevision to a cluster.
 *
 * @schema AppDeploymentSpecAppRevisionsPlacementDistribution
 */
export interface AppDeploymentSpecAppRevisionsPlacementDistribution {
  /**
   * Replicas is the replica number.
   *
   * @schema AppDeploymentSpecAppRevisionsPlacementDistribution#replicas
   */
  readonly replicas?: number;

}

/**
 * Converts an object of type 'AppDeploymentSpecAppRevisionsPlacementDistribution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecAppRevisionsPlacementDistribution(obj: AppDeploymentSpecAppRevisionsPlacementDistribution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'replicas': obj.replicas,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPMatchRequest specifies a set of criterion to be met in order for the rule to be applied to the HTTP request. For example, the following restricts the rule to match only requests where the URL path starts with /ratings/v2/ and the request contains a custom `end-user` header with value `jason`.
 *
 * @schema AppDeploymentSpecTrafficHttpMatch
 */
export interface AppDeploymentSpecTrafficHttpMatch {
  /**
   * URI defines how to match with an URI.
   *
   * @schema AppDeploymentSpecTrafficHttpMatch#uri
   */
  readonly uri?: AppDeploymentSpecTrafficHttpMatchUri;

}

/**
 * Converts an object of type 'AppDeploymentSpecTrafficHttpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecTrafficHttpMatch(obj: AppDeploymentSpecTrafficHttpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'uri': toJson_AppDeploymentSpecTrafficHttpMatchUri(obj.uri),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WeightedTarget defines the revision target to select and route traffic to.
 *
 * @schema AppDeploymentSpecTrafficHttpWeightedTargets
 */
export interface AppDeploymentSpecTrafficHttpWeightedTargets {
  /**
   * ComponentName is the name of the component. Note that it is the original component name in the Application. No need to append revision.
   *
   * @schema AppDeploymentSpecTrafficHttpWeightedTargets#componentName
   */
  readonly componentName?: string;

  /**
   * Port is the port to route traffic towards.
   *
   * @schema AppDeploymentSpecTrafficHttpWeightedTargets#port
   */
  readonly port?: number;

  /**
   * RevisionName is the name of the app revision.
   *
   * @schema AppDeploymentSpecTrafficHttpWeightedTargets#revisionName
   */
  readonly revisionName?: string;

  /**
   * Weight defines the proportion of traffic to be forwarded to the service version. (0-100). Sum of weights across destinations SHOULD BE == 100. If there is only one destination in a rule, the weight value is assumed to be 100.
   *
   * @schema AppDeploymentSpecTrafficHttpWeightedTargets#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'AppDeploymentSpecTrafficHttpWeightedTargets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecTrafficHttpWeightedTargets(obj: AppDeploymentSpecTrafficHttpWeightedTargets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentName': obj.componentName,
    'port': obj.port,
    'revisionName': obj.revisionName,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * URI defines how to match with an URI.
 *
 * @schema AppDeploymentSpecTrafficHttpMatchUri
 */
export interface AppDeploymentSpecTrafficHttpMatchUri {
  /**
   * @schema AppDeploymentSpecTrafficHttpMatchUri#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'AppDeploymentSpecTrafficHttpMatchUri' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppDeploymentSpecTrafficHttpMatchUri(obj: AppDeploymentSpecTrafficHttpMatchUri | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Application is the Schema for the applications API
 *
 * @schema Application
 */
export class Application extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Application"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'Application',
  }

  /**
   * Renders a Kubernetes manifest for "Application".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationProps = {}): any {
    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(props),
    };
  }

  /**
   * Defines a "Application" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationProps = {}) {
    super(scope, id, {
      ...Application.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(resolved),
    };
  }
}

/**
 * Application is the Schema for the applications API
 *
 * @schema Application
 */
export interface ApplicationProps {
  /**
   * @schema Application#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ApplicationSpec is the spec of Application
   *
   * @schema Application#spec
   */
  readonly spec?: ApplicationSpec;

}

/**
 * Converts an object of type 'ApplicationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationProps(obj: ApplicationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApplicationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec is the spec of Application
 *
 * @schema ApplicationSpec
 */
export interface ApplicationSpec {
  /**
   * @schema ApplicationSpec#components
   */
  readonly components: ApplicationSpecComponents[];

  /**
   * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
   *
   * @schema ApplicationSpec#rolloutPlan
   */
  readonly rolloutPlan?: ApplicationSpecRolloutPlan;

}

/**
 * Converts an object of type 'ApplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpec(obj: ApplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_ApplicationSpecComponents(y)),
    'rolloutPlan': toJson_ApplicationSpecRolloutPlan(obj.rolloutPlan),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema ApplicationSpecComponents
 */
export interface ApplicationSpecComponents {
  /**
   * @schema ApplicationSpecComponents#name
   */
  readonly name: string;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema ApplicationSpecComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * @schema ApplicationSpecComponents#settings
   */
  readonly settings?: any;

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema ApplicationSpecComponents#traits
   */
  readonly traits?: ApplicationSpecComponentsTraits[];

  /**
   * @schema ApplicationSpecComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecComponents(obj: ApplicationSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'settings': obj.settings,
    'traits': obj.traits?.map(y => toJson_ApplicationSpecComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
 *
 * @schema ApplicationSpecRolloutPlan
 */
export interface ApplicationSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema ApplicationSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema ApplicationSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: ApplicationSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema ApplicationSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema ApplicationSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema ApplicationSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: ApplicationSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema ApplicationSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema ApplicationSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: ApplicationSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema ApplicationSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlan(obj: ApplicationSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_ApplicationSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_ApplicationSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_ApplicationSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema ApplicationSpecComponentsTraits
 */
export interface ApplicationSpecComponentsTraits {
  /**
   * @schema ApplicationSpecComponentsTraits#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecComponentsTraits#properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'ApplicationSpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecComponentsTraits(obj: ApplicationSpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema ApplicationSpecRolloutPlanCanaryMetric
 */
export interface ApplicationSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: ApplicationSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: ApplicationSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanCanaryMetric(obj: ApplicationSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_ApplicationSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_ApplicationSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatches
 */
export interface ApplicationSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: ApplicationSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutBatches(obj: ApplicationSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema ApplicationSpecRolloutPlanRolloutWebhooks
 */
export interface ApplicationSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutWebhooks(obj: ApplicationSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema ApplicationSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface ApplicationSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanCanaryMetricMetricsRange(obj: ApplicationSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface ApplicationSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanCanaryMetricTemplateRef(obj: ApplicationSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: ApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric(obj: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new ApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesReplicas
 */
export class ApplicationSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanRolloutBatchesReplicas {
    return new ApplicationSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanRolloutBatchesReplicas {
    return new ApplicationSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Maximum value
 *
 * @schema ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new ApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new ApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * Application is the Schema for the applications API
 *
 * @schema ApplicationV1Beta1
 */
export class ApplicationV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApplicationV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'Application',
  }

  /**
   * Renders a Kubernetes manifest for "ApplicationV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationV1Beta1Props = {}): any {
    return {
      ...ApplicationV1Beta1.GVK,
      ...toJson_ApplicationV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ApplicationV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationV1Beta1Props = {}) {
    super(scope, id, {
      ...ApplicationV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApplicationV1Beta1.GVK,
      ...toJson_ApplicationV1Beta1Props(resolved),
    };
  }
}

/**
 * Application is the Schema for the applications API
 *
 * @schema ApplicationV1Beta1
 */
export interface ApplicationV1Beta1Props {
  /**
   * @schema ApplicationV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ApplicationSpec is the spec of Application
   *
   * @schema ApplicationV1Beta1#spec
   */
  readonly spec?: ApplicationV1Beta1Spec;

}

/**
 * Converts an object of type 'ApplicationV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1Props(obj: ApplicationV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApplicationV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec is the spec of Application
 *
 * @schema ApplicationV1Beta1Spec
 */
export interface ApplicationV1Beta1Spec {
  /**
   * @schema ApplicationV1Beta1Spec#components
   */
  readonly components: ApplicationV1Beta1SpecComponents[];

  /**
   * Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
   *
   * @schema ApplicationV1Beta1Spec#policies
   */
  readonly policies?: ApplicationV1Beta1SpecPolicies[];

  /**
   * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
   *
   * @schema ApplicationV1Beta1Spec#workflow
   */
  readonly workflow?: ApplicationV1Beta1SpecWorkflow;

}

/**
 * Converts an object of type 'ApplicationV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1Spec(obj: ApplicationV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_ApplicationV1Beta1SpecComponents(y)),
    'policies': obj.policies?.map(y => toJson_ApplicationV1Beta1SpecPolicies(y)),
    'workflow': toJson_ApplicationV1Beta1SpecWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema ApplicationV1Beta1SpecComponents
 */
export interface ApplicationV1Beta1SpecComponents {
  /**
   * @schema ApplicationV1Beta1SpecComponents#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * ExternalRevision specified the component revisionName
   *
   * @schema ApplicationV1Beta1SpecComponents#externalRevision
   */
  readonly externalRevision?: string;

  /**
   * StepInputs defines variable input of WorkflowStep
   *
   * @schema ApplicationV1Beta1SpecComponents#inputs
   */
  readonly inputs?: ApplicationV1Beta1SpecComponentsInputs[];

  /**
   * @schema ApplicationV1Beta1SpecComponents#name
   */
  readonly name: string;

  /**
   * StepOutputs defines output variable of WorkflowStep
   *
   * @schema ApplicationV1Beta1SpecComponents#outputs
   */
  readonly outputs?: ApplicationV1Beta1SpecComponentsOutputs[];

  /**
   * @schema ApplicationV1Beta1SpecComponents#properties
   */
  readonly properties?: any;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema ApplicationV1Beta1SpecComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema ApplicationV1Beta1SpecComponents#traits
   */
  readonly traits?: ApplicationV1Beta1SpecComponentsTraits[];

  /**
   * @schema ApplicationV1Beta1SpecComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecComponents(obj: ApplicationV1Beta1SpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'externalRevision': obj.externalRevision,
    'inputs': obj.inputs?.map(y => toJson_ApplicationV1Beta1SpecComponentsInputs(y)),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationV1Beta1SpecComponentsOutputs(y)),
    'properties': obj.properties,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'traits': obj.traits?.map(y => toJson_ApplicationV1Beta1SpecComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppPolicy defines a global policy for all components in the app.
 *
 * @schema ApplicationV1Beta1SpecPolicies
 */
export interface ApplicationV1Beta1SpecPolicies {
  /**
   * Name is the unique name of the policy.
   *
   * @schema ApplicationV1Beta1SpecPolicies#name
   */
  readonly name: string;

  /**
   * @schema ApplicationV1Beta1SpecPolicies#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationV1Beta1SpecPolicies#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecPolicies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecPolicies(obj: ApplicationV1Beta1SpecPolicies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
 *
 * @schema ApplicationV1Beta1SpecWorkflow
 */
export interface ApplicationV1Beta1SpecWorkflow {
  /**
   * WorkflowExecuteMode defines the mode of workflow execution
   *
   * @schema ApplicationV1Beta1SpecWorkflow#mode
   */
  readonly mode?: ApplicationV1Beta1SpecWorkflowMode;

  /**
   * @schema ApplicationV1Beta1SpecWorkflow#ref
   */
  readonly ref?: string;

  /**
   * @schema ApplicationV1Beta1SpecWorkflow#steps
   */
  readonly steps?: ApplicationV1Beta1SpecWorkflowSteps[];

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflow(obj: ApplicationV1Beta1SpecWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': toJson_ApplicationV1Beta1SpecWorkflowMode(obj.mode),
    'ref': obj.ref,
    'steps': obj.steps?.map(y => toJson_ApplicationV1Beta1SpecWorkflowSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InputItem defines an input variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecComponentsInputs
 */
export interface ApplicationV1Beta1SpecComponentsInputs {
  /**
   * @schema ApplicationV1Beta1SpecComponentsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationV1Beta1SpecComponentsInputs#parameterKey
   */
  readonly parameterKey?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecComponentsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecComponentsInputs(obj: ApplicationV1Beta1SpecComponentsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputItem defines an output variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecComponentsOutputs
 */
export interface ApplicationV1Beta1SpecComponentsOutputs {
  /**
   * @schema ApplicationV1Beta1SpecComponentsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationV1Beta1SpecComponentsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecComponentsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecComponentsOutputs(obj: ApplicationV1Beta1SpecComponentsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema ApplicationV1Beta1SpecComponentsTraits
 */
export interface ApplicationV1Beta1SpecComponentsTraits {
  /**
   * @schema ApplicationV1Beta1SpecComponentsTraits#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationV1Beta1SpecComponentsTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecComponentsTraits(obj: ApplicationV1Beta1SpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowExecuteMode defines the mode of workflow execution
 *
 * @schema ApplicationV1Beta1SpecWorkflowMode
 */
export interface ApplicationV1Beta1SpecWorkflowMode {
  /**
   * Steps is the mode of workflow steps execution
   *
   * @schema ApplicationV1Beta1SpecWorkflowMode#steps
   */
  readonly steps?: string;

  /**
   * SubSteps is the mode of workflow sub steps execution
   *
   * @schema ApplicationV1Beta1SpecWorkflowMode#subSteps
   */
  readonly subSteps?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowMode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowMode(obj: ApplicationV1Beta1SpecWorkflowMode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'steps': obj.steps,
    'subSteps': obj.subSteps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStep defines how to execute a workflow step.
 *
 * @schema ApplicationV1Beta1SpecWorkflowSteps
 */
export interface ApplicationV1Beta1SpecWorkflowSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#inputs
   */
  readonly inputs?: ApplicationV1Beta1SpecWorkflowStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#meta
   */
  readonly meta?: ApplicationV1Beta1SpecWorkflowStepsMeta;

  /**
   * Mode is only valid for sub steps, it defines the mode of the sub steps
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#mode
   */
  readonly mode?: string;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#name
   */
  readonly name?: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#outputs
   */
  readonly outputs?: ApplicationV1Beta1SpecWorkflowStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationV1Beta1SpecWorkflowSteps#subSteps
   */
  readonly subSteps?: ApplicationV1Beta1SpecWorkflowStepsSubSteps[];

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowSteps(obj: ApplicationV1Beta1SpecWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationV1Beta1SpecWorkflowStepsInputs(y)),
    'meta': toJson_ApplicationV1Beta1SpecWorkflowStepsMeta(obj.meta),
    'mode': obj.mode,
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationV1Beta1SpecWorkflowStepsOutputs(y)),
    'properties': obj.properties,
    'subSteps': obj.subSteps?.map(y => toJson_ApplicationV1Beta1SpecWorkflowStepsSubSteps(y)),
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InputItem defines an input variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsInputs
 */
export interface ApplicationV1Beta1SpecWorkflowStepsInputs {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsInputs#parameterKey
   */
  readonly parameterKey?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsInputs(obj: ApplicationV1Beta1SpecWorkflowStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsMeta
 */
export interface ApplicationV1Beta1SpecWorkflowStepsMeta {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsMeta(obj: ApplicationV1Beta1SpecWorkflowStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputItem defines an output variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsOutputs
 */
export interface ApplicationV1Beta1SpecWorkflowStepsOutputs {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsOutputs(obj: ApplicationV1Beta1SpecWorkflowStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepBase defines the workflow step base
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps
 */
export interface ApplicationV1Beta1SpecWorkflowStepsSubSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#inputs
   */
  readonly inputs?: ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#meta
   */
  readonly meta?: ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#name
   */
  readonly name?: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#outputs
   */
  readonly outputs?: ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#properties
   */
  readonly properties?: any;

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsSubSteps(obj: ApplicationV1Beta1SpecWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs(y)),
    'meta': toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs(y)),
    'properties': obj.properties,
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InputItem defines an input variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs
 */
export interface ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs#parameterKey
   */
  readonly parameterKey?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs(obj: ApplicationV1Beta1SpecWorkflowStepsSubStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta
 */
export interface ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta(obj: ApplicationV1Beta1SpecWorkflowStepsSubStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputItem defines an output variable of WorkflowStep
 *
 * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs
 */
export interface ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs {
  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs(obj: ApplicationV1Beta1SpecWorkflowStepsSubStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * An ApplicationConfiguration represents an OAM application.
 *
 * @schema ApplicationConfiguration
 */
export class ApplicationConfiguration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApplicationConfiguration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'ApplicationConfiguration',
  }

  /**
   * Renders a Kubernetes manifest for "ApplicationConfiguration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationConfigurationProps = {}): any {
    return {
      ...ApplicationConfiguration.GVK,
      ...toJson_ApplicationConfigurationProps(props),
    };
  }

  /**
   * Defines a "ApplicationConfiguration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationConfigurationProps = {}) {
    super(scope, id, {
      ...ApplicationConfiguration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApplicationConfiguration.GVK,
      ...toJson_ApplicationConfigurationProps(resolved),
    };
  }
}

/**
 * An ApplicationConfiguration represents an OAM application.
 *
 * @schema ApplicationConfiguration
 */
export interface ApplicationConfigurationProps {
  /**
   * @schema ApplicationConfiguration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
   *
   * @schema ApplicationConfiguration#spec
   */
  readonly spec?: ApplicationConfigurationSpec;

}

/**
 * Converts an object of type 'ApplicationConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationProps(obj: ApplicationConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApplicationConfigurationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
 *
 * @schema ApplicationConfigurationSpec
 */
export interface ApplicationConfigurationSpec {
  /**
   * Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
   *
   * @schema ApplicationConfigurationSpec#components
   */
  readonly components: ApplicationConfigurationSpecComponents[];

}

/**
 * Converts an object of type 'ApplicationConfigurationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpec(obj: ApplicationConfigurationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_ApplicationConfigurationSpecComponents(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An ApplicationConfigurationComponent specifies a component of an ApplicationConfiguration. Each component is used to instantiate a workload.
 *
 * @schema ApplicationConfigurationSpecComponents
 */
export interface ApplicationConfigurationSpecComponents {
  /**
   * ComponentName specifies a component whose latest revision will be bind with ApplicationConfiguration. When the spec of the referenced component changes, ApplicationConfiguration will automatically migrate all trait affect from the prior revision to the new one. This is mutually exclusive with RevisionName.
   *
   * @schema ApplicationConfigurationSpecComponents#componentName
   */
  readonly componentName?: string;

  /**
   * DataInputs specify the data input sinks into this component.
   *
   * @schema ApplicationConfigurationSpecComponents#dataInputs
   */
  readonly dataInputs?: ApplicationConfigurationSpecComponentsDataInputs[];

  /**
   * DataOutputs specify the data output sources from this component.
   *
   * @schema ApplicationConfigurationSpecComponents#dataOutputs
   */
  readonly dataOutputs?: ApplicationConfigurationSpecComponentsDataOutputs[];

  /**
   * ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
   *
   * @schema ApplicationConfigurationSpecComponents#parameterValues
   */
  readonly parameterValues?: ApplicationConfigurationSpecComponentsParameterValues[];

  /**
   * RevisionName of a specific component revision to which to bind ApplicationConfiguration. This is mutually exclusive with componentName.
   *
   * @schema ApplicationConfigurationSpecComponents#revisionName
   */
  readonly revisionName?: string;

  /**
   * Scopes in which the specified component should exist.
   *
   * @schema ApplicationConfigurationSpecComponents#scopes
   */
  readonly scopes?: ApplicationConfigurationSpecComponentsScopes[];

  /**
   * Traits of the specified component.
   *
   * @schema ApplicationConfigurationSpecComponents#traits
   */
  readonly traits?: ApplicationConfigurationSpecComponentsTraits[];

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponents(obj: ApplicationConfigurationSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentName': obj.componentName,
    'dataInputs': obj.dataInputs?.map(y => toJson_ApplicationConfigurationSpecComponentsDataInputs(y)),
    'dataOutputs': obj.dataOutputs?.map(y => toJson_ApplicationConfigurationSpecComponentsDataOutputs(y)),
    'parameterValues': obj.parameterValues?.map(y => toJson_ApplicationConfigurationSpecComponentsParameterValues(y)),
    'revisionName': obj.revisionName,
    'scopes': obj.scopes?.map(y => toJson_ApplicationConfigurationSpecComponentsScopes(y)),
    'traits': obj.traits?.map(y => toJson_ApplicationConfigurationSpecComponentsTraits(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataInput specifies a data input sink to an object. If input is array, it will be appended to the target field paths.
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputs
 */
export interface ApplicationConfigurationSpecComponentsDataInputs {
  /**
   * When the Conditions is satified, ToFieldPaths will be filled with passed value
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputs#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsDataInputsConditions[];

  /**
   * InputStore specifies the object used to read intermediate data genereted by DataOutput
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputs#inputStore
   */
  readonly inputStore?: ApplicationConfigurationSpecComponentsDataInputsInputStore;

  /**
   * StrategyMergeKeys specifies the merge key if the toFieldPaths target is an array. The StrategyMergeKeys is optional, by default, if the toFieldPaths target is an array, we will append. If StrategyMergeKeys specified, we will check the key in the target array. If any key exist, do update; if no key exist, append.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputs#strategyMergeKeys
   */
  readonly strategyMergeKeys?: string[];

  /**
   * ToFieldPaths specifies the field paths of an object to fill passed value.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputs#toFieldPaths
   */
  readonly toFieldPaths?: string[];

  /**
   * ValueFrom specifies the value source.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputs#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataInputsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputs(obj: ApplicationConfigurationSpecComponentsDataInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsDataInputsConditions(y)),
    'inputStore': toJson_ApplicationConfigurationSpecComponentsDataInputsInputStore(obj.inputStore),
    'strategyMergeKeys': obj.strategyMergeKeys?.map(y => y),
    'toFieldPaths': obj.toFieldPaths?.map(y => y),
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataInputsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOutput specifies a data output source from an object.
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputs
 */
export interface ApplicationConfigurationSpecComponentsDataOutputs {
  /**
   * Conditions specify the conditions that should be satisfied before emitting a data output. Different conditions are AND-ed together. If no conditions is specified, it is by default to check output value not empty.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputs#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsDataOutputsConditions[];

  /**
   * FieldPath refers to the value of an object's field.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputs#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Name is the unique name of a DataOutput in an ApplicationConfiguration.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputs#name
   */
  readonly name?: string;

  /**
   * OutputStore specifies the object used to store intermediate data generated by Operations
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputs#outputStore
   */
  readonly outputStore?: ApplicationConfigurationSpecComponentsDataOutputsOutputStore;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputs(obj: ApplicationConfigurationSpecComponentsDataOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsDataOutputsConditions(y)),
    'fieldPath': obj.fieldPath,
    'name': obj.name,
    'outputStore': toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStore(obj.outputStore),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
 *
 * @schema ApplicationConfigurationSpecComponentsParameterValues
 */
export interface ApplicationConfigurationSpecComponentsParameterValues {
  /**
   * Name of the component parameter to set.
   *
   * @schema ApplicationConfigurationSpecComponentsParameterValues#name
   */
  readonly name: string;

  /**
   * Value to set.
   *
   * @schema ApplicationConfigurationSpecComponentsParameterValues#value
   */
  readonly value: ApplicationConfigurationSpecComponentsParameterValuesValue;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsParameterValues' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsParameterValues(obj: ApplicationConfigurationSpecComponentsParameterValues | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ComponentScope specifies a scope in which a component should exist.
 *
 * @schema ApplicationConfigurationSpecComponentsScopes
 */
export interface ApplicationConfigurationSpecComponentsScopes {
  /**
   * A ScopeReference must refer to an OAM scope resource.
   *
   * @schema ApplicationConfigurationSpecComponentsScopes#scopeRef
   */
  readonly scopeRef: ApplicationConfigurationSpecComponentsScopesScopeRef;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsScopes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsScopes(obj: ApplicationConfigurationSpecComponentsScopes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'scopeRef': toJson_ApplicationConfigurationSpecComponentsScopesScopeRef(obj.scopeRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ComponentTrait specifies a trait that should be applied to a component.
 *
 * @schema ApplicationConfigurationSpecComponentsTraits
 */
export interface ApplicationConfigurationSpecComponentsTraits {
  /**
   * DataInputs specify the data input sinks into this trait.
   *
   * @schema ApplicationConfigurationSpecComponentsTraits#dataInputs
   */
  readonly dataInputs?: ApplicationConfigurationSpecComponentsTraitsDataInputs[];

  /**
   * DataOutputs specify the data output sources from this trait.
   *
   * @schema ApplicationConfigurationSpecComponentsTraits#dataOutputs
   */
  readonly dataOutputs?: ApplicationConfigurationSpecComponentsTraitsDataOutputs[];

  /**
   * A Trait that will be created for the component
   *
   * @schema ApplicationConfigurationSpecComponentsTraits#trait
   */
  readonly trait: any;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraits(obj: ApplicationConfigurationSpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataInputs': obj.dataInputs?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataInputs(y)),
    'dataOutputs': obj.dataOutputs?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputs(y)),
    'trait': obj.trait,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsConditions
 */
export interface ApplicationConfigurationSpecComponentsDataInputsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsConditions(obj: ApplicationConfigurationSpecComponentsDataInputsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InputStore specifies the object used to read intermediate data genereted by DataOutput
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore
 */
export interface ApplicationConfigurationSpecComponentsDataInputsInputStore {
  /**
   * API version of the referent.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#namespace
   */
  readonly namespace?: string;

  /**
   * Operations specify the data processing operations
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#operations
   */
  readonly operations?: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations[];

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStore#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsInputStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsInputStore(obj: ApplicationConfigurationSpecComponentsDataInputsInputStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'operations': obj.operations?.map(y => toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations(y)),
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies the value source.
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataInputsValueFrom {
  /**
   * DataOutputName matches a name of a DataOutput in the same AppConfig.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsValueFrom#dataOutputName
   */
  readonly dataOutputName: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsValueFrom(obj: ApplicationConfigurationSpecComponentsDataInputsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataOutputName': obj.dataOutputName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsConditions
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsConditions(obj: ApplicationConfigurationSpecComponentsDataOutputsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputStore specifies the object used to store intermediate data generated by Operations
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsOutputStore {
  /**
   * API version of the referent.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#namespace
   */
  readonly namespace?: string;

  /**
   * Operations specify the data processing operations
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#operations
   */
  readonly operations?: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations[];

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStore#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsOutputStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStore(obj: ApplicationConfigurationSpecComponentsDataOutputsOutputStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'operations': obj.operations?.map(y => toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations(y)),
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Value to set.
 *
 * @schema ApplicationConfigurationSpecComponentsParameterValuesValue
 */
export class ApplicationConfigurationSpecComponentsParameterValuesValue {
  public static fromNumber(value: number): ApplicationConfigurationSpecComponentsParameterValuesValue {
    return new ApplicationConfigurationSpecComponentsParameterValuesValue(value);
  }
  public static fromString(value: string): ApplicationConfigurationSpecComponentsParameterValuesValue {
    return new ApplicationConfigurationSpecComponentsParameterValuesValue(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * A ScopeReference must refer to an OAM scope resource.
 *
 * @schema ApplicationConfigurationSpecComponentsScopesScopeRef
 */
export interface ApplicationConfigurationSpecComponentsScopesScopeRef {
  /**
   * API version of the referent.
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationConfigurationSpecComponentsScopesScopeRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsScopesScopeRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsScopesScopeRef(obj: ApplicationConfigurationSpecComponentsScopesScopeRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataInput specifies a data input sink to an object. If input is array, it will be appended to the target field paths.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputs {
  /**
   * When the Conditions is satified, ToFieldPaths will be filled with passed value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsTraitsDataInputsConditions[];

  /**
   * InputStore specifies the object used to read intermediate data genereted by DataOutput
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs#inputStore
   */
  readonly inputStore?: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore;

  /**
   * StrategyMergeKeys specifies the merge key if the toFieldPaths target is an array. The StrategyMergeKeys is optional, by default, if the toFieldPaths target is an array, we will append. If StrategyMergeKeys specified, we will check the key in the target array. If any key exist, do update; if no key exist, append.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs#strategyMergeKeys
   */
  readonly strategyMergeKeys?: string[];

  /**
   * ToFieldPaths specifies the field paths of an object to fill passed value.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs#toFieldPaths
   */
  readonly toFieldPaths?: string[];

  /**
   * ValueFrom specifies the value source.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputs#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputs(obj: ApplicationConfigurationSpecComponentsTraitsDataInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsConditions(y)),
    'inputStore': toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore(obj.inputStore),
    'strategyMergeKeys': obj.strategyMergeKeys?.map(y => y),
    'toFieldPaths': obj.toFieldPaths?.map(y => y),
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOutput specifies a data output source from an object.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputs
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputs {
  /**
   * Conditions specify the conditions that should be satisfied before emitting a data output. Different conditions are AND-ed together. If no conditions is specified, it is by default to check output value not empty.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputs#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions[];

  /**
   * FieldPath refers to the value of an object's field.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputs#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Name is the unique name of a DataOutput in an ApplicationConfiguration.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputs#name
   */
  readonly name?: string;

  /**
   * OutputStore specifies the object used to store intermediate data generated by Operations
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputs#outputStore
   */
  readonly outputStore?: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputs(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions(y)),
    'fieldPath': obj.fieldPath,
    'name': obj.name,
    'outputStore': toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore(obj.outputStore),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsDataInputsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOperation defines the specific operation for data
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations
 */
export interface ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions[];

  /**
   * Operator specifies the operation under this DataOperation type
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#op
   */
  readonly op: string;

  /**
   * ToDataPath refers to the value of an object's specfied by ToDataPath. For example the ToDataPath "redis" specifies "redis info" in '{"redis":"redis info"}'
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#toDataPath
   */
  readonly toDataPath?: string;

  /**
   * ToFieldPath refers to the value of an object's field
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#toFieldPath
   */
  readonly toFieldPath: string;

  /**
   * Type specifies the type of DataOperation
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#type
   */
  readonly type: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations(obj: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions(y)),
    'op': obj.op,
    'toDataPath': obj.toDataPath,
    'toFieldPath': obj.toFieldPath,
    'type': obj.type,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsDataOutputsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOperation defines the specific operation for data
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions[];

  /**
   * Operator specifies the operation under this DataOperation type
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#op
   */
  readonly op: string;

  /**
   * ToDataPath refers to the value of an object's specfied by ToDataPath. For example the ToDataPath "redis" specifies "redis info" in '{"redis":"redis info"}'
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#toDataPath
   */
  readonly toDataPath?: string;

  /**
   * ToFieldPath refers to the value of an object's field
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#toFieldPath
   */
  readonly toFieldPath: string;

  /**
   * Type specifies the type of DataOperation
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#type
   */
  readonly type: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations(obj: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions(y)),
    'op': obj.op,
    'toDataPath': obj.toDataPath,
    'toFieldPath': obj.toFieldPath,
    'type': obj.type,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditions
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsConditions(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InputStore specifies the object used to read intermediate data genereted by DataOutput
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore {
  /**
   * API version of the referent.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#namespace
   */
  readonly namespace?: string;

  /**
   * Operations specify the data processing operations
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#operations
   */
  readonly operations?: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations[];

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'operations': obj.operations?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations(y)),
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies the value source.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom {
  /**
   * DataOutputName matches a name of a DataOutput in the same AppConfig.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom#dataOutputName
   */
  readonly dataOutputName: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dataOutputName': obj.dataOutputName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputStore specifies the object used to store intermediate data generated by Operations
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore {
  /**
   * API version of the referent.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#namespace
   */
  readonly namespace?: string;

  /**
   * Operations specify the data processing operations
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#operations
   */
  readonly operations?: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations[];

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'operations': obj.operations?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations(y)),
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions
 */
export interface ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions(obj: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom(obj: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions(obj: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom(obj: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOperation defines the specific operation for data
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions[];

  /**
   * Operator specifies the operation under this DataOperation type
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#op
   */
  readonly op: string;

  /**
   * ToDataPath refers to the value of an object's specfied by ToDataPath. For example the ToDataPath "redis" specifies "redis info" in '{"redis":"redis info"}'
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#toDataPath
   */
  readonly toDataPath?: string;

  /**
   * ToFieldPath refers to the value of an object's field
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#toFieldPath
   */
  readonly toFieldPath: string;

  /**
   * Type specifies the type of DataOperation
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#type
   */
  readonly type: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions(y)),
    'op': obj.op,
    'toDataPath': obj.toDataPath,
    'toFieldPath': obj.toFieldPath,
    'type': obj.type,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DataOperation defines the specific operation for data
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#conditions
   */
  readonly conditions?: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions[];

  /**
   * Operator specifies the operation under this DataOperation type
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#op
   */
  readonly op: string;

  /**
   * ToDataPath refers to the value of an object's specfied by ToDataPath. For example the ToDataPath "redis" specifies "redis info" in '{"redis":"redis info"}'
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#toDataPath
   */
  readonly toDataPath?: string;

  /**
   * ToFieldPath refers to the value of an object's field
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#toFieldPath
   */
  readonly toFieldPath: string;

  /**
   * Type specifies the type of DataOperation
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#type
   */
  readonly type: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions(y)),
    'op': obj.op,
    'toDataPath': obj.toDataPath,
    'toFieldPath': obj.toFieldPath,
    'type': obj.type,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsDataInputsInputStoreOperationsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsDataOutputsOutputStoreOperationsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConditionRequirement specifies the requirement to match a value.
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions {
  /**
   * FieldPath specifies got value from workload/trait object
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * ConditionOperator specifies the operator to match a value.
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions#op
   */
  readonly op: string;

  /**
   * Value specifies an expected value This is mutually exclusive with ValueFrom
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions#value
   */
  readonly value?: string;

  /**
   * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
   *
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions#valueFrom
   */
  readonly valueFrom?: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
    'op': obj.op,
    'value': obj.value,
    'valueFrom': toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from object such as workload and trait This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataInputsInputStoreOperationsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueFrom specifies expected value from AppConfig This is mutually exclusive with Value
 *
 * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom
 */
export interface ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom {
  /**
   * @schema ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom(obj: ApplicationConfigurationSpecComponentsTraitsDataOutputsOutputStoreOperationsConditionsValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * ApplicationRevision is the Schema for the ApplicationRevision API
 *
 * @schema ApplicationRevision
 */
export class ApplicationRevision extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApplicationRevision"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'ApplicationRevision',
  }

  /**
   * Renders a Kubernetes manifest for "ApplicationRevision".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationRevisionProps = {}): any {
    return {
      ...ApplicationRevision.GVK,
      ...toJson_ApplicationRevisionProps(props),
    };
  }

  /**
   * Defines a "ApplicationRevision" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationRevisionProps = {}) {
    super(scope, id, {
      ...ApplicationRevision.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApplicationRevision.GVK,
      ...toJson_ApplicationRevisionProps(resolved),
    };
  }
}

/**
 * ApplicationRevision is the Schema for the ApplicationRevision API
 *
 * @schema ApplicationRevision
 */
export interface ApplicationRevisionProps {
  /**
   * @schema ApplicationRevision#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ApplicationRevisionSpec is the spec of ApplicationRevision
   *
   * @schema ApplicationRevision#spec
   */
  readonly spec?: ApplicationRevisionSpec;

}

/**
 * Converts an object of type 'ApplicationRevisionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionProps(obj: ApplicationRevisionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApplicationRevisionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationRevisionSpec is the spec of ApplicationRevision
 *
 * @schema ApplicationRevisionSpec
 */
export interface ApplicationRevisionSpec {
  /**
   * Application records the snapshot of the created/modified Application
   *
   * @schema ApplicationRevisionSpec#application
   */
  readonly application: ApplicationRevisionSpecApplication;

  /**
   * ApplicationConfiguration records the rendered applicationConfiguration from Application, it will contains the whole K8s CR of trait and the reference component in it.
   *
   * @schema ApplicationRevisionSpec#applicationConfiguration
   */
  readonly applicationConfiguration: any;

  /**
   * ComponentDefinitions records the snapshot of the componentDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionSpec#componentDefinitions
   */
  readonly componentDefinitions?: { [key: string]: ApplicationRevisionSpecComponentDefinitions };

  /**
   * @schema ApplicationRevisionSpec#components
   */
  readonly components?: ApplicationRevisionSpecComponents[];

  /**
   * ScopeDefinitions records the snapshot of the scopeDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionSpec#scopeDefinitions
   */
  readonly scopeDefinitions?: { [key: string]: ApplicationRevisionSpecScopeDefinitions };

  /**
   * TraitDefinitions records the snapshot of the traitDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionSpec#traitDefinitions
   */
  readonly traitDefinitions?: { [key: string]: ApplicationRevisionSpecTraitDefinitions };

  /**
   * WorkloadDefinitions records the snapshot of the workloadDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionSpec#workloadDefinitions
   */
  readonly workloadDefinitions?: { [key: string]: ApplicationRevisionSpecWorkloadDefinitions };

}

/**
 * Converts an object of type 'ApplicationRevisionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpec(obj: ApplicationRevisionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'application': toJson_ApplicationRevisionSpecApplication(obj.application),
    'applicationConfiguration': obj.applicationConfiguration,
    'componentDefinitions': ((obj.componentDefinitions) === undefined) ? undefined : (Object.entries(obj.componentDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionSpecComponentDefinitions(i[1]) }), {})),
    'components': obj.components?.map(y => toJson_ApplicationRevisionSpecComponents(y)),
    'scopeDefinitions': ((obj.scopeDefinitions) === undefined) ? undefined : (Object.entries(obj.scopeDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionSpecScopeDefinitions(i[1]) }), {})),
    'traitDefinitions': ((obj.traitDefinitions) === undefined) ? undefined : (Object.entries(obj.traitDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionSpecTraitDefinitions(i[1]) }), {})),
    'workloadDefinitions': ((obj.workloadDefinitions) === undefined) ? undefined : (Object.entries(obj.workloadDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionSpecWorkloadDefinitions(i[1]) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Application records the snapshot of the created/modified Application
 *
 * @schema ApplicationRevisionSpecApplication
 */
export interface ApplicationRevisionSpecApplication {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionSpecApplication#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplication#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionSpecApplication#metadata
   */
  readonly metadata?: ApplicationRevisionSpecApplicationMetadata;

  /**
   * ApplicationSpec is the spec of Application
   *
   * @schema ApplicationRevisionSpecApplication#spec
   */
  readonly spec?: ApplicationRevisionSpecApplicationSpec;

  /**
   * AppStatus defines the observed state of Application
   *
   * @schema ApplicationRevisionSpecApplication#status
   */
  readonly status?: ApplicationRevisionSpecApplicationStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplication(obj: ApplicationRevisionSpecApplication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionSpecApplicationMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionSpecApplicationSpec(obj.spec),
    'status': toJson_ApplicationRevisionSpecApplicationStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ApplicationRevisionSpecComponentDefinitions
 */
export interface ApplicationRevisionSpecComponentDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionSpecComponentDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecComponentDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionSpecComponentDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionSpecComponentDefinitionsMetadata;

  /**
   * ComponentDefinitionSpec defines the desired state of ComponentDefinition
   *
   * @schema ApplicationRevisionSpecComponentDefinitions#spec
   */
  readonly spec?: ApplicationRevisionSpecComponentDefinitionsSpec;

  /**
   * ComponentDefinitionStatus is the status of ComponentDefinition
   *
   * @schema ApplicationRevisionSpecComponentDefinitions#status
   */
  readonly status?: ApplicationRevisionSpecComponentDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitions(obj: ApplicationRevisionSpecComponentDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionSpecComponentDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionSpecComponentDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionSpecComponentDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RawComponent record raw component
 *
 * @schema ApplicationRevisionSpecComponents
 */
export interface ApplicationRevisionSpecComponents {
  /**
   * @schema ApplicationRevisionSpecComponents#raw
   */
  readonly raw: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponents(obj: ApplicationRevisionSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'raw': obj.raw,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ApplicationRevisionSpecScopeDefinitions
 */
export interface ApplicationRevisionSpecScopeDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionSpecScopeDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecScopeDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionSpecScopeDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionSpecScopeDefinitionsMetadata;

  /**
   * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
   *
   * @schema ApplicationRevisionSpecScopeDefinitions#spec
   */
  readonly spec?: ApplicationRevisionSpecScopeDefinitionsSpec;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecScopeDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecScopeDefinitions(obj: ApplicationRevisionSpecScopeDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionSpecScopeDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionSpecScopeDefinitionsSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ApplicationRevisionSpecTraitDefinitions
 */
export interface ApplicationRevisionSpecTraitDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionSpecTraitDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecTraitDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionSpecTraitDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionSpecTraitDefinitionsMetadata;

  /**
   * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
   *
   * @schema ApplicationRevisionSpecTraitDefinitions#spec
   */
  readonly spec?: ApplicationRevisionSpecTraitDefinitionsSpec;

  /**
   * TraitDefinitionStatus is the status of TraitDefinition
   *
   * @schema ApplicationRevisionSpecTraitDefinitions#status
   */
  readonly status?: ApplicationRevisionSpecTraitDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitions(obj: ApplicationRevisionSpecTraitDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionSpecTraitDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionSpecTraitDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionSpecTraitDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitions
 */
export interface ApplicationRevisionSpecWorkloadDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionSpecWorkloadDefinitionsMetadata;

  /**
   * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitions#spec
   */
  readonly spec?: ApplicationRevisionSpecWorkloadDefinitionsSpec;

  /**
   * WorkloadDefinitionStatus is the status of WorkloadDefinition
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitions#status
   */
  readonly status?: ApplicationRevisionSpecWorkloadDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitions(obj: ApplicationRevisionSpecWorkloadDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionSpecWorkloadDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionSpecWorkloadDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionSpecApplicationMetadata
 */
export interface ApplicationRevisionSpecApplicationMetadata {
  /**
   * @schema ApplicationRevisionSpecApplicationMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecApplicationMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionSpecApplicationMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecApplicationMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationMetadata(obj: ApplicationRevisionSpecApplicationMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec is the spec of Application
 *
 * @schema ApplicationRevisionSpecApplicationSpec
 */
export interface ApplicationRevisionSpecApplicationSpec {
  /**
   * @schema ApplicationRevisionSpecApplicationSpec#components
   */
  readonly components: ApplicationRevisionSpecApplicationSpecComponents[];

  /**
   * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
   *
   * @schema ApplicationRevisionSpecApplicationSpec#rolloutPlan
   */
  readonly rolloutPlan?: ApplicationRevisionSpecApplicationSpecRolloutPlan;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpec(obj: ApplicationRevisionSpecApplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_ApplicationRevisionSpecApplicationSpecComponents(y)),
    'rolloutPlan': toJson_ApplicationRevisionSpecApplicationSpecRolloutPlan(obj.rolloutPlan),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppStatus defines the observed state of Application
 *
 * @schema ApplicationRevisionSpecApplicationStatus
 */
export interface ApplicationRevisionSpecApplicationStatus {
  /**
   * AppliedResources record the resources that the  workflow step apply.
   *
   * @schema ApplicationRevisionSpecApplicationStatus#appliedResources
   */
  readonly appliedResources?: ApplicationRevisionSpecApplicationStatusAppliedResources[];

  /**
   * Components record the related Components created by Application Controller
   *
   * @schema ApplicationRevisionSpecApplicationStatus#components
   */
  readonly components?: ApplicationRevisionSpecApplicationStatusComponents[];

  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionSpecApplicationStatus#conditions
   */
  readonly conditions?: ApplicationRevisionSpecApplicationStatusConditions[];

  /**
   * LatestRevision of the application configuration it generates
   *
   * @schema ApplicationRevisionSpecApplicationStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionSpecApplicationStatusLatestRevision;

  /**
   * The generation observed by the application controller.
   *
   * @schema ApplicationRevisionSpecApplicationStatus#observedGeneration
   */
  readonly observedGeneration?: number;

  /**
   * PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
   *
   * @schema ApplicationRevisionSpecApplicationStatus#policy
   */
  readonly policy?: ApplicationRevisionSpecApplicationStatusPolicy[];

  /**
   * Services record the status of the application services
   *
   * @schema ApplicationRevisionSpecApplicationStatus#services
   */
  readonly services?: ApplicationRevisionSpecApplicationStatusServices[];

  /**
   * ApplicationPhase is a label for the condition of an application at the current time
   *
   * @schema ApplicationRevisionSpecApplicationStatus#status
   */
  readonly status?: string;

  /**
   * Workflow record the status of workflow
   *
   * @schema ApplicationRevisionSpecApplicationStatus#workflow
   */
  readonly workflow?: ApplicationRevisionSpecApplicationStatusWorkflow;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatus(obj: ApplicationRevisionSpecApplicationStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliedResources': obj.appliedResources?.map(y => toJson_ApplicationRevisionSpecApplicationStatusAppliedResources(y)),
    'components': obj.components?.map(y => toJson_ApplicationRevisionSpecApplicationStatusComponents(y)),
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionSpecApplicationStatusConditions(y)),
    'latestRevision': toJson_ApplicationRevisionSpecApplicationStatusLatestRevision(obj.latestRevision),
    'observedGeneration': obj.observedGeneration,
    'policy': obj.policy?.map(y => toJson_ApplicationRevisionSpecApplicationStatusPolicy(y)),
    'services': obj.services?.map(y => toJson_ApplicationRevisionSpecApplicationStatusServices(y)),
    'status': obj.status,
    'workflow': toJson_ApplicationRevisionSpecApplicationStatusWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionSpecComponentDefinitionsMetadata
 */
export interface ApplicationRevisionSpecComponentDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsMetadata(obj: ApplicationRevisionSpecComponentDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionSpec defines the desired state of ComponentDefinition
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpec
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#childResourceKinds
   */
  readonly childResourceKinds?: ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds[];

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionSpecComponentDefinitionsSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionSpecComponentDefinitionsSpecStatus;

  /**
   * Workload is a workload type descriptor
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpec#workload
   */
  readonly workload: ApplicationRevisionSpecComponentDefinitionsSpecWorkload;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpec(obj: ApplicationRevisionSpecComponentDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds(y)),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematic(obj.schematic),
    'status': toJson_ApplicationRevisionSpecComponentDefinitionsSpecStatus(obj.status),
    'workload': toJson_ApplicationRevisionSpecComponentDefinitionsSpecWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionStatus is the status of ComponentDefinition
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsStatus
 */
export interface ApplicationRevisionSpecComponentDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionSpecComponentDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsStatus(obj: ApplicationRevisionSpecComponentDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionSpecComponentDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionSpecScopeDefinitionsMetadata
 */
export interface ApplicationRevisionSpecScopeDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionSpecScopeDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecScopeDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionSpecScopeDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecScopeDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionSpecScopeDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecScopeDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecScopeDefinitionsMetadata(obj: ApplicationRevisionSpecScopeDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
 *
 * @schema ApplicationRevisionSpecScopeDefinitionsSpec
 */
export interface ApplicationRevisionSpecScopeDefinitionsSpec {
  /**
   * AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpec#allowComponentOverlap
   */
  readonly allowComponentOverlap: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this scope kind.
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpec#definitionRef
   */
  readonly definitionRef: ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * WorkloadRefsPath indicates if/where a scope accepts workloadRef objects
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpec#workloadRefsPath
   */
  readonly workloadRefsPath?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecScopeDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecScopeDefinitionsSpec(obj: ApplicationRevisionSpecScopeDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowComponentOverlap': obj.allowComponentOverlap,
    'definitionRef': toJson_ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'workloadRefsPath': obj.workloadRefsPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionSpecTraitDefinitionsMetadata
 */
export interface ApplicationRevisionSpecTraitDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsMetadata(obj: ApplicationRevisionSpecTraitDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpec
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpec {
  /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#appliesToWorkloads
   */
  readonly appliesToWorkloads?: string[];

  /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: "service" # Trait definition name "services.k8s.io" # API resource/crd name "*.networking.k8s.io" # API group "labelSelector:foo=bar" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#conflictsWith
   */
  readonly conflictsWith?: string[];

  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#definitionRef
   */
  readonly definitionRef?: ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#podDisruptive
   */
  readonly podDisruptive?: boolean;

  /**
   * Revision indicates whether a trait is aware of component revision
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#revisionEnabled
   */
  readonly revisionEnabled?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the trait
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionSpecTraitDefinitionsSpecSchematic;

  /**
   * Status defines the custom health policy and status message for trait
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionSpecTraitDefinitionsSpecStatus;

  /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpec#workloadRefPath
   */
  readonly workloadRefPath?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpec(obj: ApplicationRevisionSpecTraitDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliesToWorkloads': obj.appliesToWorkloads?.map(y => y),
    'conflictsWith': obj.conflictsWith?.map(y => y),
    'definitionRef': toJson_ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podDisruptive': obj.podDisruptive,
    'revisionEnabled': obj.revisionEnabled,
    'schematic': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematic(obj.schematic),
    'status': toJson_ApplicationRevisionSpecTraitDefinitionsSpecStatus(obj.status),
    'workloadRefPath': obj.workloadRefPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TraitDefinitionStatus is the status of TraitDefinition
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsStatus
 */
export interface ApplicationRevisionSpecTraitDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionSpecTraitDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the trait definition
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsStatus(obj: ApplicationRevisionSpecTraitDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionSpecTraitDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionSpecWorkloadDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsMetadata(obj: ApplicationRevisionSpecWorkloadDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#childResourceKinds
   */
  readonly childResourceKinds?: ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds[];

  /**
   * Reference to the CustomResourceDefinition that defines this workload kind.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#definitionRef
   */
  readonly definitionRef: ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionSpecWorkloadDefinitionsSpecStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpec(obj: ApplicationRevisionSpecWorkloadDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds(y)),
    'definitionRef': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic(obj.schematic),
    'status': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadDefinitionStatus is the status of WorkloadDefinition
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsStatus
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionSpecWorkloadDefinitionsStatusConditions[];

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsStatus(obj: ApplicationRevisionSpecWorkloadDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionSpecWorkloadDefinitionsStatusConditions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema ApplicationRevisionSpecApplicationSpecComponents
 */
export interface ApplicationRevisionSpecApplicationSpecComponents {
  /**
   * @schema ApplicationRevisionSpecApplicationSpecComponents#name
   */
  readonly name: string;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema ApplicationRevisionSpecApplicationSpecComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionSpecApplicationSpecComponents#settings
   */
  readonly settings?: any;

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema ApplicationRevisionSpecApplicationSpecComponents#traits
   */
  readonly traits?: ApplicationRevisionSpecApplicationSpecComponentsTraits[];

  /**
   * @schema ApplicationRevisionSpecApplicationSpecComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecComponents(obj: ApplicationRevisionSpecApplicationSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'settings': obj.settings,
    'traits': obj.traits?.map(y => toJson_ApplicationRevisionSpecApplicationSpecComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlan(obj: ApplicationRevisionSpecApplicationSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterObjectReference defines the object reference with cluster.
 *
 * @schema ApplicationRevisionSpecApplicationStatusAppliedResources
 */
export interface ApplicationRevisionSpecApplicationStatusAppliedResources {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#cluster
   */
  readonly cluster?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#creator
   */
  readonly creator?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationStatusAppliedResources#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusAppliedResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusAppliedResources(obj: ApplicationRevisionSpecApplicationStatusAppliedResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'cluster': obj.cluster,
    'creator': obj.creator,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionSpecApplicationStatusComponents
 */
export interface ApplicationRevisionSpecApplicationStatusComponents {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationStatusComponents#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusComponents(obj: ApplicationRevisionSpecApplicationStatusComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionSpecApplicationStatusConditions
 */
export interface ApplicationRevisionSpecApplicationStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionSpecApplicationStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionSpecApplicationStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionSpecApplicationStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionSpecApplicationStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionSpecApplicationStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusConditions(obj: ApplicationRevisionSpecApplicationStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the application configuration it generates
 *
 * @schema ApplicationRevisionSpecApplicationStatusLatestRevision
 */
export interface ApplicationRevisionSpecApplicationStatusLatestRevision {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionSpecApplicationStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusLatestRevision(obj: ApplicationRevisionSpecApplicationStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyStatus records the status of policy Deprecated
 *
 * @schema ApplicationRevisionSpecApplicationStatusPolicy
 */
export interface ApplicationRevisionSpecApplicationStatusPolicy {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusPolicy#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusPolicy#status
   */
  readonly status?: any;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusPolicy#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusPolicy(obj: ApplicationRevisionSpecApplicationStatusPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponentStatus record the health status of App component
 *
 * @schema ApplicationRevisionSpecApplicationStatusServices
 */
export interface ApplicationRevisionSpecApplicationStatusServices {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#cluster
   */
  readonly cluster?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#env
   */
  readonly env?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#scopes
   */
  readonly scopes?: ApplicationRevisionSpecApplicationStatusServicesScopes[];

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServices#traits
   */
  readonly traits?: ApplicationRevisionSpecApplicationStatusServicesTraits[];

  /**
   * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
   *
   * @schema ApplicationRevisionSpecApplicationStatusServices#workloadDefinition
   */
  readonly workloadDefinition?: ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusServices(obj: ApplicationRevisionSpecApplicationStatusServices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cluster': obj.cluster,
    'env': obj.env,
    'healthy': obj.healthy,
    'message': obj.message,
    'name': obj.name,
    'namespace': obj.namespace,
    'scopes': obj.scopes?.map(y => toJson_ApplicationRevisionSpecApplicationStatusServicesScopes(y)),
    'traits': obj.traits?.map(y => toJson_ApplicationRevisionSpecApplicationStatusServicesTraits(y)),
    'workloadDefinition': toJson_ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition(obj.workloadDefinition),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow record the status of workflow
 *
 * @schema ApplicationRevisionSpecApplicationStatusWorkflow
 */
export interface ApplicationRevisionSpecApplicationStatusWorkflow {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#appRevision
   */
  readonly appRevision?: string;

  /**
   * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#contextBackend
   */
  readonly contextBackend?: ApplicationRevisionSpecApplicationStatusWorkflowContextBackend;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#endTime
   */
  readonly endTime?: Date;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#finished
   */
  readonly finished: boolean;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#mode
   */
  readonly mode: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#startTime
   */
  readonly startTime?: Date;

  /**
   * WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#status
   */
  readonly status?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#steps
   */
  readonly steps?: ApplicationRevisionSpecApplicationStatusWorkflowSteps[];

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#suspend
   */
  readonly suspend: boolean;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#suspendState
   */
  readonly suspendState?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflow#terminated
   */
  readonly terminated: boolean;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusWorkflow(obj: ApplicationRevisionSpecApplicationStatusWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appRevision': obj.appRevision,
    'contextBackend': toJson_ApplicationRevisionSpecApplicationStatusWorkflowContextBackend(obj.contextBackend),
    'endTime': obj.endTime?.toISOString(),
    'finished': obj.finished,
    'message': obj.message,
    'mode': obj.mode,
    'startTime': obj.startTime?.toISOString(),
    'status': obj.status,
    'steps': obj.steps?.map(y => toJson_ApplicationRevisionSpecApplicationStatusWorkflowSteps(y)),
    'suspend': obj.suspend,
    'suspendState': obj.suspendState,
    'terminated': obj.terminated,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds(obj: ApplicationRevisionSpecComponentDefinitionsSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematic
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematic(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecStatus
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecStatus(obj: ApplicationRevisionSpecComponentDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workload is a workload type descriptor
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkload
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecWorkload {
  /**
   * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkload#definition
   */
  readonly definition?: ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition;

  /**
   * Type ref to a WorkloadDefinition via name
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkload#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecWorkload(obj: ApplicationRevisionSpecComponentDefinitionsSpecWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': toJson_ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition(obj.definition),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions
 */
export interface ApplicationRevisionSpecComponentDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsStatusConditions(obj: ApplicationRevisionSpecComponentDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision(obj: ApplicationRevisionSpecComponentDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this scope kind.
 *
 * @schema ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef(obj: ApplicationRevisionSpecScopeDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef(obj: ApplicationRevisionSpecTraitDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the trait
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematic
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematic(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for trait
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecStatus
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecStatus(obj: ApplicationRevisionSpecTraitDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions
 */
export interface ApplicationRevisionSpecTraitDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsStatusConditions(obj: ApplicationRevisionSpecTraitDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the trait definition
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision(obj: ApplicationRevisionSpecTraitDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this workload kind.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecStatus
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecStatus(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsStatusConditions(obj: ApplicationRevisionSpecWorkloadDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema ApplicationRevisionSpecApplicationSpecComponentsTraits
 */
export interface ApplicationRevisionSpecApplicationSpecComponentsTraits {
  /**
   * @schema ApplicationRevisionSpecApplicationSpecComponentsTraits#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionSpecApplicationSpecComponentsTraits#properties
   */
  readonly properties?: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecComponentsTraits(obj: ApplicationRevisionSpecApplicationSpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'properties': obj.properties,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionSpecApplicationStatusServicesScopes
 */
export interface ApplicationRevisionSpecApplicationStatusServicesScopes {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationStatusServicesScopes#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusServicesScopes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusServicesScopes(obj: ApplicationRevisionSpecApplicationStatusServicesScopes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTraitStatus records the trait health status
 *
 * @schema ApplicationRevisionSpecApplicationStatusServicesTraits
 */
export interface ApplicationRevisionSpecApplicationStatusServicesTraits {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusServicesTraits#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServicesTraits#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServicesTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusServicesTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusServicesTraits(obj: ApplicationRevisionSpecApplicationStatusServicesTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'healthy': obj.healthy,
    'message': obj.message,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
 *
 * @schema ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition
 */
export interface ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition {
  /**
   * @schema ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition(obj: ApplicationRevisionSpecApplicationStatusServicesWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend
 */
export interface ApplicationRevisionSpecApplicationStatusWorkflowContextBackend {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowContextBackend#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusWorkflowContextBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusWorkflowContextBackend(obj: ApplicationRevisionSpecApplicationStatusWorkflowContextBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepStatus record the status of a workflow step, include step status and subStep status
 *
 * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps
 */
export interface ApplicationRevisionSpecApplicationStatusWorkflowSteps {
  /**
   * FirstExecuteTime is the first time this step execution.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#firstExecuteTime
   */
  readonly firstExecuteTime?: Date;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#id
   */
  readonly id: string;

  /**
   * LastExecuteTime is the last time this step execution.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#lastExecuteTime
   */
  readonly lastExecuteTime?: Date;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#reason
   */
  readonly reason?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#subSteps
   */
  readonly subSteps?: ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps[];

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusWorkflowSteps(obj: ApplicationRevisionSpecApplicationStatusWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstExecuteTime': obj.firstExecuteTime?.toISOString(),
    'id': obj.id,
    'lastExecuteTime': obj.lastExecuteTime?.toISOString(),
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'subSteps': obj.subSteps?.map(y => toJson_ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition {
  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition(obj: ApplicationRevisionSpecComponentDefinitionsSpecWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * StepStatus record the base status of workflow step, which could be workflow step or subStep
 *
 * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps
 */
export interface ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps {
  /**
   * FirstExecuteTime is the first time this step execution.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#firstExecuteTime
   */
  readonly firstExecuteTime?: Date;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#id
   */
  readonly id: string;

  /**
   * LastExecuteTime is the last time this step execution.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#lastExecuteTime
   */
  readonly lastExecuteTime?: Date;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#reason
   */
  readonly reason?: string;

  /**
   * @schema ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps(obj: ApplicationRevisionSpecApplicationStatusWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstExecuteTime': obj.firstExecuteTime?.toISOString(),
    'id': obj.id,
    'lastExecuteTime': obj.lastExecuteTime?.toISOString(),
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionSpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionSpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionSpecComponentDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionSpecTraitDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionSpecWorkloadDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * Maximum value
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new ApplicationRevisionSpecApplicationSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * ApplicationRevision is the Schema for the ApplicationRevision API
 *
 * @schema ApplicationRevisionV1Beta1
 */
export class ApplicationRevisionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ApplicationRevisionV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'ApplicationRevision',
  }

  /**
   * Renders a Kubernetes manifest for "ApplicationRevisionV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationRevisionV1Beta1Props = {}): any {
    return {
      ...ApplicationRevisionV1Beta1.GVK,
      ...toJson_ApplicationRevisionV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ApplicationRevisionV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationRevisionV1Beta1Props = {}) {
    super(scope, id, {
      ...ApplicationRevisionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ApplicationRevisionV1Beta1.GVK,
      ...toJson_ApplicationRevisionV1Beta1Props(resolved),
    };
  }
}

/**
 * ApplicationRevision is the Schema for the ApplicationRevision API
 *
 * @schema ApplicationRevisionV1Beta1
 */
export interface ApplicationRevisionV1Beta1Props {
  /**
   * @schema ApplicationRevisionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ApplicationRevisionSpec is the spec of ApplicationRevision
   *
   * @schema ApplicationRevisionV1Beta1#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1Spec;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1Props(obj: ApplicationRevisionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ApplicationRevisionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationRevisionSpec is the spec of ApplicationRevision
 *
 * @schema ApplicationRevisionV1Beta1Spec
 */
export interface ApplicationRevisionV1Beta1Spec {
  /**
   * Application records the snapshot of the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#application
   */
  readonly application: ApplicationRevisionV1Beta1SpecApplication;

  /**
   * ComponentDefinitions records the snapshot of the componentDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#componentDefinitions
   */
  readonly componentDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecComponentDefinitions };

  /**
   * Policies records the external policies
   *
   * @schema ApplicationRevisionV1Beta1Spec#policies
   */
  readonly policies?: { [key: string]: ApplicationRevisionV1Beta1SpecPolicies };

  /**
   * PolicyDefinitions records the snapshot of the PolicyDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#policyDefinitions
   */
  readonly policyDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecPolicyDefinitions };

  /**
   * ReferredObjects records the referred objects used in the ref-object typed components
   *
   * @schema ApplicationRevisionV1Beta1Spec#referredObjects
   */
  readonly referredObjects?: any[];

  /**
   * ScopeDefinitions records the snapshot of the scopeDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#scopeDefinitions
   */
  readonly scopeDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecScopeDefinitions };

  /**
   * ScopeGVK records the apiVersion to GVK mapping
   *
   * @schema ApplicationRevisionV1Beta1Spec#scopeGVK
   */
  readonly scopeGvk?: { [key: string]: ApplicationRevisionV1Beta1SpecScopeGvk };

  /**
   * TraitDefinitions records the snapshot of the traitDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#traitDefinitions
   */
  readonly traitDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecTraitDefinitions };

  /**
   * Workflow records the external workflow
   *
   * @schema ApplicationRevisionV1Beta1Spec#workflow
   */
  readonly workflow?: ApplicationRevisionV1Beta1SpecWorkflow;

  /**
   * WorkflowStepDefinitions records the snapshot of the WorkflowStepDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#workflowStepDefinitions
   */
  readonly workflowStepDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions };

  /**
   * WorkloadDefinitions records the snapshot of the workloadDefinitions related with the created/modified Application
   *
   * @schema ApplicationRevisionV1Beta1Spec#workloadDefinitions
   */
  readonly workloadDefinitions?: { [key: string]: ApplicationRevisionV1Beta1SpecWorkloadDefinitions };

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1Spec(obj: ApplicationRevisionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'application': toJson_ApplicationRevisionV1Beta1SpecApplication(obj.application),
    'componentDefinitions': ((obj.componentDefinitions) === undefined) ? undefined : (Object.entries(obj.componentDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecComponentDefinitions(i[1]) }), {})),
    'policies': ((obj.policies) === undefined) ? undefined : (Object.entries(obj.policies).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecPolicies(i[1]) }), {})),
    'policyDefinitions': ((obj.policyDefinitions) === undefined) ? undefined : (Object.entries(obj.policyDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitions(i[1]) }), {})),
    'referredObjects': obj.referredObjects?.map(y => y),
    'scopeDefinitions': ((obj.scopeDefinitions) === undefined) ? undefined : (Object.entries(obj.scopeDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecScopeDefinitions(i[1]) }), {})),
    'scopeGVK': ((obj.scopeGvk) === undefined) ? undefined : (Object.entries(obj.scopeGvk).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecScopeGvk(i[1]) }), {})),
    'traitDefinitions': ((obj.traitDefinitions) === undefined) ? undefined : (Object.entries(obj.traitDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecTraitDefinitions(i[1]) }), {})),
    'workflow': toJson_ApplicationRevisionV1Beta1SpecWorkflow(obj.workflow),
    'workflowStepDefinitions': ((obj.workflowStepDefinitions) === undefined) ? undefined : (Object.entries(obj.workflowStepDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions(i[1]) }), {})),
    'workloadDefinitions': ((obj.workloadDefinitions) === undefined) ? undefined : (Object.entries(obj.workloadDefinitions).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitions(i[1]) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Application records the snapshot of the created/modified Application
 *
 * @schema ApplicationRevisionV1Beta1SpecApplication
 */
export interface ApplicationRevisionV1Beta1SpecApplication {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecApplication#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecApplication#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplication#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecApplicationMetadata;

  /**
   * ApplicationSpec is the spec of Application
   *
   * @schema ApplicationRevisionV1Beta1SpecApplication#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecApplicationSpec;

  /**
   * AppStatus defines the observed state of Application
   *
   * @schema ApplicationRevisionV1Beta1SpecApplication#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecApplicationStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplication' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplication(obj: ApplicationRevisionV1Beta1SpecApplication | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecApplicationMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecApplicationSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecApplicationStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata;

  /**
   * ComponentDefinitionSpec defines the desired state of ComponentDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec;

  /**
   * ComponentDefinitionStatus is the status of ComponentDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitions#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitions(obj: ApplicationRevisionV1Beta1SpecComponentDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policy is the Schema for the policy API
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicies
 */
export interface ApplicationRevisionV1Beta1SpecPolicies {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicies#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicies#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicies#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecPoliciesMetadata;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicies#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicies#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicies(obj: ApplicationRevisionV1Beta1SpecPolicies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecPoliciesMetadata(obj.metadata),
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinition is the Schema for the policydefinitions API
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata;

  /**
   * PolicyDefinitionSpec defines the desired state of PolicyDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec;

  /**
   * PolicyDefinitionStatus is the status of PolicyDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitions#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitions(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ApplicationRevisionV1Beta1SpecScopeDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecScopeDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata;

  /**
   * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecScopeDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecScopeDefinitions(obj: ApplicationRevisionV1Beta1SpecScopeDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coercion.  It doesn't use a GroupVersion to avoid custom marshalling
 *
 * @schema ApplicationRevisionV1Beta1SpecScopeGvk
 */
export interface ApplicationRevisionV1Beta1SpecScopeGvk {
  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeGvk#group
   */
  readonly group: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeGvk#kind
   */
  readonly kind: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeGvk#version
   */
  readonly version: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecScopeGvk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecScopeGvk(obj: ApplicationRevisionV1Beta1SpecScopeGvk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata;

  /**
   * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec;

  /**
   * TraitDefinitionStatus is the status of TraitDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitions#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitions(obj: ApplicationRevisionV1Beta1SpecTraitDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow records the external workflow
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflow
 */
export interface ApplicationRevisionV1Beta1SpecWorkflow {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflow#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflow#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflow#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecWorkflowMetadata;

  /**
   * WorkflowExecuteMode defines the mode of workflow execution
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflow#mode
   */
  readonly mode?: ApplicationRevisionV1Beta1SpecWorkflowMode;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflow#steps
   */
  readonly steps?: ApplicationRevisionV1Beta1SpecWorkflowSteps[];

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflow(obj: ApplicationRevisionV1Beta1SpecWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecWorkflowMetadata(obj.metadata),
    'mode': toJson_ApplicationRevisionV1Beta1SpecWorkflowMode(obj.mode),
    'steps': obj.steps?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinition is the Schema for the workflowstepdefinitions API
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata;

  /**
   * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec;

  /**
   * WorkflowStepDefinitionStatus is the status of WorkflowStepDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitions {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions#kind
   */
  readonly kind?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions#metadata
   */
  readonly metadata?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata;

  /**
   * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions#spec
   */
  readonly spec?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec;

  /**
   * WorkloadDefinitionStatus is the status of WorkloadDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitions#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitions(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata(obj.metadata),
    'spec': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec(obj.spec),
    'status': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata
 */
export interface ApplicationRevisionV1Beta1SpecApplicationMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationMetadata(obj: ApplicationRevisionV1Beta1SpecApplicationMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec is the spec of Application
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpec
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpec {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpec#components
   */
  readonly components: ApplicationRevisionV1Beta1SpecApplicationSpecComponents[];

  /**
   * Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpec#policies
   */
  readonly policies?: ApplicationRevisionV1Beta1SpecApplicationSpecPolicies[];

  /**
   * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpec#workflow
   */
  readonly workflow?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpec(obj: ApplicationRevisionV1Beta1SpecApplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponents(y)),
    'policies': obj.policies?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecPolicies(y)),
    'workflow': toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppStatus defines the observed state of Application
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatus
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatus {
  /**
   * AppliedResources record the resources that the  workflow step apply.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#appliedResources
   */
  readonly appliedResources?: ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources[];

  /**
   * Components record the related Components created by Application Controller
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#components
   */
  readonly components?: ApplicationRevisionV1Beta1SpecApplicationStatusComponents[];

  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecApplicationStatusConditions[];

  /**
   * LatestRevision of the application configuration it generates
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision;

  /**
   * The generation observed by the application controller.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#observedGeneration
   */
  readonly observedGeneration?: number;

  /**
   * PolicyStatus records the status of policy Deprecated This field is only used by EnvBinding Policy which is deprecated.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#policy
   */
  readonly policy?: ApplicationRevisionV1Beta1SpecApplicationStatusPolicy[];

  /**
   * Services record the status of the application services
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#services
   */
  readonly services?: ApplicationRevisionV1Beta1SpecApplicationStatusServices[];

  /**
   * ApplicationPhase is a label for the condition of an application at the current time
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#status
   */
  readonly status?: string;

  /**
   * Workflow record the status of workflow
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatus#workflow
   */
  readonly workflow?: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatus(obj: ApplicationRevisionV1Beta1SpecApplicationStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliedResources': obj.appliedResources?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources(y)),
    'components': obj.components?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusComponents(y)),
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusConditions(y)),
    'latestRevision': toJson_ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision(obj.latestRevision),
    'observedGeneration': obj.observedGeneration,
    'policy': obj.policy?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusPolicy(y)),
    'services': obj.services?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServices(y)),
    'status': obj.status,
    'workflow': toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionSpec defines the desired state of ComponentDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#childResourceKinds
   */
  readonly childResourceKinds?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds[];

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus;

  /**
   * Workload is a workload type descriptor
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec#workload
   */
  readonly workload: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds(y)),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic(obj.schematic),
    'status': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus(obj.status),
    'workload': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionStatus is the status of ComponentDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata
 */
export interface ApplicationRevisionV1Beta1SpecPoliciesMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPoliciesMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPoliciesMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPoliciesMetadata(obj: ApplicationRevisionV1Beta1SpecPoliciesMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinitionSpec defines the desired state of PolicyDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec#definitionRef
   */
  readonly definitionRef?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef;

  /**
   * ManageHealthCheck means the policy will handle health checking and skip application controller built-in health checking.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec#manageHealthCheck
   */
  readonly manageHealthCheck?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef(obj.definitionRef),
    'manageHealthCheck': obj.manageHealthCheck,
    'schematic': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinitionStatus is the status of PolicyDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecScopeDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
 *
 * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec {
  /**
   * AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec#allowComponentOverlap
   */
  readonly allowComponentOverlap: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this scope kind.
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec#definitionRef
   */
  readonly definitionRef: ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * WorkloadRefsPath indicates if/where a scope accepts workloadRef objects
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec#workloadRefsPath
   */
  readonly workloadRefsPath?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecScopeDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowComponentOverlap': obj.allowComponentOverlap,
    'definitionRef': toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'workloadRefsPath': obj.workloadRefsPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec {
  /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in resource.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#appliesToWorkloads
   */
  readonly appliesToWorkloads?: string[];

  /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: "service" # Trait definition name "services.k8s.io" # API resource/crd name "*.networking.k8s.io" # API group "labelSelector:foo=bar" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#conflictsWith
   */
  readonly conflictsWith?: string[];

  /**
   * ControlPlaneOnly defines which cluster is dispatched to
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#controlPlaneOnly
   */
  readonly controlPlaneOnly?: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#definitionRef
   */
  readonly definitionRef?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * ManageWorkload defines the trait would be responsible for creating the workload
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#manageWorkload
   */
  readonly manageWorkload?: boolean;

  /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#podDisruptive
   */
  readonly podDisruptive?: boolean;

  /**
   * Revision indicates whether a trait is aware of component revision
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#revisionEnabled
   */
  readonly revisionEnabled?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic;

  /**
   * Stage defines the stage information to which this trait resource processing belongs. Currently, PreDispatch and PostDispatch are provided, which are used to control resource pre-process and post-process respectively.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#stage
   */
  readonly stage?: string;

  /**
   * Status defines the custom health policy and status message for trait
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus;

  /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec#workloadRefPath
   */
  readonly workloadRefPath?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliesToWorkloads': obj.appliesToWorkloads?.map(y => y),
    'conflictsWith': obj.conflictsWith?.map(y => y),
    'controlPlaneOnly': obj.controlPlaneOnly,
    'definitionRef': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'manageWorkload': obj.manageWorkload,
    'podDisruptive': obj.podDisruptive,
    'revisionEnabled': obj.revisionEnabled,
    'schematic': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic(obj.schematic),
    'stage': obj.stage,
    'status': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus(obj.status),
    'workloadRefPath': obj.workloadRefPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TraitDefinitionStatus is the status of TraitDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowMetadata(obj: ApplicationRevisionV1Beta1SpecWorkflowMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowExecuteMode defines the mode of workflow execution
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowMode
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowMode {
  /**
   * Steps is the mode of workflow steps execution
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMode#steps
   */
  readonly steps?: string;

  /**
   * SubSteps is the mode of workflow sub steps execution
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowMode#subSteps
   */
  readonly subSteps?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowMode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowMode(obj: ApplicationRevisionV1Beta1SpecWorkflowMode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'steps': obj.steps,
    'subSteps': obj.subSteps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStep defines how to execute a workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#inputs
   */
  readonly inputs?: ApplicationRevisionV1Beta1SpecWorkflowStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#meta
   */
  readonly meta?: ApplicationRevisionV1Beta1SpecWorkflowStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#outputs
   */
  readonly outputs?: ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#subSteps
   */
  readonly subSteps?: ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps[];

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowSteps(obj: ApplicationRevisionV1Beta1SpecWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsInputs(y)),
    'meta': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs(y)),
    'properties': obj.properties,
    'subSteps': obj.subSteps?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps(y)),
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec#definitionRef
   */
  readonly definitionRef?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef;

  /**
   * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef(obj.definitionRef),
    'schematic': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinitionStatus is the status of WorkflowStepDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus#latestRevision
   */
  readonly latestRevision?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#childResourceKinds
   */
  readonly childResourceKinds?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds[];

  /**
   * Reference to the CustomResourceDefinition that defines this workload kind.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#definitionRef
   */
  readonly definitionRef: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#schematic
   */
  readonly schematic?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec#status
   */
  readonly status?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds(y)),
    'definitionRef': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic(obj.schematic),
    'status': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadDefinitionStatus is the status of WorkloadDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus {
  /**
   * Conditions of the resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus#conditions
   */
  readonly conditions?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions[];

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecComponents {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * ExternalRevision specified the component revisionName
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#externalRevision
   */
  readonly externalRevision?: string;

  /**
   * StepInputs defines variable input of WorkflowStep
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#inputs
   */
  readonly inputs?: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#name
   */
  readonly name: string;

  /**
   * StepOutputs defines output variable of WorkflowStep
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#outputs
   */
  readonly outputs?: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#properties
   */
  readonly properties?: any;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#traits
   */
  readonly traits?: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponents(obj: ApplicationRevisionV1Beta1SpecApplicationSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'externalRevision': obj.externalRevision,
    'inputs': obj.inputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs(y)),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs(y)),
    'properties': obj.properties,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'traits': obj.traits?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppPolicy defines a global policy for all components in the app.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecPolicies
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecPolicies {
  /**
   * Name is the unique name of the policy.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecPolicies#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecPolicies#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecPolicies#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecPolicies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecPolicies(obj: ApplicationRevisionV1Beta1SpecApplicationSpecPolicies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow {
  /**
   * WorkflowExecuteMode defines the mode of workflow execution
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow#mode
   */
  readonly mode?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow#ref
   */
  readonly ref?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow#steps
   */
  readonly steps?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps[];

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode(obj.mode),
    'ref': obj.ref,
    'steps': obj.steps?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterObjectReference defines the object reference with cluster.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#cluster
   */
  readonly cluster?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#creator
   */
  readonly creator?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources(obj: ApplicationRevisionV1Beta1SpecApplicationStatusAppliedResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'cluster': obj.cluster,
    'creator': obj.creator,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusComponents {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusComponents#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusComponents(obj: ApplicationRevisionV1Beta1SpecApplicationStatusComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusConditions(obj: ApplicationRevisionV1Beta1SpecApplicationStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the application configuration it generates
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision(obj: ApplicationRevisionV1Beta1SpecApplicationStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyStatus records the status of policy Deprecated
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusPolicy
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusPolicy {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusPolicy#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusPolicy#status
   */
  readonly status?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusPolicy#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusPolicy(obj: ApplicationRevisionV1Beta1SpecApplicationStatusPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponentStatus record the health status of App component
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusServices {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#cluster
   */
  readonly cluster?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#env
   */
  readonly env?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#scopes
   */
  readonly scopes?: ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#traits
   */
  readonly traits?: ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits[];

  /**
   * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServices#workloadDefinition
   */
  readonly workloadDefinition?: ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServices(obj: ApplicationRevisionV1Beta1SpecApplicationStatusServices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cluster': obj.cluster,
    'env': obj.env,
    'healthy': obj.healthy,
    'message': obj.message,
    'name': obj.name,
    'namespace': obj.namespace,
    'scopes': obj.scopes?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes(y)),
    'traits': obj.traits?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits(y)),
    'workloadDefinition': toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition(obj.workloadDefinition),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow record the status of workflow
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#appRevision
   */
  readonly appRevision?: string;

  /**
   * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#contextBackend
   */
  readonly contextBackend?: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#endTime
   */
  readonly endTime?: Date;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#finished
   */
  readonly finished: boolean;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#mode
   */
  readonly mode: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#startTime
   */
  readonly startTime?: Date;

  /**
   * WorkflowRunPhase is a label for the condition of a WorkflowRun at the current time
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#status
   */
  readonly status?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#steps
   */
  readonly steps?: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#suspend
   */
  readonly suspend: boolean;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#suspendState
   */
  readonly suspendState?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow#terminated
   */
  readonly terminated: boolean;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow(obj: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appRevision': obj.appRevision,
    'contextBackend': toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend(obj.contextBackend),
    'endTime': obj.endTime?.toISOString(),
    'finished': obj.finished,
    'message': obj.message,
    'mode': obj.mode,
    'startTime': obj.startTime?.toISOString(),
    'status': obj.status,
    'steps': obj.steps?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps(y)),
    'suspend': obj.suspend,
    'suspendState': obj.suspendState,
    'terminated': obj.terminated,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workload is a workload type descriptor
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload {
  /**
   * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload#definition
   */
  readonly definition?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition;

  /**
   * Type ref to a WorkloadDefinition via name
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition(obj.definition),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this scope kind.
 *
 * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef(obj: ApplicationRevisionV1Beta1SpecScopeDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for trait
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsInputs
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsInputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsInputs(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsMeta
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsMeta {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsMeta(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepBase defines the workflow step base
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#inputs
   */
  readonly inputs?: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#meta
   */
  readonly meta?: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#outputs
   */
  readonly outputs?: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#properties
   */
  readonly properties?: any;

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs(y)),
    'meta': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs(y)),
    'properties': obj.properties,
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this workload kind.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic#cue
   */
  readonly cue?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic#helm
   */
  readonly helm?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic#kube
   */
  readonly kube?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic#terraform
   */
  readonly terraform?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue(obj.cue),
    'helm': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm(obj.helm),
    'kube': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube(obj.kube),
    'terraform': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits(obj: ApplicationRevisionV1Beta1SpecApplicationSpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowExecuteMode defines the mode of workflow execution
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode {
  /**
   * Steps is the mode of workflow steps execution
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode#steps
   */
  readonly steps?: string;

  /**
   * SubSteps is the mode of workflow sub steps execution
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode#subSteps
   */
  readonly subSteps?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowMode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'steps': obj.steps,
    'subSteps': obj.subSteps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStep defines how to execute a workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#inputs
   */
  readonly inputs?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#meta
   */
  readonly meta?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#outputs
   */
  readonly outputs?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#properties
   */
  readonly properties?: any;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#subSteps
   */
  readonly subSteps?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps[];

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs(y)),
    'meta': toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs(y)),
    'properties': obj.properties,
    'subSteps': obj.subSteps?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps(y)),
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes(obj: ApplicationRevisionV1Beta1SpecApplicationStatusServicesScopes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTraitStatus records the trait health status
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits(obj: ApplicationRevisionV1Beta1SpecApplicationStatusServicesTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'healthy': obj.healthy,
    'message': obj.message,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition(obj: ApplicationRevisionV1Beta1SpecApplicationStatusServicesWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend {
  /**
   * API version of the referent.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend(obj: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowContextBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepStatus record the status of a workflow step, include step status and subStep status
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps {
  /**
   * FirstExecuteTime is the first time this step execution.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#firstExecuteTime
   */
  readonly firstExecuteTime?: Date;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#id
   */
  readonly id: string;

  /**
   * LastExecuteTime is the last time this step execution.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#lastExecuteTime
   */
  readonly lastExecuteTime?: Date;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#reason
   */
  readonly reason?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#subSteps
   */
  readonly subSteps?: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps[];

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps(obj: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstExecuteTime': obj.firstExecuteTime?.toISOString(),
    'id': obj.id,
    'lastExecuteTime': obj.lastExecuteTime?.toISOString(),
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'subSteps': obj.subSteps?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition {
  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs(obj: ApplicationRevisionV1Beta1SpecWorkflowStepsSubStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube#parameters
   */
  readonly parameters?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#type
   */
  readonly type?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'path': obj.path,
    'providerRef': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepBase defines the workflow step base
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#inputs
   */
  readonly inputs?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#meta
   */
  readonly meta?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#outputs
   */
  readonly outputs?: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#properties
   */
  readonly properties?: any;

  /**
   * Timeout is the timeout of the step
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs(y)),
    'meta': toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs(y)),
    'properties': obj.properties,
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StepStatus record the base status of workflow step, which could be workflow step or subStep
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps
 */
export interface ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps {
  /**
   * FirstExecuteTime is the first time this step execution.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#firstExecuteTime
   */
  readonly firstExecuteTime?: Date;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#id
   */
  readonly id: string;

  /**
   * LastExecuteTime is the last time this step execution.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#lastExecuteTime
   */
  readonly lastExecuteTime?: Date;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#message
   */
  readonly message?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#reason
   */
  readonly reason?: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps(obj: ApplicationRevisionV1Beta1SpecApplicationStatusWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstExecuteTime': obj.firstExecuteTime?.toISOString(),
    'id': obj.id,
    'lastExecuteTime': obj.lastExecuteTime?.toISOString(),
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters#type
   */
  readonly type: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformType
 */
export enum ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef(obj: ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs
 */
export interface ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs {
  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs(obj: ApplicationRevisionV1Beta1SpecApplicationSpecWorkflowStepsSubStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionV1Beta1SpecComponentDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionV1Beta1SpecPolicyDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionV1Beta1SpecTraitDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionV1Beta1SpecWorkflowStepDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParametersType
 */
export enum ApplicationRevisionV1Beta1SpecWorkloadDefinitionsSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * AppRollout is the Schema for the AppRollout API
 *
 * @schema AppRollout
 */
export class AppRollout extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AppRollout"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'AppRollout',
  }

  /**
   * Renders a Kubernetes manifest for "AppRollout".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AppRolloutProps = {}): any {
    return {
      ...AppRollout.GVK,
      ...toJson_AppRolloutProps(props),
    };
  }

  /**
   * Defines a "AppRollout" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AppRolloutProps = {}) {
    super(scope, id, {
      ...AppRollout.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AppRollout.GVK,
      ...toJson_AppRolloutProps(resolved),
    };
  }
}

/**
 * AppRollout is the Schema for the AppRollout API
 *
 * @schema AppRollout
 */
export interface AppRolloutProps {
  /**
   * @schema AppRollout#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AppRolloutSpec defines how to describe an upgrade between different apps
   *
   * @schema AppRollout#spec
   */
  readonly spec?: AppRolloutSpec;

}

/**
 * Converts an object of type 'AppRolloutProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutProps(obj: AppRolloutProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AppRolloutSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppRolloutSpec defines how to describe an upgrade between different apps
 *
 * @schema AppRolloutSpec
 */
export interface AppRolloutSpec {
  /**
   * The list of component to upgrade in the application. We only support single component application so far TODO: (RZ) Support multiple components in an application
   *
   * @schema AppRolloutSpec#componentList
   */
  readonly componentList?: string[];

  /**
   * RevertOnDelete revert the rollout when the rollout CR is deleted It will remove the target app from the kubernetes if it's set to true
   *
   * @schema AppRolloutSpec#revertOnDelete
   */
  readonly revertOnDelete?: boolean;

  /**
   * RolloutPlan is the details on how to rollout the resources
   *
   * @schema AppRolloutSpec#rolloutPlan
   */
  readonly rolloutPlan: AppRolloutSpecRolloutPlan;

  /**
   * SourceAppRevisionName contains the name of the applicationRevision that we need to upgrade from. it can be empty only when the rolling is only a scale event
   *
   * @schema AppRolloutSpec#sourceAppRevisionName
   */
  readonly sourceAppRevisionName?: string;

  /**
   * TargetAppRevisionName contains the name of the applicationRevision that we need to upgrade to.
   *
   * @schema AppRolloutSpec#targetAppRevisionName
   */
  readonly targetAppRevisionName: string;

}

/**
 * Converts an object of type 'AppRolloutSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpec(obj: AppRolloutSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentList': obj.componentList?.map(y => y),
    'revertOnDelete': obj.revertOnDelete,
    'rolloutPlan': toJson_AppRolloutSpecRolloutPlan(obj.rolloutPlan),
    'sourceAppRevisionName': obj.sourceAppRevisionName,
    'targetAppRevisionName': obj.targetAppRevisionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources
 *
 * @schema AppRolloutSpecRolloutPlan
 */
export interface AppRolloutSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema AppRolloutSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema AppRolloutSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: AppRolloutSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema AppRolloutSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema AppRolloutSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema AppRolloutSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: AppRolloutSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema AppRolloutSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema AppRolloutSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: AppRolloutSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema AppRolloutSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlan(obj: AppRolloutSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_AppRolloutSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_AppRolloutSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_AppRolloutSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema AppRolloutSpecRolloutPlanCanaryMetric
 */
export interface AppRolloutSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: AppRolloutSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: AppRolloutSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanCanaryMetric(obj: AppRolloutSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_AppRolloutSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_AppRolloutSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatches
 */
export interface AppRolloutSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: AppRolloutSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutBatches(obj: AppRolloutSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema AppRolloutSpecRolloutPlanRolloutWebhooks
 */
export interface AppRolloutSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutWebhooks(obj: AppRolloutSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema AppRolloutSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface AppRolloutSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanCanaryMetricMetricsRange(obj: AppRolloutSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface AppRolloutSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema AppRolloutSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanCanaryMetricTemplateRef(obj: AppRolloutSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: AppRolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric(obj: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new AppRolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesReplicas
 */
export class AppRolloutSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new AppRolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new AppRolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Maximum value
 *
 * @schema AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new AppRolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new AppRolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * AppRollout is the Schema for the AppRollout API
 *
 * @schema AppRolloutV1Beta1
 */
export class AppRolloutV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AppRolloutV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'AppRollout',
  }

  /**
   * Renders a Kubernetes manifest for "AppRolloutV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AppRolloutV1Beta1Props = {}): any {
    return {
      ...AppRolloutV1Beta1.GVK,
      ...toJson_AppRolloutV1Beta1Props(props),
    };
  }

  /**
   * Defines a "AppRolloutV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AppRolloutV1Beta1Props = {}) {
    super(scope, id, {
      ...AppRolloutV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AppRolloutV1Beta1.GVK,
      ...toJson_AppRolloutV1Beta1Props(resolved),
    };
  }
}

/**
 * AppRollout is the Schema for the AppRollout API
 *
 * @schema AppRolloutV1Beta1
 */
export interface AppRolloutV1Beta1Props {
  /**
   * @schema AppRolloutV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AppRolloutSpec defines how to describe an upgrade between different apps
   *
   * @schema AppRolloutV1Beta1#spec
   */
  readonly spec?: AppRolloutV1Beta1Spec;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1Props(obj: AppRolloutV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AppRolloutV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppRolloutSpec defines how to describe an upgrade between different apps
 *
 * @schema AppRolloutV1Beta1Spec
 */
export interface AppRolloutV1Beta1Spec {
  /**
   * The list of component to upgrade in the application. We only support single component application so far TODO: (RZ) Support multiple components in an application
   *
   * @schema AppRolloutV1Beta1Spec#componentList
   */
  readonly componentList?: string[];

  /**
   * RevertOnDelete revert the failed rollout when the rollout CR is deleted It will revert the change back to the source version at once (not in batches) Default is false
   *
   * @default false
   * @schema AppRolloutV1Beta1Spec#revertOnDelete
   */
  readonly revertOnDelete?: boolean;

  /**
   * RolloutPlan is the details on how to rollout the resources
   *
   * @schema AppRolloutV1Beta1Spec#rolloutPlan
   */
  readonly rolloutPlan: AppRolloutV1Beta1SpecRolloutPlan;

  /**
   * SourceAppRevisionName contains the name of the applicationConfiguration that we need to upgrade from. it can be empty only when it's the first time to deploy the application
   *
   * @schema AppRolloutV1Beta1Spec#sourceAppRevisionName
   */
  readonly sourceAppRevisionName?: string;

  /**
   * TargetAppRevisionName contains the name of the applicationConfiguration that we need to upgrade to. Here we use an applicationConfiguration as a revision of an application, thus the name alone is suffice
   *
   * @schema AppRolloutV1Beta1Spec#targetAppRevisionName
   */
  readonly targetAppRevisionName: string;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1Spec(obj: AppRolloutV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentList': obj.componentList?.map(y => y),
    'revertOnDelete': obj.revertOnDelete,
    'rolloutPlan': toJson_AppRolloutV1Beta1SpecRolloutPlan(obj.rolloutPlan),
    'sourceAppRevisionName': obj.sourceAppRevisionName,
    'targetAppRevisionName': obj.targetAppRevisionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlan
 */
export interface AppRolloutV1Beta1SpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema AppRolloutV1Beta1SpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: AppRolloutV1Beta1SpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlan(obj: AppRolloutV1Beta1SpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetric
 */
export interface AppRolloutV1Beta1SpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetric(obj: AppRolloutV1Beta1SpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatches(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange
 */
export interface AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange(obj: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef
 */
export interface AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef(obj: AppRolloutV1Beta1SpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas
 */
export class AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Maximum value
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new AppRolloutV1Beta1SpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new AppRolloutV1Beta1SpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * Cluster is the Schema for the clusters API
 *
 * @schema Cluster
 */
export class Cluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Cluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'Cluster',
  }

  /**
   * Renders a Kubernetes manifest for "Cluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClusterProps = {}): any {
    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(props),
    };
  }

  /**
   * Defines a "Cluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClusterProps = {}) {
    super(scope, id, {
      ...Cluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Cluster.GVK,
      ...toJson_ClusterProps(resolved),
    };
  }
}

/**
 * Cluster is the Schema for the clusters API
 *
 * @schema Cluster
 */
export interface ClusterProps {
  /**
   * @schema Cluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ClusterSpec defines the desired state of Cluster
   *
   * @schema Cluster#spec
   */
  readonly spec?: ClusterSpec;

}

/**
 * Converts an object of type 'ClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterProps(obj: ClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterSpec defines the desired state of Cluster
 *
 * @schema ClusterSpec
 */
export interface ClusterSpec {
  /**
   * KubeconfigSecretRef specifies the reference to the secret that contains the kubeconfig in field `config`.
   *
   * @schema ClusterSpec#kubeconfigSecretRef
   */
  readonly kubeconfigSecretRef?: ClusterSpecKubeconfigSecretRef;

}

/**
 * Converts an object of type 'ClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpec(obj: ClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kubeconfigSecretRef': toJson_ClusterSpecKubeconfigSecretRef(obj.kubeconfigSecretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KubeconfigSecretRef specifies the reference to the secret that contains the kubeconfig in field `config`.
 *
 * @schema ClusterSpecKubeconfigSecretRef
 */
export interface ClusterSpecKubeconfigSecretRef {
  /**
   * Name of a secret within the enclosing namespace.
   *
   * @schema ClusterSpecKubeconfigSecretRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ClusterSpecKubeconfigSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ClusterSpecKubeconfigSecretRef(obj: ClusterSpecKubeconfigSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A Component describes how an OAM workload kind may be instantiated.
 *
 * @schema Component
 */
export class Component extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Component"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'Component',
  }

  /**
   * Renders a Kubernetes manifest for "Component".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ComponentProps = {}): any {
    return {
      ...Component.GVK,
      ...toJson_ComponentProps(props),
    };
  }

  /**
   * Defines a "Component" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ComponentProps = {}) {
    super(scope, id, {
      ...Component.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Component.GVK,
      ...toJson_ComponentProps(resolved),
    };
  }
}

/**
 * A Component describes how an OAM workload kind may be instantiated.
 *
 * @schema Component
 */
export interface ComponentProps {
  /**
   * @schema Component#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ComponentSpec defines the desired state of a Component.
   *
   * @schema Component#spec
   */
  readonly spec?: ComponentSpec;

}

/**
 * Converts an object of type 'ComponentProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentProps(obj: ComponentProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ComponentSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ComponentSpec defines the desired state of a Component.
 *
 * @schema ComponentSpec
 */
export interface ComponentSpec {
  /**
   * HelmRelease records a Helm release used by a Helm module workload.
   *
   * @schema ComponentSpec#helm
   */
  readonly helm?: ComponentSpecHelm;

  /**
   * Parameters exposed by this component. ApplicationConfigurations that reference this component may specify values for these parameters, which will in turn be injected into the embedded workload.
   *
   * @schema ComponentSpec#parameters
   */
  readonly parameters?: ComponentSpecParameters[];

  /**
   * A Workload that will be created for each ApplicationConfiguration that includes this Component. Workload is an instance of a workloadDefinition. We either use the GVK info or a special "type" field in the workload to associate the content of the workload with its workloadDefinition
   *
   * @schema ComponentSpec#workload
   */
  readonly workload: any;

}

/**
 * Converts an object of type 'ComponentSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentSpec(obj: ComponentSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'helm': toJson_ComponentSpecHelm(obj.helm),
    'parameters': obj.parameters?.map(y => toJson_ComponentSpecParameters(y)),
    'workload': obj.workload,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmRelease records a Helm release used by a Helm module workload.
 *
 * @schema ComponentSpecHelm
 */
export interface ComponentSpecHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ComponentSpecHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ComponentSpecHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ComponentSpecHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentSpecHelm(obj: ComponentSpecHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ComponentParameter defines a configurable parameter of a component.
 *
 * @schema ComponentSpecParameters
 */
export interface ComponentSpecParameters {
  /**
   * Description of this parameter.
   *
   * @schema ComponentSpecParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this Component's workload that will be overwritten by the value of this parameter. The type of the parameter (e.g. int, string) is inferred from the type of these fields; All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ComponentSpecParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter. OAM ApplicationConfigurations will specify parameter values using this name.
   *
   * @schema ComponentSpecParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an ApplicationConfiguration.
   *
   * @schema ComponentSpecParameters#required
   */
  readonly required?: boolean;

}

/**
 * Converts an object of type 'ComponentSpecParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentSpecParameters(obj: ComponentSpecParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ComponentDefinition
 */
export class ComponentDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ComponentDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'ComponentDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "ComponentDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ComponentDefinitionProps = {}): any {
    return {
      ...ComponentDefinition.GVK,
      ...toJson_ComponentDefinitionProps(props),
    };
  }

  /**
   * Defines a "ComponentDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ComponentDefinitionProps = {}) {
    super(scope, id, {
      ...ComponentDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ComponentDefinition.GVK,
      ...toJson_ComponentDefinitionProps(resolved),
    };
  }
}

/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ComponentDefinition
 */
export interface ComponentDefinitionProps {
  /**
   * @schema ComponentDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ComponentDefinitionSpec defines the desired state of ComponentDefinition
   *
   * @schema ComponentDefinition#spec
   */
  readonly spec?: ComponentDefinitionSpec;

}

/**
 * Converts an object of type 'ComponentDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionProps(obj: ComponentDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ComponentDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionSpec defines the desired state of ComponentDefinition
 *
 * @schema ComponentDefinitionSpec
 */
export interface ComponentDefinitionSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ComponentDefinitionSpec#childResourceKinds
   */
  readonly childResourceKinds?: ComponentDefinitionSpecChildResourceKinds[];

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ComponentDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ComponentDefinitionSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ComponentDefinitionSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ComponentDefinitionSpec#schematic
   */
  readonly schematic?: ComponentDefinitionSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ComponentDefinitionSpec#status
   */
  readonly status?: ComponentDefinitionSpecStatus;

  /**
   * Workload is a workload type descriptor
   *
   * @schema ComponentDefinitionSpec#workload
   */
  readonly workload: ComponentDefinitionSpecWorkload;

}

/**
 * Converts an object of type 'ComponentDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpec(obj: ComponentDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ComponentDefinitionSpecChildResourceKinds(y)),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ComponentDefinitionSpecSchematic(obj.schematic),
    'status': toJson_ComponentDefinitionSpecStatus(obj.status),
    'workload': toJson_ComponentDefinitionSpecWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ComponentDefinitionSpecChildResourceKinds
 */
export interface ComponentDefinitionSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ComponentDefinitionSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ComponentDefinitionSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ComponentDefinitionSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ComponentDefinitionSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecChildResourceKinds(obj: ComponentDefinitionSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ComponentDefinitionSpecSchematic
 */
export interface ComponentDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ComponentDefinitionSpecSchematic#cue
   */
  readonly cue?: ComponentDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ComponentDefinitionSpecSchematic#helm
   */
  readonly helm?: ComponentDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ComponentDefinitionSpecSchematic#kube
   */
  readonly kube?: ComponentDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ComponentDefinitionSpecSchematic#terraform
   */
  readonly terraform?: ComponentDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematic(obj: ComponentDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ComponentDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_ComponentDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_ComponentDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_ComponentDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ComponentDefinitionSpecStatus
 */
export interface ComponentDefinitionSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ComponentDefinitionSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ComponentDefinitionSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecStatus(obj: ComponentDefinitionSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workload is a workload type descriptor
 *
 * @schema ComponentDefinitionSpecWorkload
 */
export interface ComponentDefinitionSpecWorkload {
  /**
   * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
   *
   * @schema ComponentDefinitionSpecWorkload#definition
   */
  readonly definition?: ComponentDefinitionSpecWorkloadDefinition;

  /**
   * Type ref to a WorkloadDefinition via name
   *
   * @schema ComponentDefinitionSpecWorkload#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecWorkload(obj: ComponentDefinitionSpecWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': toJson_ComponentDefinitionSpecWorkloadDefinition(obj.definition),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ComponentDefinitionSpecSchematicCue
 */
export interface ComponentDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ComponentDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicCue(obj: ComponentDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ComponentDefinitionSpecSchematicHelm
 */
export interface ComponentDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ComponentDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ComponentDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicHelm(obj: ComponentDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ComponentDefinitionSpecSchematicKube
 */
export interface ComponentDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ComponentDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: ComponentDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ComponentDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicKube(obj: ComponentDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ComponentDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ComponentDefinitionSpecSchematicTerraform
 */
export interface ComponentDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ComponentDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#type
   */
  readonly type?: ComponentDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ComponentDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicTerraform(obj: ComponentDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_ComponentDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
 *
 * @schema ComponentDefinitionSpecWorkloadDefinition
 */
export interface ComponentDefinitionSpecWorkloadDefinition {
  /**
   * @schema ComponentDefinitionSpecWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ComponentDefinitionSpecWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecWorkloadDefinition(obj: ComponentDefinitionSpecWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ComponentDefinitionSpecSchematicKubeParameters
 */
export interface ComponentDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ComponentDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ComponentDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ComponentDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ComponentDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ComponentDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: ComponentDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicKubeParameters(obj: ComponentDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: ComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ComponentDefinitionSpecSchematicTerraformProviderRef
 */
export interface ComponentDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicTerraformProviderRef(obj: ComponentDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ComponentDefinitionSpecSchematicTerraformType
 */
export enum ComponentDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: ComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ComponentDefinitionSpecSchematicKubeParametersType
 */
export enum ComponentDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ComponentDefinitionV1Beta1
 */
export class ComponentDefinitionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ComponentDefinitionV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'ComponentDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "ComponentDefinitionV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ComponentDefinitionV1Beta1Props = {}): any {
    return {
      ...ComponentDefinitionV1Beta1.GVK,
      ...toJson_ComponentDefinitionV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ComponentDefinitionV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ComponentDefinitionV1Beta1Props = {}) {
    super(scope, id, {
      ...ComponentDefinitionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ComponentDefinitionV1Beta1.GVK,
      ...toJson_ComponentDefinitionV1Beta1Props(resolved),
    };
  }
}

/**
 * ComponentDefinition is the Schema for the componentdefinitions API
 *
 * @schema ComponentDefinitionV1Beta1
 */
export interface ComponentDefinitionV1Beta1Props {
  /**
   * @schema ComponentDefinitionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ComponentDefinitionSpec defines the desired state of ComponentDefinition
   *
   * @schema ComponentDefinitionV1Beta1#spec
   */
  readonly spec?: ComponentDefinitionV1Beta1Spec;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1Props(obj: ComponentDefinitionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ComponentDefinitionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionSpec defines the desired state of ComponentDefinition
 *
 * @schema ComponentDefinitionV1Beta1Spec
 */
export interface ComponentDefinitionV1Beta1Spec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema ComponentDefinitionV1Beta1Spec#childResourceKinds
   */
  readonly childResourceKinds?: ComponentDefinitionV1Beta1SpecChildResourceKinds[];

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ComponentDefinitionV1Beta1Spec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema ComponentDefinitionV1Beta1Spec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema ComponentDefinitionV1Beta1Spec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema ComponentDefinitionV1Beta1Spec#schematic
   */
  readonly schematic?: ComponentDefinitionV1Beta1SpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema ComponentDefinitionV1Beta1Spec#status
   */
  readonly status?: ComponentDefinitionV1Beta1SpecStatus;

  /**
   * Workload is a workload type descriptor
   *
   * @schema ComponentDefinitionV1Beta1Spec#workload
   */
  readonly workload: ComponentDefinitionV1Beta1SpecWorkload;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1Spec(obj: ComponentDefinitionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_ComponentDefinitionV1Beta1SpecChildResourceKinds(y)),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_ComponentDefinitionV1Beta1SpecSchematic(obj.schematic),
    'status': toJson_ComponentDefinitionV1Beta1SpecStatus(obj.status),
    'workload': toJson_ComponentDefinitionV1Beta1SpecWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema ComponentDefinitionV1Beta1SpecChildResourceKinds
 */
export interface ComponentDefinitionV1Beta1SpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema ComponentDefinitionV1Beta1SpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema ComponentDefinitionV1Beta1SpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema ComponentDefinitionV1Beta1SpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecChildResourceKinds(obj: ComponentDefinitionV1Beta1SpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematic
 */
export interface ComponentDefinitionV1Beta1SpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematic#cue
   */
  readonly cue?: ComponentDefinitionV1Beta1SpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematic#helm
   */
  readonly helm?: ComponentDefinitionV1Beta1SpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematic#kube
   */
  readonly kube?: ComponentDefinitionV1Beta1SpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematic#terraform
   */
  readonly terraform?: ComponentDefinitionV1Beta1SpecSchematicTerraform;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematic(obj: ComponentDefinitionV1Beta1SpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_ComponentDefinitionV1Beta1SpecSchematicCue(obj.cue),
    'helm': toJson_ComponentDefinitionV1Beta1SpecSchematicHelm(obj.helm),
    'kube': toJson_ComponentDefinitionV1Beta1SpecSchematicKube(obj.kube),
    'terraform': toJson_ComponentDefinitionV1Beta1SpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema ComponentDefinitionV1Beta1SpecStatus
 */
export interface ComponentDefinitionV1Beta1SpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema ComponentDefinitionV1Beta1SpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema ComponentDefinitionV1Beta1SpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecStatus(obj: ComponentDefinitionV1Beta1SpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workload is a workload type descriptor
 *
 * @schema ComponentDefinitionV1Beta1SpecWorkload
 */
export interface ComponentDefinitionV1Beta1SpecWorkload {
  /**
   * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
   *
   * @schema ComponentDefinitionV1Beta1SpecWorkload#definition
   */
  readonly definition?: ComponentDefinitionV1Beta1SpecWorkloadDefinition;

  /**
   * Type ref to a WorkloadDefinition via name
   *
   * @schema ComponentDefinitionV1Beta1SpecWorkload#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecWorkload(obj: ComponentDefinitionV1Beta1SpecWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': toJson_ComponentDefinitionV1Beta1SpecWorkloadDefinition(obj.definition),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicCue
 */
export interface ComponentDefinitionV1Beta1SpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicCue(obj: ComponentDefinitionV1Beta1SpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicHelm
 */
export interface ComponentDefinitionV1Beta1SpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicHelm(obj: ComponentDefinitionV1Beta1SpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicKube
 */
export interface ComponentDefinitionV1Beta1SpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKube#parameters
   */
  readonly parameters?: ComponentDefinitionV1Beta1SpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicKube(obj: ComponentDefinitionV1Beta1SpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_ComponentDefinitionV1Beta1SpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform
 */
export interface ComponentDefinitionV1Beta1SpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#providerRef
   */
  readonly providerRef?: ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#type
   */
  readonly type?: ComponentDefinitionV1Beta1SpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicTerraform(obj: ComponentDefinitionV1Beta1SpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
 *
 * @schema ComponentDefinitionV1Beta1SpecWorkloadDefinition
 */
export interface ComponentDefinitionV1Beta1SpecWorkloadDefinition {
  /**
   * @schema ComponentDefinitionV1Beta1SpecWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ComponentDefinitionV1Beta1SpecWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecWorkloadDefinition(obj: ComponentDefinitionV1Beta1SpecWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters
 */
export interface ComponentDefinitionV1Beta1SpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParameters#type
   */
  readonly type: ComponentDefinitionV1Beta1SpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicKubeParameters(obj: ComponentDefinitionV1Beta1SpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference
 */
export interface ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj: ComponentDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef
 */
export interface ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj: ComponentDefinitionV1Beta1SpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformType
 */
export enum ComponentDefinitionV1Beta1SpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj: ComponentDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema ComponentDefinitionV1Beta1SpecSchematicKubeParametersType
 */
export enum ComponentDefinitionV1Beta1SpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * DefinitionRevision is the Schema for the DefinitionRevision API
 *
 * @schema DefinitionRevision
 */
export class DefinitionRevision extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DefinitionRevision"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'DefinitionRevision',
  }

  /**
   * Renders a Kubernetes manifest for "DefinitionRevision".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DefinitionRevisionProps = {}): any {
    return {
      ...DefinitionRevision.GVK,
      ...toJson_DefinitionRevisionProps(props),
    };
  }

  /**
   * Defines a "DefinitionRevision" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DefinitionRevisionProps = {}) {
    super(scope, id, {
      ...DefinitionRevision.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DefinitionRevision.GVK,
      ...toJson_DefinitionRevisionProps(resolved),
    };
  }
}

/**
 * DefinitionRevision is the Schema for the DefinitionRevision API
 *
 * @schema DefinitionRevision
 */
export interface DefinitionRevisionProps {
  /**
   * @schema DefinitionRevision#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * DefinitionRevisionSpec is the spec of DefinitionRevision
   *
   * @schema DefinitionRevision#spec
   */
  readonly spec?: DefinitionRevisionSpec;

}

/**
 * Converts an object of type 'DefinitionRevisionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionProps(obj: DefinitionRevisionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DefinitionRevisionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DefinitionRevisionSpec is the spec of DefinitionRevision
 *
 * @schema DefinitionRevisionSpec
 */
export interface DefinitionRevisionSpec {
  /**
   * ComponentDefinition records the snapshot of the created/modified ComponentDefinition
   *
   * @schema DefinitionRevisionSpec#componentDefinition
   */
  readonly componentDefinition?: DefinitionRevisionSpecComponentDefinition;

  /**
   * DefinitionType
   *
   * @schema DefinitionRevisionSpec#definitionType
   */
  readonly definitionType: DefinitionRevisionSpecDefinitionType;

  /**
   * PolicyDefinition records the snapshot of the created/modified PolicyDefinition
   *
   * @schema DefinitionRevisionSpec#policyDefinition
   */
  readonly policyDefinition?: DefinitionRevisionSpecPolicyDefinition;

  /**
   * Revision record revision number of DefinitionRevision
   *
   * @schema DefinitionRevisionSpec#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of DefinitionRevision object.
   *
   * @schema DefinitionRevisionSpec#revisionHash
   */
  readonly revisionHash: string;

  /**
   * TraitDefinition records the snapshot of the created/modified TraitDefinition
   *
   * @schema DefinitionRevisionSpec#traitDefinition
   */
  readonly traitDefinition?: DefinitionRevisionSpecTraitDefinition;

  /**
   * WorkflowStepDefinition records the snapshot of the created/modified WorkflowStepDefinition
   *
   * @schema DefinitionRevisionSpec#workflowStepDefinition
   */
  readonly workflowStepDefinition?: DefinitionRevisionSpecWorkflowStepDefinition;

}

/**
 * Converts an object of type 'DefinitionRevisionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpec(obj: DefinitionRevisionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentDefinition': toJson_DefinitionRevisionSpecComponentDefinition(obj.componentDefinition),
    'definitionType': obj.definitionType,
    'policyDefinition': toJson_DefinitionRevisionSpecPolicyDefinition(obj.policyDefinition),
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
    'traitDefinition': toJson_DefinitionRevisionSpecTraitDefinition(obj.traitDefinition),
    'workflowStepDefinition': toJson_DefinitionRevisionSpecWorkflowStepDefinition(obj.workflowStepDefinition),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinition records the snapshot of the created/modified ComponentDefinition
 *
 * @schema DefinitionRevisionSpecComponentDefinition
 */
export interface DefinitionRevisionSpecComponentDefinition {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema DefinitionRevisionSpecComponentDefinition#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema DefinitionRevisionSpecComponentDefinition#kind
   */
  readonly kind?: string;

  /**
   * @schema DefinitionRevisionSpecComponentDefinition#metadata
   */
  readonly metadata?: DefinitionRevisionSpecComponentDefinitionMetadata;

  /**
   * ComponentDefinitionSpec defines the desired state of ComponentDefinition
   *
   * @schema DefinitionRevisionSpecComponentDefinition#spec
   */
  readonly spec?: DefinitionRevisionSpecComponentDefinitionSpec;

  /**
   * ComponentDefinitionStatus is the status of ComponentDefinition
   *
   * @schema DefinitionRevisionSpecComponentDefinition#status
   */
  readonly status?: DefinitionRevisionSpecComponentDefinitionStatus;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinition(obj: DefinitionRevisionSpecComponentDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_DefinitionRevisionSpecComponentDefinitionMetadata(obj.metadata),
    'spec': toJson_DefinitionRevisionSpecComponentDefinitionSpec(obj.spec),
    'status': toJson_DefinitionRevisionSpecComponentDefinitionStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DefinitionType
 *
 * @schema DefinitionRevisionSpecDefinitionType
 */
export enum DefinitionRevisionSpecDefinitionType {
  /** Component */
  COMPONENT = "Component",
  /** Trait */
  TRAIT = "Trait",
  /** Policy */
  POLICY = "Policy",
  /** WorkflowStep */
  WORKFLOW_STEP = "WorkflowStep",
}

/**
 * PolicyDefinition records the snapshot of the created/modified PolicyDefinition
 *
 * @schema DefinitionRevisionSpecPolicyDefinition
 */
export interface DefinitionRevisionSpecPolicyDefinition {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema DefinitionRevisionSpecPolicyDefinition#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema DefinitionRevisionSpecPolicyDefinition#kind
   */
  readonly kind?: string;

  /**
   * @schema DefinitionRevisionSpecPolicyDefinition#metadata
   */
  readonly metadata?: DefinitionRevisionSpecPolicyDefinitionMetadata;

  /**
   * PolicyDefinitionSpec defines the desired state of PolicyDefinition
   *
   * @schema DefinitionRevisionSpecPolicyDefinition#spec
   */
  readonly spec?: DefinitionRevisionSpecPolicyDefinitionSpec;

  /**
   * PolicyDefinitionStatus is the status of PolicyDefinition
   *
   * @schema DefinitionRevisionSpecPolicyDefinition#status
   */
  readonly status?: DefinitionRevisionSpecPolicyDefinitionStatus;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinition(obj: DefinitionRevisionSpecPolicyDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_DefinitionRevisionSpecPolicyDefinitionMetadata(obj.metadata),
    'spec': toJson_DefinitionRevisionSpecPolicyDefinitionSpec(obj.spec),
    'status': toJson_DefinitionRevisionSpecPolicyDefinitionStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TraitDefinition records the snapshot of the created/modified TraitDefinition
 *
 * @schema DefinitionRevisionSpecTraitDefinition
 */
export interface DefinitionRevisionSpecTraitDefinition {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema DefinitionRevisionSpecTraitDefinition#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema DefinitionRevisionSpecTraitDefinition#kind
   */
  readonly kind?: string;

  /**
   * @schema DefinitionRevisionSpecTraitDefinition#metadata
   */
  readonly metadata?: DefinitionRevisionSpecTraitDefinitionMetadata;

  /**
   * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
   *
   * @schema DefinitionRevisionSpecTraitDefinition#spec
   */
  readonly spec?: DefinitionRevisionSpecTraitDefinitionSpec;

  /**
   * TraitDefinitionStatus is the status of TraitDefinition
   *
   * @schema DefinitionRevisionSpecTraitDefinition#status
   */
  readonly status?: DefinitionRevisionSpecTraitDefinitionStatus;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinition(obj: DefinitionRevisionSpecTraitDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_DefinitionRevisionSpecTraitDefinitionMetadata(obj.metadata),
    'spec': toJson_DefinitionRevisionSpecTraitDefinitionSpec(obj.spec),
    'status': toJson_DefinitionRevisionSpecTraitDefinitionStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinition records the snapshot of the created/modified WorkflowStepDefinition
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinition
 */
export interface DefinitionRevisionSpecWorkflowStepDefinition {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinition#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinition#kind
   */
  readonly kind?: string;

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinition#metadata
   */
  readonly metadata?: DefinitionRevisionSpecWorkflowStepDefinitionMetadata;

  /**
   * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinition#spec
   */
  readonly spec?: DefinitionRevisionSpecWorkflowStepDefinitionSpec;

  /**
   * WorkflowStepDefinitionStatus is the status of WorkflowStepDefinition
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinition#status
   */
  readonly status?: DefinitionRevisionSpecWorkflowStepDefinitionStatus;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinition(obj: DefinitionRevisionSpecWorkflowStepDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_DefinitionRevisionSpecWorkflowStepDefinitionMetadata(obj.metadata),
    'spec': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpec(obj.spec),
    'status': toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DefinitionRevisionSpecComponentDefinitionMetadata
 */
export interface DefinitionRevisionSpecComponentDefinitionMetadata {
  /**
   * @schema DefinitionRevisionSpecComponentDefinitionMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionMetadata#name
   */
  readonly name?: string;

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionMetadata(obj: DefinitionRevisionSpecComponentDefinitionMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionSpec defines the desired state of ComponentDefinition
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpec
 */
export interface DefinitionRevisionSpecComponentDefinitionSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#childResourceKinds
   */
  readonly childResourceKinds?: DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds[];

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#schematic
   */
  readonly schematic?: DefinitionRevisionSpecComponentDefinitionSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#status
   */
  readonly status?: DefinitionRevisionSpecComponentDefinitionSpecStatus;

  /**
   * Workload is a workload type descriptor
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpec#workload
   */
  readonly workload: DefinitionRevisionSpecComponentDefinitionSpecWorkload;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpec(obj: DefinitionRevisionSpecComponentDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds(y)),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematic(obj.schematic),
    'status': toJson_DefinitionRevisionSpecComponentDefinitionSpecStatus(obj.status),
    'workload': toJson_DefinitionRevisionSpecComponentDefinitionSpecWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ComponentDefinitionStatus is the status of ComponentDefinition
 *
 * @schema DefinitionRevisionSpecComponentDefinitionStatus
 */
export interface DefinitionRevisionSpecComponentDefinitionStatus {
  /**
   * Conditions of the resource.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatus#conditions
   */
  readonly conditions?: DefinitionRevisionSpecComponentDefinitionStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatus#latestRevision
   */
  readonly latestRevision?: DefinitionRevisionSpecComponentDefinitionStatusLatestRevision;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionStatus(obj: DefinitionRevisionSpecComponentDefinitionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_DefinitionRevisionSpecComponentDefinitionStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_DefinitionRevisionSpecComponentDefinitionStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DefinitionRevisionSpecPolicyDefinitionMetadata
 */
export interface DefinitionRevisionSpecPolicyDefinitionMetadata {
  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionMetadata#name
   */
  readonly name?: string;

  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionMetadata(obj: DefinitionRevisionSpecPolicyDefinitionMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinitionSpec defines the desired state of PolicyDefinition
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpec
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpec#definitionRef
   */
  readonly definitionRef?: DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef;

  /**
   * ManageHealthCheck means the policy will handle health checking and skip application controller built-in health checking.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpec#manageHealthCheck
   */
  readonly manageHealthCheck?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpec#schematic
   */
  readonly schematic?: DefinitionRevisionSpecPolicyDefinitionSpecSchematic;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpec(obj: DefinitionRevisionSpecPolicyDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef(obj.definitionRef),
    'manageHealthCheck': obj.manageHealthCheck,
    'schematic': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinitionStatus is the status of PolicyDefinition
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionStatus
 */
export interface DefinitionRevisionSpecPolicyDefinitionStatus {
  /**
   * Conditions of the resource.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatus#conditions
   */
  readonly conditions?: DefinitionRevisionSpecPolicyDefinitionStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatus#latestRevision
   */
  readonly latestRevision?: DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionStatus(obj: DefinitionRevisionSpecPolicyDefinitionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_DefinitionRevisionSpecPolicyDefinitionStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DefinitionRevisionSpecTraitDefinitionMetadata
 */
export interface DefinitionRevisionSpecTraitDefinitionMetadata {
  /**
   * @schema DefinitionRevisionSpecTraitDefinitionMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecTraitDefinitionMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema DefinitionRevisionSpecTraitDefinitionMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecTraitDefinitionMetadata#name
   */
  readonly name?: string;

  /**
   * @schema DefinitionRevisionSpecTraitDefinitionMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionMetadata(obj: DefinitionRevisionSpecTraitDefinitionMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpec
 */
export interface DefinitionRevisionSpecTraitDefinitionSpec {
  /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in resource.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#appliesToWorkloads
   */
  readonly appliesToWorkloads?: string[];

  /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: "service" # Trait definition name "services.k8s.io" # API resource/crd name "*.networking.k8s.io" # API group "labelSelector:foo=bar" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#conflictsWith
   */
  readonly conflictsWith?: string[];

  /**
   * ControlPlaneOnly defines which cluster is dispatched to
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#controlPlaneOnly
   */
  readonly controlPlaneOnly?: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#definitionRef
   */
  readonly definitionRef?: DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * ManageWorkload defines the trait would be responsible for creating the workload
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#manageWorkload
   */
  readonly manageWorkload?: boolean;

  /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#podDisruptive
   */
  readonly podDisruptive?: boolean;

  /**
   * Revision indicates whether a trait is aware of component revision
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#revisionEnabled
   */
  readonly revisionEnabled?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#schematic
   */
  readonly schematic?: DefinitionRevisionSpecTraitDefinitionSpecSchematic;

  /**
   * Stage defines the stage information to which this trait resource processing belongs. Currently, PreDispatch and PostDispatch are provided, which are used to control resource pre-process and post-process respectively.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#stage
   */
  readonly stage?: string;

  /**
   * Status defines the custom health policy and status message for trait
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#status
   */
  readonly status?: DefinitionRevisionSpecTraitDefinitionSpecStatus;

  /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpec#workloadRefPath
   */
  readonly workloadRefPath?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpec(obj: DefinitionRevisionSpecTraitDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliesToWorkloads': obj.appliesToWorkloads?.map(y => y),
    'conflictsWith': obj.conflictsWith?.map(y => y),
    'controlPlaneOnly': obj.controlPlaneOnly,
    'definitionRef': toJson_DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'manageWorkload': obj.manageWorkload,
    'podDisruptive': obj.podDisruptive,
    'revisionEnabled': obj.revisionEnabled,
    'schematic': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematic(obj.schematic),
    'stage': obj.stage,
    'status': toJson_DefinitionRevisionSpecTraitDefinitionSpecStatus(obj.status),
    'workloadRefPath': obj.workloadRefPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TraitDefinitionStatus is the status of TraitDefinition
 *
 * @schema DefinitionRevisionSpecTraitDefinitionStatus
 */
export interface DefinitionRevisionSpecTraitDefinitionStatus {
  /**
   * Conditions of the resource.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatus#conditions
   */
  readonly conditions?: DefinitionRevisionSpecTraitDefinitionStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatus#latestRevision
   */
  readonly latestRevision?: DefinitionRevisionSpecTraitDefinitionStatusLatestRevision;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionStatus(obj: DefinitionRevisionSpecTraitDefinitionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_DefinitionRevisionSpecTraitDefinitionStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_DefinitionRevisionSpecTraitDefinitionStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionMetadata {
  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata#name
   */
  readonly name?: string;

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionMetadata(obj: DefinitionRevisionSpecWorkflowStepDefinitionMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpec
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpec#definitionRef
   */
  readonly definitionRef?: DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef;

  /**
   * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpec#schematic
   */
  readonly schematic?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpec(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef(obj.definitionRef),
    'schematic': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinitionStatus is the status of WorkflowStepDefinition
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatus
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionStatus {
  /**
   * Conditions of the resource.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatus#conditions
   */
  readonly conditions?: DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions[];

  /**
   * ConfigMapRef refer to a ConfigMap which contains OpenAPI V3 JSON schema of Component parameters.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatus#configMapRef
   */
  readonly configMapRef?: string;

  /**
   * LatestRevision of the component definition
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatus#latestRevision
   */
  readonly latestRevision?: DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatus(obj: DefinitionRevisionSpecWorkflowStepDefinitionStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditions': obj.conditions?.map(y => toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions(y)),
    'configMapRef': obj.configMapRef,
    'latestRevision': toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision(obj.latestRevision),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds(obj: DefinitionRevisionSpecComponentDefinitionSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematic
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematic#cue
   */
  readonly cue?: DefinitionRevisionSpecComponentDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematic#helm
   */
  readonly helm?: DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematic#kube
   */
  readonly kube?: DefinitionRevisionSpecComponentDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematic#terraform
   */
  readonly terraform?: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematic(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecStatus
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecStatus(obj: DefinitionRevisionSpecComponentDefinitionSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workload is a workload type descriptor
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkload
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecWorkload {
  /**
   * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkload#definition
   */
  readonly definition?: DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition;

  /**
   * Type ref to a WorkloadDefinition via name
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkload#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecWorkload(obj: DefinitionRevisionSpecComponentDefinitionSpecWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definition': toJson_DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition(obj.definition),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions
 */
export interface DefinitionRevisionSpecComponentDefinitionStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionStatusConditions(obj: DefinitionRevisionSpecComponentDefinitionStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema DefinitionRevisionSpecComponentDefinitionStatusLatestRevision
 */
export interface DefinitionRevisionSpecComponentDefinitionStatusLatestRevision {
  /**
   * @schema DefinitionRevisionSpecComponentDefinitionStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionStatusLatestRevision(obj: DefinitionRevisionSpecComponentDefinitionStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef(obj: DefinitionRevisionSpecPolicyDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematic
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematic#cue
   */
  readonly cue?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematic#helm
   */
  readonly helm?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematic#kube
   */
  readonly kube?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematic#terraform
   */
  readonly terraform?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematic(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions
 */
export interface DefinitionRevisionSpecPolicyDefinitionStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionStatusConditions(obj: DefinitionRevisionSpecPolicyDefinitionStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision
 */
export interface DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision {
  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision(obj: DefinitionRevisionSpecPolicyDefinitionStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef(obj: DefinitionRevisionSpecTraitDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematic
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematic#cue
   */
  readonly cue?: DefinitionRevisionSpecTraitDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematic#helm
   */
  readonly helm?: DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematic#kube
   */
  readonly kube?: DefinitionRevisionSpecTraitDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematic#terraform
   */
  readonly terraform?: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematic(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for trait
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecStatus
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecStatus(obj: DefinitionRevisionSpecTraitDefinitionSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions
 */
export interface DefinitionRevisionSpecTraitDefinitionStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionStatusConditions(obj: DefinitionRevisionSpecTraitDefinitionStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema DefinitionRevisionSpecTraitDefinitionStatusLatestRevision
 */
export interface DefinitionRevisionSpecTraitDefinitionStatusLatestRevision {
  /**
   * @schema DefinitionRevisionSpecTraitDefinitionStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema DefinitionRevisionSpecTraitDefinitionStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionStatusLatestRevision(obj: DefinitionRevisionSpecTraitDefinitionStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic#cue
   */
  readonly cue?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic#helm
   */
  readonly helm?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic#kube
   */
  readonly kube?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic#terraform
   */
  readonly terraform?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions(obj: DefinitionRevisionSpecWorkflowStepDefinitionStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the component definition
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision {
  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision(obj: DefinitionRevisionSpecWorkflowStepDefinitionStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicCue
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicCue(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKube
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicKube(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#type
   */
  readonly type?: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Definition mutually exclusive to workload.type, a embedded WorkloadDefinition
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition {
  /**
   * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition(obj: DefinitionRevisionSpecComponentDefinitionSpecWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#type
   */
  readonly type?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicCue
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicCue(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKube
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicKube(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#type
   */
  readonly type?: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#type
   */
  readonly type?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformType
 */
export enum DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: DefinitionRevisionSpecComponentDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformType
 */
export enum DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: DefinitionRevisionSpecPolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformType
 */
export enum DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: DefinitionRevisionSpecTraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformType
 */
export enum DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParametersType
 */
export enum DefinitionRevisionSpecComponentDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParametersType
 */
export enum DefinitionRevisionSpecPolicyDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParametersType
 */
export enum DefinitionRevisionSpecTraitDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParametersType
 */
export enum DefinitionRevisionSpecWorkflowStepDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * EnvBinding is the Schema for the EnvBinding API
 *
 * @schema EnvBinding
 */
export class EnvBinding extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EnvBinding"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha1',
    kind: 'EnvBinding',
  }

  /**
   * Renders a Kubernetes manifest for "EnvBinding".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EnvBindingProps = {}): any {
    return {
      ...EnvBinding.GVK,
      ...toJson_EnvBindingProps(props),
    };
  }

  /**
   * Defines a "EnvBinding" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EnvBindingProps = {}) {
    super(scope, id, {
      ...EnvBinding.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EnvBinding.GVK,
      ...toJson_EnvBindingProps(resolved),
    };
  }
}

/**
 * EnvBinding is the Schema for the EnvBinding API
 *
 * @schema EnvBinding
 */
export interface EnvBindingProps {
  /**
   * @schema EnvBinding#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A EnvBindingSpec defines the desired state of a EnvBinding.
   *
   * @schema EnvBinding#spec
   */
  readonly spec?: EnvBindingSpec;

}

/**
 * Converts an object of type 'EnvBindingProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingProps(obj: EnvBindingProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EnvBindingSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A EnvBindingSpec defines the desired state of a EnvBinding.
 *
 * @schema EnvBindingSpec
 */
export interface EnvBindingSpec {
  /**
   * AppTemplate indicates the application template.
   *
   * @schema EnvBindingSpec#appTemplate
   */
  readonly appTemplate: any;

  /**
   * ClusterManagementEngine represents a multi-cluster management solution
   *
   * @schema EnvBindingSpec#engine
   */
  readonly engine?: string;

  /**
   * @schema EnvBindingSpec#envs
   */
  readonly envs: EnvBindingSpecEnvs[];

  /**
   * OutputResourcesTo specifies the namespace and name of a ConfigMap which store the resources rendered after differentiated configuration
   *
   * @schema EnvBindingSpec#outputResourcesTo
   */
  readonly outputResourcesTo?: EnvBindingSpecOutputResourcesTo;

}

/**
 * Converts an object of type 'EnvBindingSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpec(obj: EnvBindingSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appTemplate': obj.appTemplate,
    'engine': obj.engine,
    'envs': obj.envs?.map(y => toJson_EnvBindingSpecEnvs(y)),
    'outputResourcesTo': toJson_EnvBindingSpecOutputResourcesTo(obj.outputResourcesTo),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvConfig is the configuration for different environments.
 *
 * @schema EnvBindingSpecEnvs
 */
export interface EnvBindingSpecEnvs {
  /**
   * @schema EnvBindingSpecEnvs#name
   */
  readonly name: string;

  /**
   * EnvPatch specify the parameter configuration for different environments
   *
   * @schema EnvBindingSpecEnvs#patch
   */
  readonly patch: EnvBindingSpecEnvsPatch;

  /**
   * EnvPlacement defines the placement rules for an app.
   *
   * @schema EnvBindingSpecEnvs#placement
   */
  readonly placement?: EnvBindingSpecEnvsPlacement;

  /**
   * EnvSelector defines which components should this env contains
   *
   * @schema EnvBindingSpecEnvs#selector
   */
  readonly selector?: EnvBindingSpecEnvsSelector;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvs(obj: EnvBindingSpecEnvs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'patch': toJson_EnvBindingSpecEnvsPatch(obj.patch),
    'placement': toJson_EnvBindingSpecEnvsPlacement(obj.placement),
    'selector': toJson_EnvBindingSpecEnvsSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * OutputResourcesTo specifies the namespace and name of a ConfigMap which store the resources rendered after differentiated configuration
 *
 * @schema EnvBindingSpecOutputResourcesTo
 */
export interface EnvBindingSpecOutputResourcesTo {
  /**
   * Name of the secret.
   *
   * @schema EnvBindingSpecOutputResourcesTo#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema EnvBindingSpecOutputResourcesTo#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'EnvBindingSpecOutputResourcesTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecOutputResourcesTo(obj: EnvBindingSpecOutputResourcesTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvPatch specify the parameter configuration for different environments
 *
 * @schema EnvBindingSpecEnvsPatch
 */
export interface EnvBindingSpecEnvsPatch {
  /**
   * @schema EnvBindingSpecEnvsPatch#components
   */
  readonly components: EnvBindingSpecEnvsPatchComponents[];

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPatch(obj: EnvBindingSpecEnvsPatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_EnvBindingSpecEnvsPatchComponents(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvPlacement defines the placement rules for an app.
 *
 * @schema EnvBindingSpecEnvsPlacement
 */
export interface EnvBindingSpecEnvsPlacement {
  /**
   * ClusterSelector defines the rules to select a Cluster resource. Either name or labels is needed.
   *
   * @schema EnvBindingSpecEnvsPlacement#clusterSelector
   */
  readonly clusterSelector?: EnvBindingSpecEnvsPlacementClusterSelector;

  /**
   * NamespaceSelector defines the rules to select a Namespace resource. Either name or labels is needed.
   *
   * @schema EnvBindingSpecEnvsPlacement#namespaceSelector
   */
  readonly namespaceSelector?: EnvBindingSpecEnvsPlacementNamespaceSelector;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPlacement' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPlacement(obj: EnvBindingSpecEnvsPlacement | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterSelector': toJson_EnvBindingSpecEnvsPlacementClusterSelector(obj.clusterSelector),
    'namespaceSelector': toJson_EnvBindingSpecEnvsPlacementNamespaceSelector(obj.namespaceSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvSelector defines which components should this env contains
 *
 * @schema EnvBindingSpecEnvsSelector
 */
export interface EnvBindingSpecEnvsSelector {
  /**
   * @schema EnvBindingSpecEnvsSelector#components
   */
  readonly components?: string[];

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsSelector(obj: EnvBindingSpecEnvsSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema EnvBindingSpecEnvsPatchComponents
 */
export interface EnvBindingSpecEnvsPatchComponents {
  /**
   * @schema EnvBindingSpecEnvsPatchComponents#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * ExternalRevision specified the component revisionName
   *
   * @schema EnvBindingSpecEnvsPatchComponents#externalRevision
   */
  readonly externalRevision?: string;

  /**
   * StepInputs defines variable input of WorkflowStep
   *
   * @schema EnvBindingSpecEnvsPatchComponents#inputs
   */
  readonly inputs?: EnvBindingSpecEnvsPatchComponentsInputs[];

  /**
   * @schema EnvBindingSpecEnvsPatchComponents#name
   */
  readonly name: string;

  /**
   * StepOutputs defines output variable of WorkflowStep
   *
   * @schema EnvBindingSpecEnvsPatchComponents#outputs
   */
  readonly outputs?: EnvBindingSpecEnvsPatchComponentsOutputs[];

  /**
   * @schema EnvBindingSpecEnvsPatchComponents#properties
   */
  readonly properties?: any;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema EnvBindingSpecEnvsPatchComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema EnvBindingSpecEnvsPatchComponents#traits
   */
  readonly traits?: EnvBindingSpecEnvsPatchComponentsTraits[];

  /**
   * @schema EnvBindingSpecEnvsPatchComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPatchComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPatchComponents(obj: EnvBindingSpecEnvsPatchComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'externalRevision': obj.externalRevision,
    'inputs': obj.inputs?.map(y => toJson_EnvBindingSpecEnvsPatchComponentsInputs(y)),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_EnvBindingSpecEnvsPatchComponentsOutputs(y)),
    'properties': obj.properties,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'traits': obj.traits?.map(y => toJson_EnvBindingSpecEnvsPatchComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterSelector defines the rules to select a Cluster resource. Either name or labels is needed.
 *
 * @schema EnvBindingSpecEnvsPlacementClusterSelector
 */
export interface EnvBindingSpecEnvsPlacementClusterSelector {
  /**
   * Labels defines the label selector to select the cluster.
   *
   * @schema EnvBindingSpecEnvsPlacementClusterSelector#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name is the name of the cluster.
   *
   * @schema EnvBindingSpecEnvsPlacementClusterSelector#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPlacementClusterSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPlacementClusterSelector(obj: EnvBindingSpecEnvsPlacementClusterSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NamespaceSelector defines the rules to select a Namespace resource. Either name or labels is needed.
 *
 * @schema EnvBindingSpecEnvsPlacementNamespaceSelector
 */
export interface EnvBindingSpecEnvsPlacementNamespaceSelector {
  /**
   * Labels defines the label selector to select the namespace.
   *
   * @schema EnvBindingSpecEnvsPlacementNamespaceSelector#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name is the name of the namespace.
   *
   * @schema EnvBindingSpecEnvsPlacementNamespaceSelector#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPlacementNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPlacementNamespaceSelector(obj: EnvBindingSpecEnvsPlacementNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvBindingSpecEnvsPatchComponentsInputs
 */
export interface EnvBindingSpecEnvsPatchComponentsInputs {
  /**
   * @schema EnvBindingSpecEnvsPatchComponentsInputs#from
   */
  readonly from: string;

  /**
   * @schema EnvBindingSpecEnvsPatchComponentsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPatchComponentsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPatchComponentsInputs(obj: EnvBindingSpecEnvsPatchComponentsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvBindingSpecEnvsPatchComponentsOutputs
 */
export interface EnvBindingSpecEnvsPatchComponentsOutputs {
  /**
   * @schema EnvBindingSpecEnvsPatchComponentsOutputs#name
   */
  readonly name: string;

  /**
   * @schema EnvBindingSpecEnvsPatchComponentsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPatchComponentsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPatchComponentsOutputs(obj: EnvBindingSpecEnvsPatchComponentsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema EnvBindingSpecEnvsPatchComponentsTraits
 */
export interface EnvBindingSpecEnvsPatchComponentsTraits {
  /**
   * @schema EnvBindingSpecEnvsPatchComponentsTraits#properties
   */
  readonly properties?: any;

  /**
   * @schema EnvBindingSpecEnvsPatchComponentsTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'EnvBindingSpecEnvsPatchComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvBindingSpecEnvsPatchComponentsTraits(obj: EnvBindingSpecEnvsPatchComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A HealthScope determines an aggregate health status based of the health of components.
 *
 * @schema HealthScope
 */
export class HealthScope extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HealthScope"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'HealthScope',
  }

  /**
   * Renders a Kubernetes manifest for "HealthScope".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HealthScopeProps = {}): any {
    return {
      ...HealthScope.GVK,
      ...toJson_HealthScopeProps(props),
    };
  }

  /**
   * Defines a "HealthScope" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HealthScopeProps = {}) {
    super(scope, id, {
      ...HealthScope.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HealthScope.GVK,
      ...toJson_HealthScopeProps(resolved),
    };
  }
}

/**
 * A HealthScope determines an aggregate health status based of the health of components.
 *
 * @schema HealthScope
 */
export interface HealthScopeProps {
  /**
   * @schema HealthScope#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A HealthScopeSpec defines the desired state of a HealthScope.
   *
   * @schema HealthScope#spec
   */
  readonly spec?: HealthScopeSpec;

}

/**
 * Converts an object of type 'HealthScopeProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeProps(obj: HealthScopeProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HealthScopeSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HealthScopeSpec defines the desired state of a HealthScope.
 *
 * @schema HealthScopeSpec
 */
export interface HealthScopeSpec {
  /**
   * AppRefs records references of applications' components
   *
   * @schema HealthScopeSpec#appReferences
   */
  readonly appReferences?: HealthScopeSpecAppReferences[];

  /**
   * ProbeInterval is the amount of time in seconds between probing tries.
   *
   * @schema HealthScopeSpec#probe-interval
   */
  readonly probeInterval?: number;

  /**
   * ProbeTimeout is the amount of time in seconds to wait when receiving a response before marked failure.
   *
   * @schema HealthScopeSpec#probe-timeout
   */
  readonly probeTimeout?: number;

  /**
   * WorkloadReferences to the workloads that are in this scope.
   *
   * @schema HealthScopeSpec#workloadRefs
   */
  readonly workloadRefs: HealthScopeSpecWorkloadRefs[];

}

/**
 * Converts an object of type 'HealthScopeSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpec(obj: HealthScopeSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appReferences': obj.appReferences?.map(y => toJson_HealthScopeSpecAppReferences(y)),
    'probe-interval': obj.probeInterval,
    'probe-timeout': obj.probeTimeout,
    'workloadRefs': obj.workloadRefs?.map(y => toJson_HealthScopeSpecWorkloadRefs(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppReference records references of an application's components
 *
 * @schema HealthScopeSpecAppReferences
 */
export interface HealthScopeSpecAppReferences {
  /**
   * @schema HealthScopeSpecAppReferences#appName
   */
  readonly appName?: string;

  /**
   * @schema HealthScopeSpecAppReferences#compReferences
   */
  readonly compReferences?: HealthScopeSpecAppReferencesCompReferences[];

}

/**
 * Converts an object of type 'HealthScopeSpecAppReferences' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpecAppReferences(obj: HealthScopeSpecAppReferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appName': obj.appName,
    'compReferences': obj.compReferences?.map(y => toJson_HealthScopeSpecAppReferencesCompReferences(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
 * Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema HealthScopeSpecWorkloadRefs
 */
export interface HealthScopeSpecWorkloadRefs {
  /**
   * API version of the referent.
   *
   * @schema HealthScopeSpecWorkloadRefs#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema HealthScopeSpecWorkloadRefs#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema HealthScopeSpecWorkloadRefs#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema HealthScopeSpecWorkloadRefs#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema HealthScopeSpecWorkloadRefs#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema HealthScopeSpecWorkloadRefs#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema HealthScopeSpecWorkloadRefs#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'HealthScopeSpecWorkloadRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpecWorkloadRefs(obj: HealthScopeSpecWorkloadRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CompReference records references of a component's resources
 *
 * @schema HealthScopeSpecAppReferencesCompReferences
 */
export interface HealthScopeSpecAppReferencesCompReferences {
  /**
   * @schema HealthScopeSpecAppReferencesCompReferences#compName
   */
  readonly compName?: string;

  /**
   * @schema HealthScopeSpecAppReferencesCompReferences#traits
   */
  readonly traits?: HealthScopeSpecAppReferencesCompReferencesTraits[];

  /**
   * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
   * Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @schema HealthScopeSpecAppReferencesCompReferences#workload
   */
  readonly workload?: HealthScopeSpecAppReferencesCompReferencesWorkload;

}

/**
 * Converts an object of type 'HealthScopeSpecAppReferencesCompReferences' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpecAppReferencesCompReferences(obj: HealthScopeSpecAppReferencesCompReferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'compName': obj.compName,
    'traits': obj.traits?.map(y => toJson_HealthScopeSpecAppReferencesCompReferencesTraits(y)),
    'workload': toJson_HealthScopeSpecAppReferencesCompReferencesWorkload(obj.workload),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
 * Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema HealthScopeSpecAppReferencesCompReferencesTraits
 */
export interface HealthScopeSpecAppReferencesCompReferencesTraits {
  /**
   * API version of the referent.
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesTraits#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'HealthScopeSpecAppReferencesCompReferencesTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpecAppReferencesCompReferencesTraits(obj: HealthScopeSpecAppReferencesCompReferencesTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
 * Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema HealthScopeSpecAppReferencesCompReferencesWorkload
 */
export interface HealthScopeSpecAppReferencesCompReferencesWorkload {
  /**
   * API version of the referent.
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema HealthScopeSpecAppReferencesCompReferencesWorkload#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'HealthScopeSpecAppReferencesCompReferencesWorkload' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HealthScopeSpecAppReferencesCompReferencesWorkload(obj: HealthScopeSpecAppReferencesCompReferencesWorkload | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Initializer is the Schema for the Initializer API
 *
 * @schema Initializer
 */
export class Initializer extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Initializer"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'Initializer',
  }

  /**
   * Renders a Kubernetes manifest for "Initializer".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: InitializerProps = {}): any {
    return {
      ...Initializer.GVK,
      ...toJson_InitializerProps(props),
    };
  }

  /**
   * Defines a "Initializer" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: InitializerProps = {}) {
    super(scope, id, {
      ...Initializer.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Initializer.GVK,
      ...toJson_InitializerProps(resolved),
    };
  }
}

/**
 * Initializer is the Schema for the Initializer API
 *
 * @schema Initializer
 */
export interface InitializerProps {
  /**
   * @schema Initializer#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A InitializerSpec defines the desired state of a Initializer.
   *
   * @schema Initializer#spec
   */
  readonly spec?: InitializerSpec;

}

/**
 * Converts an object of type 'InitializerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerProps(obj: InitializerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_InitializerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A InitializerSpec defines the desired state of a Initializer.
 *
 * @schema InitializerSpec
 */
export interface InitializerSpec {
  /**
   * AppTemplate indicates the application template to render and deploy an system application.
   *
   * @schema InitializerSpec#appTemplate
   */
  readonly appTemplate: InitializerSpecAppTemplate;

  /**
   * DependsOn indicates the other initializers that this depends on. It will not apply its components until all dependencies exist.
   *
   * @schema InitializerSpec#dependsOn
   */
  readonly dependsOn?: InitializerSpecDependsOn[];

}

/**
 * Converts an object of type 'InitializerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpec(obj: InitializerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appTemplate': toJson_InitializerSpecAppTemplate(obj.appTemplate),
    'dependsOn': obj.dependsOn?.map(y => toJson_InitializerSpecDependsOn(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppTemplate indicates the application template to render and deploy an system application.
 *
 * @schema InitializerSpecAppTemplate
 */
export interface InitializerSpecAppTemplate {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   *
   * @schema InitializerSpecAppTemplate#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplate#kind
   */
  readonly kind?: string;

  /**
   * @schema InitializerSpecAppTemplate#metadata
   */
  readonly metadata?: InitializerSpecAppTemplateMetadata;

  /**
   * ApplicationSpec is the spec of Application
   *
   * @schema InitializerSpecAppTemplate#spec
   */
  readonly spec?: InitializerSpecAppTemplateSpec;

  /**
   * AppStatus defines the observed state of Application
   *
   * @schema InitializerSpecAppTemplate#status
   */
  readonly status?: InitializerSpecAppTemplateStatus;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplate(obj: InitializerSpecAppTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'metadata': toJson_InitializerSpecAppTemplateMetadata(obj.metadata),
    'spec': toJson_InitializerSpecAppTemplateSpec(obj.spec),
    'status': toJson_InitializerSpecAppTemplateStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DependsOn refer to an object which Initializer depends on
 *
 * @schema InitializerSpecDependsOn
 */
export interface InitializerSpecDependsOn {
  /**
   * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @schema InitializerSpecDependsOn#ref
   */
  readonly ref: InitializerSpecDependsOnRef;

}

/**
 * Converts an object of type 'InitializerSpecDependsOn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecDependsOn(obj: InitializerSpecDependsOn | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ref': toJson_InitializerSpecDependsOnRef(obj.ref),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InitializerSpecAppTemplateMetadata
 */
export interface InitializerSpecAppTemplateMetadata {
  /**
   * @schema InitializerSpecAppTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema InitializerSpecAppTemplateMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema InitializerSpecAppTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema InitializerSpecAppTemplateMetadata#name
   */
  readonly name?: string;

  /**
   * @schema InitializerSpecAppTemplateMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateMetadata(obj: InitializerSpecAppTemplateMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec is the spec of Application
 *
 * @schema InitializerSpecAppTemplateSpec
 */
export interface InitializerSpecAppTemplateSpec {
  /**
   * @schema InitializerSpecAppTemplateSpec#components
   */
  readonly components: InitializerSpecAppTemplateSpecComponents[];

  /**
   * Policies defines the global policies for all components in the app, e.g. security, metrics, gitops, multi-cluster placement rules, etc. Policies are applied after components are rendered and before workflow steps are executed.
   *
   * @schema InitializerSpecAppTemplateSpec#policies
   */
  readonly policies?: InitializerSpecAppTemplateSpecPolicies[];

  /**
   * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
   *
   * @schema InitializerSpecAppTemplateSpec#rolloutPlan
   */
  readonly rolloutPlan?: InitializerSpecAppTemplateSpecRolloutPlan;

  /**
   * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
   *
   * @schema InitializerSpecAppTemplateSpec#workflow
   */
  readonly workflow?: InitializerSpecAppTemplateSpecWorkflow;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpec(obj: InitializerSpecAppTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'components': obj.components?.map(y => toJson_InitializerSpecAppTemplateSpecComponents(y)),
    'policies': obj.policies?.map(y => toJson_InitializerSpecAppTemplateSpecPolicies(y)),
    'rolloutPlan': toJson_InitializerSpecAppTemplateSpecRolloutPlan(obj.rolloutPlan),
    'workflow': toJson_InitializerSpecAppTemplateSpecWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppStatus defines the observed state of Application
 *
 * @schema InitializerSpecAppTemplateStatus
 */
export interface InitializerSpecAppTemplateStatus {
  /**
   * AppliedResources record the resources that the  workflow step apply.
   *
   * @schema InitializerSpecAppTemplateStatus#appliedResources
   */
  readonly appliedResources?: InitializerSpecAppTemplateStatusAppliedResources[];

  /**
   * Components record the related Components created by Application Controller
   *
   * @schema InitializerSpecAppTemplateStatus#components
   */
  readonly components?: InitializerSpecAppTemplateStatusComponents[];

  /**
   * Conditions of the resource.
   *
   * @schema InitializerSpecAppTemplateStatus#conditions
   */
  readonly conditions?: InitializerSpecAppTemplateStatusConditions[];

  /**
   * LatestRevision of the application configuration it generates
   *
   * @schema InitializerSpecAppTemplateStatus#latestRevision
   */
  readonly latestRevision?: InitializerSpecAppTemplateStatusLatestRevision;

  /**
   * The generation observed by the application controller.
   *
   * @schema InitializerSpecAppTemplateStatus#observedGeneration
   */
  readonly observedGeneration?: number;

  /**
   * ResourceTracker record the status of the ResourceTracker
   *
   * @schema InitializerSpecAppTemplateStatus#resourceTracker
   */
  readonly resourceTracker?: InitializerSpecAppTemplateStatusResourceTracker;

  /**
   * AppRolloutStatus defines the observed state of AppRollout
   *
   * @schema InitializerSpecAppTemplateStatus#rollout
   */
  readonly rollout?: InitializerSpecAppTemplateStatusRollout;

  /**
   * Services record the status of the application services
   *
   * @schema InitializerSpecAppTemplateStatus#services
   */
  readonly services?: InitializerSpecAppTemplateStatusServices[];

  /**
   * ApplicationPhase is a label for the condition of a application at the current time
   *
   * @schema InitializerSpecAppTemplateStatus#status
   */
  readonly status?: string;

  /**
   * Workflow record the status of workflow
   *
   * @schema InitializerSpecAppTemplateStatus#workflow
   */
  readonly workflow?: InitializerSpecAppTemplateStatusWorkflow;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatus(obj: InitializerSpecAppTemplateStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliedResources': obj.appliedResources?.map(y => toJson_InitializerSpecAppTemplateStatusAppliedResources(y)),
    'components': obj.components?.map(y => toJson_InitializerSpecAppTemplateStatusComponents(y)),
    'conditions': obj.conditions?.map(y => toJson_InitializerSpecAppTemplateStatusConditions(y)),
    'latestRevision': toJson_InitializerSpecAppTemplateStatusLatestRevision(obj.latestRevision),
    'observedGeneration': obj.observedGeneration,
    'resourceTracker': toJson_InitializerSpecAppTemplateStatusResourceTracker(obj.resourceTracker),
    'rollout': toJson_InitializerSpecAppTemplateStatusRollout(obj.rollout),
    'services': obj.services?.map(y => toJson_InitializerSpecAppTemplateStatusServices(y)),
    'status': obj.status,
    'workflow': toJson_InitializerSpecAppTemplateStatusWorkflow(obj.workflow),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema InitializerSpecDependsOnRef
 */
export interface InitializerSpecDependsOnRef {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecDependsOnRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecDependsOnRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecDependsOnRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecDependsOnRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecDependsOnRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecDependsOnRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecDependsOnRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecDependsOnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecDependsOnRef(obj: InitializerSpecDependsOnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponent describe the component of application
 *
 * @schema InitializerSpecAppTemplateSpecComponents
 */
export interface InitializerSpecAppTemplateSpecComponents {
  /**
   * @schema InitializerSpecAppTemplateSpecComponents#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * ExternalRevision specified the component revisionName
   *
   * @schema InitializerSpecAppTemplateSpecComponents#externalRevision
   */
  readonly externalRevision?: string;

  /**
   * StepInputs defines variable input of WorkflowStep
   *
   * @schema InitializerSpecAppTemplateSpecComponents#inputs
   */
  readonly inputs?: InitializerSpecAppTemplateSpecComponentsInputs[];

  /**
   * @schema InitializerSpecAppTemplateSpecComponents#name
   */
  readonly name: string;

  /**
   * StepOutputs defines output variable of WorkflowStep
   *
   * @schema InitializerSpecAppTemplateSpecComponents#outputs
   */
  readonly outputs?: InitializerSpecAppTemplateSpecComponentsOutputs[];

  /**
   * @schema InitializerSpecAppTemplateSpecComponents#properties
   */
  readonly properties?: any;

  /**
   * scopes in ApplicationComponent defines the component-level scopes the format is <scope-type:scope-instance-name> pairs, the key represents type of `ScopeDefinition` while the value represent the name of scope instance.
   *
   * @schema InitializerSpecAppTemplateSpecComponents#scopes
   */
  readonly scopes?: { [key: string]: string };

  /**
   * Traits define the trait of one component, the type must be array to keep the order.
   *
   * @schema InitializerSpecAppTemplateSpecComponents#traits
   */
  readonly traits?: InitializerSpecAppTemplateSpecComponentsTraits[];

  /**
   * @schema InitializerSpecAppTemplateSpecComponents#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecComponents(obj: InitializerSpecAppTemplateSpecComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'externalRevision': obj.externalRevision,
    'inputs': obj.inputs?.map(y => toJson_InitializerSpecAppTemplateSpecComponentsInputs(y)),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_InitializerSpecAppTemplateSpecComponentsOutputs(y)),
    'properties': obj.properties,
    'scopes': ((obj.scopes) === undefined) ? undefined : (Object.entries(obj.scopes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'traits': obj.traits?.map(y => toJson_InitializerSpecAppTemplateSpecComponentsTraits(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppPolicy defines a global policy for all components in the app.
 *
 * @schema InitializerSpecAppTemplateSpecPolicies
 */
export interface InitializerSpecAppTemplateSpecPolicies {
  /**
   * Name is the unique name of the policy.
   *
   * @schema InitializerSpecAppTemplateSpecPolicies#name
   */
  readonly name: string;

  /**
   * @schema InitializerSpecAppTemplateSpecPolicies#properties
   */
  readonly properties?: any;

  /**
   * @schema InitializerSpecAppTemplateSpecPolicies#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecPolicies' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecPolicies(obj: InitializerSpecAppTemplateSpecPolicies | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources The controller simply replace the old resources with the new one if there is no rollout plan involved
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlan
 */
export interface InitializerSpecAppTemplateSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlan(obj: InitializerSpecAppTemplateSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow defines how to customize the control logic. If workflow is specified, Vela won't apply any resource, but provide rendered output in AppRevision. Workflow steps are executed in array order, and each step: - will have a context in annotation. - should mark "finish" phase in status.conditions.
 *
 * @schema InitializerSpecAppTemplateSpecWorkflow
 */
export interface InitializerSpecAppTemplateSpecWorkflow {
  /**
   * @schema InitializerSpecAppTemplateSpecWorkflow#steps
   */
  readonly steps?: InitializerSpecAppTemplateSpecWorkflowSteps[];

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecWorkflow(obj: InitializerSpecAppTemplateSpecWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'steps': obj.steps?.map(y => toJson_InitializerSpecAppTemplateSpecWorkflowSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClusterObjectReference defines the object reference with cluster.
 *
 * @schema InitializerSpecAppTemplateStatusAppliedResources
 */
export interface InitializerSpecAppTemplateStatusAppliedResources {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusAppliedResources#cluster
   */
  readonly cluster?: string;

  /**
   * ResourceCreatorRole defines the resource creator.
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#creator
   */
  readonly creator?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateStatusAppliedResources#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusAppliedResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusAppliedResources(obj: InitializerSpecAppTemplateStatusAppliedResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'cluster': obj.cluster,
    'creator': obj.creator,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema InitializerSpecAppTemplateStatusComponents
 */
export interface InitializerSpecAppTemplateStatusComponents {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateStatusComponents#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateStatusComponents#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateStatusComponents#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateStatusComponents#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateStatusComponents#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateStatusComponents#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateStatusComponents#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusComponents' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusComponents(obj: InitializerSpecAppTemplateStatusComponents | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema InitializerSpecAppTemplateStatusConditions
 */
export interface InitializerSpecAppTemplateStatusConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema InitializerSpecAppTemplateStatusConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema InitializerSpecAppTemplateStatusConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema InitializerSpecAppTemplateStatusConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema InitializerSpecAppTemplateStatusConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema InitializerSpecAppTemplateStatusConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusConditions(obj: InitializerSpecAppTemplateStatusConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LatestRevision of the application configuration it generates
 *
 * @schema InitializerSpecAppTemplateStatusLatestRevision
 */
export interface InitializerSpecAppTemplateStatusLatestRevision {
  /**
   * @schema InitializerSpecAppTemplateStatusLatestRevision#name
   */
  readonly name: string;

  /**
   * @schema InitializerSpecAppTemplateStatusLatestRevision#revision
   */
  readonly revision: number;

  /**
   * RevisionHash record the hash value of the spec of ApplicationRevision object.
   *
   * @schema InitializerSpecAppTemplateStatusLatestRevision#revisionHash
   */
  readonly revisionHash?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusLatestRevision' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusLatestRevision(obj: InitializerSpecAppTemplateStatusLatestRevision | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'revision': obj.revision,
    'revisionHash': obj.revisionHash,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceTracker record the status of the ResourceTracker
 *
 * @schema InitializerSpecAppTemplateStatusResourceTracker
 */
export interface InitializerSpecAppTemplateStatusResourceTracker {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateStatusResourceTracker#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusResourceTracker' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusResourceTracker(obj: InitializerSpecAppTemplateStatusResourceTracker | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AppRolloutStatus defines the observed state of AppRollout
 *
 * @schema InitializerSpecAppTemplateStatusRollout
 */
export interface InitializerSpecAppTemplateStatusRollout {
  /**
   * LastSourceAppRevision contains the name of the app that we need to upgrade from. We will restart the rollout if this is not the same as the spec
   *
   * @schema InitializerSpecAppTemplateStatusRollout#LastSourceAppRevision
   */
  readonly lastSourceAppRevision?: string;

  /**
   * BatchRollingState only meaningful when the Status is rolling
   *
   * @schema InitializerSpecAppTemplateStatusRollout#batchRollingState
   */
  readonly batchRollingState?: string;

  /**
   * Conditions of the resource.
   *
   * @schema InitializerSpecAppTemplateStatusRollout#conditions
   */
  readonly conditions?: InitializerSpecAppTemplateStatusRolloutConditions[];

  /**
   * The current batch the rollout is working on/blocked it starts from 0
   *
   * @schema InitializerSpecAppTemplateStatusRollout#currentBatch
   */
  readonly currentBatch: number;

  /**
   * lastAppliedPodTemplateIdentifier is a string that uniquely represent the last pod template each workload type could use different ways to identify that so we cannot compare between resources We update this field only after a successful rollout
   *
   * @schema InitializerSpecAppTemplateStatusRollout#lastAppliedPodTemplateIdentifier
   */
  readonly lastAppliedPodTemplateIdentifier?: string;

  /**
   * LastUpgradedTargetAppRevision contains the name of the app that we upgraded to We will restart the rollout if this is not the same as the spec
   *
   * @schema InitializerSpecAppTemplateStatusRollout#lastTargetAppRevision
   */
  readonly lastTargetAppRevision: string;

  /**
   * RollingState is the Rollout State
   *
   * @schema InitializerSpecAppTemplateStatusRollout#rollingState
   */
  readonly rollingState: string;

  /**
   * RolloutTargetSize is the size of the target resources. This is determined once the initial spec verification and does not change until the rollout is restarted
   *
   * @schema InitializerSpecAppTemplateStatusRollout#rolloutOriginalSize
   */
  readonly rolloutOriginalSize?: number;

  /**
   * RolloutTargetSize is the size of the target resources. This is determined once the initial spec verification and does not change until the rollout is restarted
   *
   * @schema InitializerSpecAppTemplateStatusRollout#rolloutTargetSize
   */
  readonly rolloutTargetSize?: number;

  /**
   * NewPodTemplateIdentifier is a string that uniquely represent the new pod template each workload type could use different ways to identify that so we cannot compare between resources
   *
   * @schema InitializerSpecAppTemplateStatusRollout#targetGeneration
   */
  readonly targetGeneration?: string;

  /**
   * UpgradedReadyReplicas is the number of Pods upgraded by the rollout controller that have a Ready Condition.
   *
   * @schema InitializerSpecAppTemplateStatusRollout#upgradedReadyReplicas
   */
  readonly upgradedReadyReplicas: number;

  /**
   * UpgradedReplicas is the number of Pods upgraded by the rollout controller
   *
   * @schema InitializerSpecAppTemplateStatusRollout#upgradedReplicas
   */
  readonly upgradedReplicas: number;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusRollout' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusRollout(obj: InitializerSpecAppTemplateStatusRollout | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'LastSourceAppRevision': obj.lastSourceAppRevision,
    'batchRollingState': obj.batchRollingState,
    'conditions': obj.conditions?.map(y => toJson_InitializerSpecAppTemplateStatusRolloutConditions(y)),
    'currentBatch': obj.currentBatch,
    'lastAppliedPodTemplateIdentifier': obj.lastAppliedPodTemplateIdentifier,
    'lastTargetAppRevision': obj.lastTargetAppRevision,
    'rollingState': obj.rollingState,
    'rolloutOriginalSize': obj.rolloutOriginalSize,
    'rolloutTargetSize': obj.rolloutTargetSize,
    'targetGeneration': obj.targetGeneration,
    'upgradedReadyReplicas': obj.upgradedReadyReplicas,
    'upgradedReplicas': obj.upgradedReplicas,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationComponentStatus record the health status of App component
 *
 * @schema InitializerSpecAppTemplateStatusServices
 */
export interface InitializerSpecAppTemplateStatusServices {
  /**
   * @schema InitializerSpecAppTemplateStatusServices#env
   */
  readonly env?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusServices#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema InitializerSpecAppTemplateStatusServices#message
   */
  readonly message?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusServices#name
   */
  readonly name: string;

  /**
   * @schema InitializerSpecAppTemplateStatusServices#scopes
   */
  readonly scopes?: InitializerSpecAppTemplateStatusServicesScopes[];

  /**
   * @schema InitializerSpecAppTemplateStatusServices#traits
   */
  readonly traits?: InitializerSpecAppTemplateStatusServicesTraits[];

  /**
   * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
   *
   * @schema InitializerSpecAppTemplateStatusServices#workloadDefinition
   */
  readonly workloadDefinition?: InitializerSpecAppTemplateStatusServicesWorkloadDefinition;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusServices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusServices(obj: InitializerSpecAppTemplateStatusServices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env,
    'healthy': obj.healthy,
    'message': obj.message,
    'name': obj.name,
    'scopes': obj.scopes?.map(y => toJson_InitializerSpecAppTemplateStatusServicesScopes(y)),
    'traits': obj.traits?.map(y => toJson_InitializerSpecAppTemplateStatusServicesTraits(y)),
    'workloadDefinition': toJson_InitializerSpecAppTemplateStatusServicesWorkloadDefinition(obj.workloadDefinition),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Workflow record the status of workflow
 *
 * @schema InitializerSpecAppTemplateStatusWorkflow
 */
export interface InitializerSpecAppTemplateStatusWorkflow {
  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#appRevision
   */
  readonly appRevision?: string;

  /**
   * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
   *
   * @schema InitializerSpecAppTemplateStatusWorkflow#contextBackend
   */
  readonly contextBackend?: InitializerSpecAppTemplateStatusWorkflowContextBackend;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#finished
   */
  readonly finished: boolean;

  /**
   * WorkflowMode describes the mode of workflow
   *
   * @schema InitializerSpecAppTemplateStatusWorkflow#mode
   */
  readonly mode: string;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#startTime
   */
  readonly startTime?: Date;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#steps
   */
  readonly steps?: InitializerSpecAppTemplateStatusWorkflowSteps[];

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#suspend
   */
  readonly suspend: boolean;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflow#terminated
   */
  readonly terminated: boolean;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusWorkflow' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusWorkflow(obj: InitializerSpecAppTemplateStatusWorkflow | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appRevision': obj.appRevision,
    'contextBackend': toJson_InitializerSpecAppTemplateStatusWorkflowContextBackend(obj.contextBackend),
    'finished': obj.finished,
    'mode': obj.mode,
    'startTime': obj.startTime?.toISOString(),
    'steps': obj.steps?.map(y => toJson_InitializerSpecAppTemplateStatusWorkflowSteps(y)),
    'suspend': obj.suspend,
    'terminated': obj.terminated,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InitializerSpecAppTemplateSpecComponentsInputs
 */
export interface InitializerSpecAppTemplateSpecComponentsInputs {
  /**
   * @schema InitializerSpecAppTemplateSpecComponentsInputs#from
   */
  readonly from: string;

  /**
   * @schema InitializerSpecAppTemplateSpecComponentsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecComponentsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecComponentsInputs(obj: InitializerSpecAppTemplateSpecComponentsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InitializerSpecAppTemplateSpecComponentsOutputs
 */
export interface InitializerSpecAppTemplateSpecComponentsOutputs {
  /**
   * @schema InitializerSpecAppTemplateSpecComponentsOutputs#name
   */
  readonly name: string;

  /**
   * @schema InitializerSpecAppTemplateSpecComponentsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecComponentsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecComponentsOutputs(obj: InitializerSpecAppTemplateSpecComponentsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTrait defines the trait of application
 *
 * @schema InitializerSpecAppTemplateSpecComponentsTraits
 */
export interface InitializerSpecAppTemplateSpecComponentsTraits {
  /**
   * @schema InitializerSpecAppTemplateSpecComponentsTraits#properties
   */
  readonly properties?: any;

  /**
   * @schema InitializerSpecAppTemplateSpecComponentsTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecComponentsTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecComponentsTraits(obj: InitializerSpecAppTemplateSpecComponentsTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric(obj: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStep defines how to execute a workflow step.
 *
 * @schema InitializerSpecAppTemplateSpecWorkflowSteps
 */
export interface InitializerSpecAppTemplateSpecWorkflowSteps {
  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * StepInputs defines variable input of WorkflowStep
   *
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#inputs
   */
  readonly inputs?: InitializerSpecAppTemplateSpecWorkflowStepsInputs[];

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#name
   */
  readonly name: string;

  /**
   * StepOutputs defines output variable of WorkflowStep
   *
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#outputs
   */
  readonly outputs?: InitializerSpecAppTemplateSpecWorkflowStepsOutputs[];

  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#properties
   */
  readonly properties?: any;

  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecWorkflowSteps(obj: InitializerSpecAppTemplateSpecWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'inputs': obj.inputs?.map(y => toJson_InitializerSpecAppTemplateSpecWorkflowStepsInputs(y)),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_InitializerSpecAppTemplateSpecWorkflowStepsOutputs(y)),
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Condition that may apply to a resource.
 *
 * @schema InitializerSpecAppTemplateStatusRolloutConditions
 */
export interface InitializerSpecAppTemplateStatusRolloutConditions {
  /**
   * LastTransitionTime is the last time this condition transitioned from one status to another.
   *
   * @schema InitializerSpecAppTemplateStatusRolloutConditions#lastTransitionTime
   */
  readonly lastTransitionTime: Date;

  /**
   * A Message containing details about this condition's last transition from one status to another, if any.
   *
   * @schema InitializerSpecAppTemplateStatusRolloutConditions#message
   */
  readonly message?: string;

  /**
   * A Reason for this condition's last transition from one status to another.
   *
   * @schema InitializerSpecAppTemplateStatusRolloutConditions#reason
   */
  readonly reason: string;

  /**
   * Status of this condition; is it currently True, False, or Unknown?
   *
   * @schema InitializerSpecAppTemplateStatusRolloutConditions#status
   */
  readonly status: string;

  /**
   * Type of this condition. At most one of each condition type may apply to a resource at any point in time.
   *
   * @schema InitializerSpecAppTemplateStatusRolloutConditions#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusRolloutConditions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusRolloutConditions(obj: InitializerSpecAppTemplateStatusRolloutConditions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'lastTransitionTime': obj.lastTransitionTime?.toISOString(),
    'message': obj.message,
    'reason': obj.reason,
    'status': obj.status,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema InitializerSpecAppTemplateStatusServicesScopes
 */
export interface InitializerSpecAppTemplateStatusServicesScopes {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateStatusServicesScopes#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusServicesScopes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusServicesScopes(obj: InitializerSpecAppTemplateStatusServicesScopes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationTraitStatus records the trait health status
 *
 * @schema InitializerSpecAppTemplateStatusServicesTraits
 */
export interface InitializerSpecAppTemplateStatusServicesTraits {
  /**
   * @schema InitializerSpecAppTemplateStatusServicesTraits#healthy
   */
  readonly healthy: boolean;

  /**
   * @schema InitializerSpecAppTemplateStatusServicesTraits#message
   */
  readonly message?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusServicesTraits#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusServicesTraits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusServicesTraits(obj: InitializerSpecAppTemplateStatusServicesTraits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'healthy': obj.healthy,
    'message': obj.message,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkloadDefinition is the definition of a WorkloadDefinition, such as deployments/apps.v1
 *
 * @schema InitializerSpecAppTemplateStatusServicesWorkloadDefinition
 */
export interface InitializerSpecAppTemplateStatusServicesWorkloadDefinition {
  /**
   * @schema InitializerSpecAppTemplateStatusServicesWorkloadDefinition#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema InitializerSpecAppTemplateStatusServicesWorkloadDefinition#kind
   */
  readonly kind: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusServicesWorkloadDefinition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusServicesWorkloadDefinition(obj: InitializerSpecAppTemplateStatusServicesWorkloadDefinition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
 *
 * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend
 */
export interface InitializerSpecAppTemplateStatusWorkflowContextBackend {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowContextBackend#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusWorkflowContextBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusWorkflowContextBackend(obj: InitializerSpecAppTemplateStatusWorkflowContextBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepStatus record the status of a workflow step
 *
 * @schema InitializerSpecAppTemplateStatusWorkflowSteps
 */
export interface InitializerSpecAppTemplateStatusWorkflowSteps {
  /**
   * FirstExecuteTime is the first time this step execution.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#firstExecuteTime
   */
  readonly firstExecuteTime?: Date;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#id
   */
  readonly id: string;

  /**
   * LastExecuteTime is the last time this step execution.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#lastExecuteTime
   */
  readonly lastExecuteTime?: Date;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#message
   */
  readonly message?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#reason
   */
  readonly reason?: string;

  /**
   * SubStepsStatus record the status of workflow steps.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#subSteps
   */
  readonly subSteps?: InitializerSpecAppTemplateStatusWorkflowStepsSubSteps;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusWorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusWorkflowSteps(obj: InitializerSpecAppTemplateStatusWorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstExecuteTime': obj.firstExecuteTime?.toISOString(),
    'id': obj.id,
    'lastExecuteTime': obj.lastExecuteTime?.toISOString(),
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'subSteps': toJson_InitializerSpecAppTemplateStatusWorkflowStepsSubSteps(obj.subSteps),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange(obj: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef(obj: InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas
 */
export class InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema InitializerSpecAppTemplateSpecWorkflowStepsInputs
 */
export interface InitializerSpecAppTemplateSpecWorkflowStepsInputs {
  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecWorkflowStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecWorkflowStepsInputs(obj: InitializerSpecAppTemplateSpecWorkflowStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema InitializerSpecAppTemplateSpecWorkflowStepsOutputs
 */
export interface InitializerSpecAppTemplateSpecWorkflowStepsOutputs {
  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema InitializerSpecAppTemplateSpecWorkflowStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecWorkflowStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecWorkflowStepsOutputs(obj: InitializerSpecAppTemplateSpecWorkflowStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SubStepsStatus record the status of workflow steps.
 *
 * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubSteps
 */
export interface InitializerSpecAppTemplateStatusWorkflowStepsSubSteps {
  /**
   * WorkflowMode describes the mode of workflow
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubSteps#mode
   */
  readonly mode?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubSteps#stepIndex
   */
  readonly stepIndex?: number;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubSteps#steps
   */
  readonly steps?: InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps[];

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusWorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusWorkflowStepsSubSteps(obj: InitializerSpecAppTemplateStatusWorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
    'stepIndex': obj.stepIndex,
    'steps': obj.steps?.map(y => toJson_InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new InitializerSpecAppTemplateSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowSubStepStatus record the status of a workflow step
 *
 * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps
 */
export interface InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps {
  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#id
   */
  readonly id: string;

  /**
   * A human readable message indicating details about why the workflowStep is in this state.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#message
   */
  readonly message?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#name
   */
  readonly name?: string;

  /**
   * WorkflowStepPhase describes the phase of a workflow step.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#phase
   */
  readonly phase?: string;

  /**
   * A brief CamelCase message indicating details about why the workflowStep is in this state.
   *
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#reason
   */
  readonly reason?: string;

  /**
   * @schema InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps(obj: InitializerSpecAppTemplateStatusWorkflowStepsSubStepsSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'id': obj.id,
    'message': obj.message,
    'name': obj.name,
    'phase': obj.phase,
    'reason': obj.reason,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new InitializerSpecAppTemplateSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * Policy is the Schema for the policy API
 *
 * @schema Policy
 */
export class Policy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Policy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha1',
    kind: 'Policy',
  }

  /**
   * Renders a Kubernetes manifest for "Policy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PolicyProps): any {
    return {
      ...Policy.GVK,
      ...toJson_PolicyProps(props),
    };
  }

  /**
   * Defines a "Policy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PolicyProps) {
    super(scope, id, {
      ...Policy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Policy.GVK,
      ...toJson_PolicyProps(resolved),
    };
  }
}

/**
 * Policy is the Schema for the policy API
 *
 * @schema Policy
 */
export interface PolicyProps {
  /**
   * @schema Policy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema Policy#properties
   */
  readonly properties?: any;

  /**
   * @schema Policy#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyProps(obj: PolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'properties': obj.properties,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * PolicyDefinition is the Schema for the policydefinitions API
 *
 * @schema PolicyDefinition
 */
export class PolicyDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PolicyDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'PolicyDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "PolicyDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PolicyDefinitionProps = {}): any {
    return {
      ...PolicyDefinition.GVK,
      ...toJson_PolicyDefinitionProps(props),
    };
  }

  /**
   * Defines a "PolicyDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PolicyDefinitionProps = {}) {
    super(scope, id, {
      ...PolicyDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PolicyDefinition.GVK,
      ...toJson_PolicyDefinitionProps(resolved),
    };
  }
}

/**
 * PolicyDefinition is the Schema for the policydefinitions API
 *
 * @schema PolicyDefinition
 */
export interface PolicyDefinitionProps {
  /**
   * @schema PolicyDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PolicyDefinitionSpec defines the desired state of PolicyDefinition
   *
   * @schema PolicyDefinition#spec
   */
  readonly spec?: PolicyDefinitionSpec;

}

/**
 * Converts an object of type 'PolicyDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionProps(obj: PolicyDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PolicyDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PolicyDefinitionSpec defines the desired state of PolicyDefinition
 *
 * @schema PolicyDefinitionSpec
 */
export interface PolicyDefinitionSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema PolicyDefinitionSpec#definitionRef
   */
  readonly definitionRef?: PolicyDefinitionSpecDefinitionRef;

  /**
   * ManageHealthCheck means the policy will handle health checking and skip application controller built-in health checking.
   *
   * @schema PolicyDefinitionSpec#manageHealthCheck
   */
  readonly manageHealthCheck?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
   *
   * @schema PolicyDefinitionSpec#schematic
   */
  readonly schematic?: PolicyDefinitionSpecSchematic;

}

/**
 * Converts an object of type 'PolicyDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpec(obj: PolicyDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_PolicyDefinitionSpecDefinitionRef(obj.definitionRef),
    'manageHealthCheck': obj.manageHealthCheck,
    'schematic': toJson_PolicyDefinitionSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema PolicyDefinitionSpecDefinitionRef
 */
export interface PolicyDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema PolicyDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema PolicyDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecDefinitionRef(obj: PolicyDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the policy definition. Only CUE schematic is supported for now.
 *
 * @schema PolicyDefinitionSpecSchematic
 */
export interface PolicyDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema PolicyDefinitionSpecSchematic#cue
   */
  readonly cue?: PolicyDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema PolicyDefinitionSpecSchematic#helm
   */
  readonly helm?: PolicyDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema PolicyDefinitionSpecSchematic#kube
   */
  readonly kube?: PolicyDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema PolicyDefinitionSpecSchematic#terraform
   */
  readonly terraform?: PolicyDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematic(obj: PolicyDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_PolicyDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_PolicyDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_PolicyDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_PolicyDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema PolicyDefinitionSpecSchematicCue
 */
export interface PolicyDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema PolicyDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicCue(obj: PolicyDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema PolicyDefinitionSpecSchematicHelm
 */
export interface PolicyDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema PolicyDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema PolicyDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicHelm(obj: PolicyDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema PolicyDefinitionSpecSchematicKube
 */
export interface PolicyDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema PolicyDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: PolicyDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema PolicyDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicKube(obj: PolicyDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_PolicyDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema PolicyDefinitionSpecSchematicTerraform
 */
export interface PolicyDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: PolicyDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#type
   */
  readonly type?: PolicyDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema PolicyDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicTerraform(obj: PolicyDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_PolicyDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema PolicyDefinitionSpecSchematicKubeParameters
 */
export interface PolicyDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema PolicyDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema PolicyDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema PolicyDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema PolicyDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema PolicyDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: PolicyDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicKubeParameters(obj: PolicyDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: PolicyDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema PolicyDefinitionSpecSchematicTerraformProviderRef
 */
export interface PolicyDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicTerraformProviderRef(obj: PolicyDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema PolicyDefinitionSpecSchematicTerraformType
 */
export enum PolicyDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: PolicyDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema PolicyDefinitionSpecSchematicKubeParametersType
 */
export enum PolicyDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * An ResourceTracker represents a tracker for track cross namespace resources
 *
 * @schema ResourceTracker
 */
export class ResourceTracker extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResourceTracker"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'ResourceTracker',
  }

  /**
   * Renders a Kubernetes manifest for "ResourceTracker".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResourceTrackerProps = {}): any {
    return {
      ...ResourceTracker.GVK,
      ...toJson_ResourceTrackerProps(props),
    };
  }

  /**
   * Defines a "ResourceTracker" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResourceTrackerProps = {}) {
    super(scope, id, {
      ...ResourceTracker.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResourceTracker.GVK,
      ...toJson_ResourceTrackerProps(resolved),
    };
  }
}

/**
 * An ResourceTracker represents a tracker for track cross namespace resources
 *
 * @schema ResourceTracker
 */
export interface ResourceTrackerProps {
  /**
   * @schema ResourceTracker#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ResourceTrackerSpec define the spec of resourceTracker
   *
   * @schema ResourceTracker#spec
   */
  readonly spec?: ResourceTrackerSpec;

}

/**
 * Converts an object of type 'ResourceTrackerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceTrackerProps(obj: ResourceTrackerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResourceTrackerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceTrackerSpec define the spec of resourceTracker
 *
 * @schema ResourceTrackerSpec
 */
export interface ResourceTrackerSpec {
  /**
   * @schema ResourceTrackerSpec#applicationGeneration
   */
  readonly applicationGeneration: number;

  /**
   * ResourceTrackerCompression represents the compressed components in ResourceTracker.
   *
   * @schema ResourceTrackerSpec#compression
   */
  readonly compression?: ResourceTrackerSpecCompression;

  /**
   * @schema ResourceTrackerSpec#managedResources
   */
  readonly managedResources?: ResourceTrackerSpecManagedResources[];

  /**
   * ResourceTrackerType defines the type of resourceTracker
   *
   * @schema ResourceTrackerSpec#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ResourceTrackerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceTrackerSpec(obj: ResourceTrackerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationGeneration': obj.applicationGeneration,
    'compression': toJson_ResourceTrackerSpecCompression(obj.compression),
    'managedResources': obj.managedResources?.map(y => toJson_ResourceTrackerSpecManagedResources(y)),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceTrackerCompression represents the compressed components in ResourceTracker.
 *
 * @schema ResourceTrackerSpecCompression
 */
export interface ResourceTrackerSpecCompression {
  /**
   * @schema ResourceTrackerSpecCompression#data
   */
  readonly data?: string;

  /**
   * Type the compression type
   *
   * @schema ResourceTrackerSpecCompression#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ResourceTrackerSpecCompression' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceTrackerSpecCompression(obj: ResourceTrackerSpecCompression | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'data': obj.data,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ManagedResource define the resource to be managed by ResourceTracker
 *
 * @schema ResourceTrackerSpecManagedResources
 */
export interface ResourceTrackerSpecManagedResources {
  /**
   * API version of the referent.
   *
   * @schema ResourceTrackerSpecManagedResources#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * @schema ResourceTrackerSpecManagedResources#cluster
   */
  readonly cluster?: string;

  /**
   * @schema ResourceTrackerSpecManagedResources#component
   */
  readonly component?: string;

  /**
   * @schema ResourceTrackerSpecManagedResources#creator
   */
  readonly creator?: string;

  /**
   * Deleted marks the resource to be deleted
   *
   * @schema ResourceTrackerSpecManagedResources#deleted
   */
  readonly deleted?: boolean;

  /**
   * @schema ResourceTrackerSpecManagedResources#env
   */
  readonly env?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema ResourceTrackerSpecManagedResources#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema ResourceTrackerSpecManagedResources#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema ResourceTrackerSpecManagedResources#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema ResourceTrackerSpecManagedResources#namespace
   */
  readonly namespace?: string;

  /**
   * @schema ResourceTrackerSpecManagedResources#raw
   */
  readonly raw?: any;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema ResourceTrackerSpecManagedResources#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * SkipGC marks the resource to skip gc
   *
   * @schema ResourceTrackerSpecManagedResources#skipGC
   */
  readonly skipGc?: boolean;

  /**
   * @schema ResourceTrackerSpecManagedResources#trait
   */
  readonly trait?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema ResourceTrackerSpecManagedResources#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'ResourceTrackerSpecManagedResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceTrackerSpecManagedResources(obj: ResourceTrackerSpecManagedResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'cluster': obj.cluster,
    'component': obj.component,
    'creator': obj.creator,
    'deleted': obj.deleted,
    'env': obj.env,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'raw': obj.raw,
    'resourceVersion': obj.resourceVersion,
    'skipGC': obj.skipGc,
    'trait': obj.trait,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Rollout is the Schema for the Rollout API
 *
 * @schema Rollout
 */
export class Rollout extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Rollout"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'Rollout',
  }

  /**
   * Renders a Kubernetes manifest for "Rollout".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RolloutProps = {}): any {
    return {
      ...Rollout.GVK,
      ...toJson_RolloutProps(props),
    };
  }

  /**
   * Defines a "Rollout" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RolloutProps = {}) {
    super(scope, id, {
      ...Rollout.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Rollout.GVK,
      ...toJson_RolloutProps(resolved),
    };
  }
}

/**
 * Rollout is the Schema for the Rollout API
 *
 * @schema Rollout
 */
export interface RolloutProps {
  /**
   * @schema Rollout#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RolloutSpec defines how to describe an update between different compRevision
   *
   * @schema Rollout#spec
   */
  readonly spec?: RolloutSpec;

}

/**
 * Converts an object of type 'RolloutProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutProps(obj: RolloutProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RolloutSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutSpec defines how to describe an update between different compRevision
 *
 * @schema RolloutSpec
 */
export interface RolloutSpec {
  /**
   * ComponentName specify the component name
   *
   * @schema RolloutSpec#componentName
   */
  readonly componentName: string;

  /**
   * RolloutPlan is the details on how to rollout the resources
   *
   * @schema RolloutSpec#rolloutPlan
   */
  readonly rolloutPlan: RolloutSpecRolloutPlan;

  /**
   * SourceRevisionName contains the name of the componentRevisionName  that we need to upgrade from. it can be empty only when it's the first time to deploy the application
   *
   * @schema RolloutSpec#sourceRevisionName
   */
  readonly sourceRevisionName?: string;

  /**
   * TargetRevisionName contains the name of the componentRevisionName that we need to upgrade to.
   *
   * @schema RolloutSpec#targetRevisionName
   */
  readonly targetRevisionName: string;

}

/**
 * Converts an object of type 'RolloutSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpec(obj: RolloutSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentName': obj.componentName,
    'rolloutPlan': toJson_RolloutSpecRolloutPlan(obj.rolloutPlan),
    'sourceRevisionName': obj.sourceRevisionName,
    'targetRevisionName': obj.targetRevisionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources
 *
 * @schema RolloutSpecRolloutPlan
 */
export interface RolloutSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema RolloutSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema RolloutSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: RolloutSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema RolloutSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema RolloutSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema RolloutSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: RolloutSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema RolloutSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema RolloutSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: RolloutSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema RolloutSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlan(obj: RolloutSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_RolloutSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_RolloutSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanCanaryMetric
 */
export interface RolloutSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: RolloutSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: RolloutSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetric(obj: RolloutSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_RolloutSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_RolloutSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema RolloutSpecRolloutPlanRolloutBatches
 */
export interface RolloutSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: RolloutSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatches(obj: RolloutSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutWebhooks
 */
export interface RolloutSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutWebhooks(obj: RolloutSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface RolloutSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetricMetricsRange(obj: RolloutSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface RolloutSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * APIVersion of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind: string;

  /**
   * Name of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name: string;

  /**
   * UID of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetricTemplateRef(obj: RolloutSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetric(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesReplicas
 */
export class RolloutSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new RolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new RolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Maximum value
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * APIVersion of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind: string;

  /**
   * Name of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name: string;

  /**
   * UID of the referenced object.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'name': obj.name,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ScopeDefinition
 */
export class ScopeDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ScopeDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'ScopeDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "ScopeDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ScopeDefinitionProps = {}): any {
    return {
      ...ScopeDefinition.GVK,
      ...toJson_ScopeDefinitionProps(props),
    };
  }

  /**
   * Defines a "ScopeDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ScopeDefinitionProps = {}) {
    super(scope, id, {
      ...ScopeDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ScopeDefinition.GVK,
      ...toJson_ScopeDefinitionProps(resolved),
    };
  }
}

/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ScopeDefinition
 */
export interface ScopeDefinitionProps {
  /**
   * @schema ScopeDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
   *
   * @schema ScopeDefinition#spec
   */
  readonly spec?: ScopeDefinitionSpec;

}

/**
 * Converts an object of type 'ScopeDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionProps(obj: ScopeDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ScopeDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
 *
 * @schema ScopeDefinitionSpec
 */
export interface ScopeDefinitionSpec {
  /**
   * AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
   *
   * @schema ScopeDefinitionSpec#allowComponentOverlap
   */
  readonly allowComponentOverlap: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this scope kind.
   *
   * @schema ScopeDefinitionSpec#definitionRef
   */
  readonly definitionRef: ScopeDefinitionSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ScopeDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * WorkloadRefsPath indicates if/where a scope accepts workloadRef objects
   *
   * @schema ScopeDefinitionSpec#workloadRefsPath
   */
  readonly workloadRefsPath?: string;

}

/**
 * Converts an object of type 'ScopeDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionSpec(obj: ScopeDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowComponentOverlap': obj.allowComponentOverlap,
    'definitionRef': toJson_ScopeDefinitionSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'workloadRefsPath': obj.workloadRefsPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this scope kind.
 *
 * @schema ScopeDefinitionSpecDefinitionRef
 */
export interface ScopeDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ScopeDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ScopeDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ScopeDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionSpecDefinitionRef(obj: ScopeDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ScopeDefinitionV1Beta1
 */
export class ScopeDefinitionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ScopeDefinitionV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'ScopeDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "ScopeDefinitionV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ScopeDefinitionV1Beta1Props = {}): any {
    return {
      ...ScopeDefinitionV1Beta1.GVK,
      ...toJson_ScopeDefinitionV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ScopeDefinitionV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ScopeDefinitionV1Beta1Props = {}) {
    super(scope, id, {
      ...ScopeDefinitionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ScopeDefinitionV1Beta1.GVK,
      ...toJson_ScopeDefinitionV1Beta1Props(resolved),
    };
  }
}

/**
 * A ScopeDefinition registers a kind of Kubernetes custom resource as a valid OAM scope kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the scope when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema ScopeDefinitionV1Beta1
 */
export interface ScopeDefinitionV1Beta1Props {
  /**
   * @schema ScopeDefinitionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
   *
   * @schema ScopeDefinitionV1Beta1#spec
   */
  readonly spec?: ScopeDefinitionV1Beta1Spec;

}

/**
 * Converts an object of type 'ScopeDefinitionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionV1Beta1Props(obj: ScopeDefinitionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ScopeDefinitionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ScopeDefinitionSpec defines the desired state of a ScopeDefinition.
 *
 * @schema ScopeDefinitionV1Beta1Spec
 */
export interface ScopeDefinitionV1Beta1Spec {
  /**
   * AllowComponentOverlap specifies whether an OAM component may exist in multiple instances of this kind of scope.
   *
   * @schema ScopeDefinitionV1Beta1Spec#allowComponentOverlap
   */
  readonly allowComponentOverlap: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this scope kind.
   *
   * @schema ScopeDefinitionV1Beta1Spec#definitionRef
   */
  readonly definitionRef: ScopeDefinitionV1Beta1SpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema ScopeDefinitionV1Beta1Spec#extension
   */
  readonly extension?: any;

  /**
   * WorkloadRefsPath indicates if/where a scope accepts workloadRef objects
   *
   * @schema ScopeDefinitionV1Beta1Spec#workloadRefsPath
   */
  readonly workloadRefsPath?: string;

}

/**
 * Converts an object of type 'ScopeDefinitionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionV1Beta1Spec(obj: ScopeDefinitionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowComponentOverlap': obj.allowComponentOverlap,
    'definitionRef': toJson_ScopeDefinitionV1Beta1SpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'workloadRefsPath': obj.workloadRefsPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this scope kind.
 *
 * @schema ScopeDefinitionV1Beta1SpecDefinitionRef
 */
export interface ScopeDefinitionV1Beta1SpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema ScopeDefinitionV1Beta1SpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema ScopeDefinitionV1Beta1SpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ScopeDefinitionV1Beta1SpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ScopeDefinitionV1Beta1SpecDefinitionRef(obj: ScopeDefinitionV1Beta1SpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema TraitDefinition
 */
export class TraitDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TraitDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'TraitDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "TraitDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TraitDefinitionProps = {}): any {
    return {
      ...TraitDefinition.GVK,
      ...toJson_TraitDefinitionProps(props),
    };
  }

  /**
   * Defines a "TraitDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TraitDefinitionProps = {}) {
    super(scope, id, {
      ...TraitDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TraitDefinition.GVK,
      ...toJson_TraitDefinitionProps(resolved),
    };
  }
}

/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema TraitDefinition
 */
export interface TraitDefinitionProps {
  /**
   * @schema TraitDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
   *
   * @schema TraitDefinition#spec
   */
  readonly spec?: TraitDefinitionSpec;

}

/**
 * Converts an object of type 'TraitDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionProps(obj: TraitDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TraitDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 *
 * @schema TraitDefinitionSpec
 */
export interface TraitDefinitionSpec {
  /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in kind.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   *
   * @schema TraitDefinitionSpec#appliesToWorkloads
   */
  readonly appliesToWorkloads?: string[];

  /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: "service" # Trait definition name "services.k8s.io" # API resource/crd name "*.networking.k8s.io" # API group "labelSelector:foo=bar" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   *
   * @schema TraitDefinitionSpec#conflictsWith
   */
  readonly conflictsWith?: string[];

  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema TraitDefinitionSpec#definitionRef
   */
  readonly definitionRef?: TraitDefinitionSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema TraitDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   *
   * @schema TraitDefinitionSpec#podDisruptive
   */
  readonly podDisruptive?: boolean;

  /**
   * Revision indicates whether a trait is aware of component revision
   *
   * @schema TraitDefinitionSpec#revisionEnabled
   */
  readonly revisionEnabled?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the trait
   *
   * @schema TraitDefinitionSpec#schematic
   */
  readonly schematic?: TraitDefinitionSpecSchematic;

  /**
   * Status defines the custom health policy and status message for trait
   *
   * @schema TraitDefinitionSpec#status
   */
  readonly status?: TraitDefinitionSpecStatus;

  /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   *
   * @schema TraitDefinitionSpec#workloadRefPath
   */
  readonly workloadRefPath?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpec(obj: TraitDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliesToWorkloads': obj.appliesToWorkloads?.map(y => y),
    'conflictsWith': obj.conflictsWith?.map(y => y),
    'definitionRef': toJson_TraitDefinitionSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podDisruptive': obj.podDisruptive,
    'revisionEnabled': obj.revisionEnabled,
    'schematic': toJson_TraitDefinitionSpecSchematic(obj.schematic),
    'status': toJson_TraitDefinitionSpecStatus(obj.status),
    'workloadRefPath': obj.workloadRefPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema TraitDefinitionSpecDefinitionRef
 */
export interface TraitDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema TraitDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema TraitDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecDefinitionRef(obj: TraitDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the trait
 *
 * @schema TraitDefinitionSpecSchematic
 */
export interface TraitDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema TraitDefinitionSpecSchematic#cue
   */
  readonly cue?: TraitDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema TraitDefinitionSpecSchematic#helm
   */
  readonly helm?: TraitDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema TraitDefinitionSpecSchematic#kube
   */
  readonly kube?: TraitDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema TraitDefinitionSpecSchematic#terraform
   */
  readonly terraform?: TraitDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematic(obj: TraitDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_TraitDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_TraitDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_TraitDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_TraitDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for trait
 *
 * @schema TraitDefinitionSpecStatus
 */
export interface TraitDefinitionSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema TraitDefinitionSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema TraitDefinitionSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecStatus(obj: TraitDefinitionSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema TraitDefinitionSpecSchematicCue
 */
export interface TraitDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema TraitDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicCue(obj: TraitDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema TraitDefinitionSpecSchematicHelm
 */
export interface TraitDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema TraitDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema TraitDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicHelm(obj: TraitDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema TraitDefinitionSpecSchematicKube
 */
export interface TraitDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema TraitDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: TraitDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema TraitDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicKube(obj: TraitDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_TraitDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema TraitDefinitionSpecSchematicTerraform
 */
export interface TraitDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema TraitDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema TraitDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema TraitDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema TraitDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema TraitDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema TraitDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: TraitDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema TraitDefinitionSpecSchematicTerraform#type
   */
  readonly type?: TraitDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema TraitDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicTerraform(obj: TraitDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_TraitDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema TraitDefinitionSpecSchematicKubeParameters
 */
export interface TraitDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema TraitDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema TraitDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema TraitDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema TraitDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema TraitDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: TraitDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicKubeParameters(obj: TraitDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: TraitDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema TraitDefinitionSpecSchematicTerraformProviderRef
 */
export interface TraitDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema TraitDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema TraitDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicTerraformProviderRef(obj: TraitDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema TraitDefinitionSpecSchematicTerraformType
 */
export enum TraitDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: TraitDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema TraitDefinitionSpecSchematicKubeParametersType
 */
export enum TraitDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema TraitDefinitionV1Beta1
 */
export class TraitDefinitionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TraitDefinitionV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'TraitDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "TraitDefinitionV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TraitDefinitionV1Beta1Props = {}): any {
    return {
      ...TraitDefinitionV1Beta1.GVK,
      ...toJson_TraitDefinitionV1Beta1Props(props),
    };
  }

  /**
   * Defines a "TraitDefinitionV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TraitDefinitionV1Beta1Props = {}) {
    super(scope, id, {
      ...TraitDefinitionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TraitDefinitionV1Beta1.GVK,
      ...toJson_TraitDefinitionV1Beta1Props(resolved),
    };
  }
}

/**
 * A TraitDefinition registers a kind of Kubernetes custom resource as a valid OAM trait kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the trait when it is embedded in an OAM ApplicationConfiguration.
 *
 * @schema TraitDefinitionV1Beta1
 */
export interface TraitDefinitionV1Beta1Props {
  /**
   * @schema TraitDefinitionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
   *
   * @schema TraitDefinitionV1Beta1#spec
   */
  readonly spec?: TraitDefinitionV1Beta1Spec;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1Props(obj: TraitDefinitionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TraitDefinitionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A TraitDefinitionSpec defines the desired state of a TraitDefinition.
 *
 * @schema TraitDefinitionV1Beta1Spec
 */
export interface TraitDefinitionV1Beta1Spec {
  /**
   * AppliesToWorkloads specifies the list of workload kinds this trait applies to. Workload kinds are specified in resource.group/version format, e.g. server.core.oam.dev/v1alpha2. Traits that omit this field apply to all workload kinds.
   *
   * @schema TraitDefinitionV1Beta1Spec#appliesToWorkloads
   */
  readonly appliesToWorkloads?: string[];

  /**
   * ConflictsWith specifies the list of traits(CRD name, Definition name, CRD group) which could not apply to the same workloads with this trait. Traits that omit this field can work with any other traits. Example rules: "service" # Trait definition name "services.k8s.io" # API resource/crd name "*.networking.k8s.io" # API group "labelSelector:foo=bar" # label selector labelSelector format: https://pkg.go.dev/k8s.io/apimachinery/pkg/labels#Parse
   *
   * @schema TraitDefinitionV1Beta1Spec#conflictsWith
   */
  readonly conflictsWith?: string[];

  /**
   * ControlPlaneOnly defines which cluster is dispatched to
   *
   * @schema TraitDefinitionV1Beta1Spec#controlPlaneOnly
   */
  readonly controlPlaneOnly?: boolean;

  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema TraitDefinitionV1Beta1Spec#definitionRef
   */
  readonly definitionRef?: TraitDefinitionV1Beta1SpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema TraitDefinitionV1Beta1Spec#extension
   */
  readonly extension?: any;

  /**
   * ManageWorkload defines the trait would be responsible for creating the workload
   *
   * @schema TraitDefinitionV1Beta1Spec#manageWorkload
   */
  readonly manageWorkload?: boolean;

  /**
   * PodDisruptive specifies whether using the trait will cause the pod to restart or not.
   *
   * @schema TraitDefinitionV1Beta1Spec#podDisruptive
   */
  readonly podDisruptive?: boolean;

  /**
   * Revision indicates whether a trait is aware of component revision
   *
   * @schema TraitDefinitionV1Beta1Spec#revisionEnabled
   */
  readonly revisionEnabled?: boolean;

  /**
   * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
   *
   * @schema TraitDefinitionV1Beta1Spec#schematic
   */
  readonly schematic?: TraitDefinitionV1Beta1SpecSchematic;

  /**
   * Stage defines the stage information to which this trait resource processing belongs. Currently, PreDispatch and PostDispatch are provided, which are used to control resource pre-process and post-process respectively.
   *
   * @schema TraitDefinitionV1Beta1Spec#stage
   */
  readonly stage?: string;

  /**
   * Status defines the custom health policy and status message for trait
   *
   * @schema TraitDefinitionV1Beta1Spec#status
   */
  readonly status?: TraitDefinitionV1Beta1SpecStatus;

  /**
   * WorkloadRefPath indicates where/if a trait accepts a workloadRef object
   *
   * @schema TraitDefinitionV1Beta1Spec#workloadRefPath
   */
  readonly workloadRefPath?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1Spec(obj: TraitDefinitionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'appliesToWorkloads': obj.appliesToWorkloads?.map(y => y),
    'conflictsWith': obj.conflictsWith?.map(y => y),
    'controlPlaneOnly': obj.controlPlaneOnly,
    'definitionRef': toJson_TraitDefinitionV1Beta1SpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'manageWorkload': obj.manageWorkload,
    'podDisruptive': obj.podDisruptive,
    'revisionEnabled': obj.revisionEnabled,
    'schematic': toJson_TraitDefinitionV1Beta1SpecSchematic(obj.schematic),
    'stage': obj.stage,
    'status': toJson_TraitDefinitionV1Beta1SpecStatus(obj.status),
    'workloadRefPath': obj.workloadRefPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema TraitDefinitionV1Beta1SpecDefinitionRef
 */
export interface TraitDefinitionV1Beta1SpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema TraitDefinitionV1Beta1SpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema TraitDefinitionV1Beta1SpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecDefinitionRef(obj: TraitDefinitionV1Beta1SpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the trait. Only CUE and Kube schematic are supported for now.
 *
 * @schema TraitDefinitionV1Beta1SpecSchematic
 */
export interface TraitDefinitionV1Beta1SpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema TraitDefinitionV1Beta1SpecSchematic#cue
   */
  readonly cue?: TraitDefinitionV1Beta1SpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema TraitDefinitionV1Beta1SpecSchematic#helm
   */
  readonly helm?: TraitDefinitionV1Beta1SpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema TraitDefinitionV1Beta1SpecSchematic#kube
   */
  readonly kube?: TraitDefinitionV1Beta1SpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema TraitDefinitionV1Beta1SpecSchematic#terraform
   */
  readonly terraform?: TraitDefinitionV1Beta1SpecSchematicTerraform;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematic(obj: TraitDefinitionV1Beta1SpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_TraitDefinitionV1Beta1SpecSchematicCue(obj.cue),
    'helm': toJson_TraitDefinitionV1Beta1SpecSchematicHelm(obj.helm),
    'kube': toJson_TraitDefinitionV1Beta1SpecSchematicKube(obj.kube),
    'terraform': toJson_TraitDefinitionV1Beta1SpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for trait
 *
 * @schema TraitDefinitionV1Beta1SpecStatus
 */
export interface TraitDefinitionV1Beta1SpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema TraitDefinitionV1Beta1SpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema TraitDefinitionV1Beta1SpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecStatus(obj: TraitDefinitionV1Beta1SpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicCue
 */
export interface TraitDefinitionV1Beta1SpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicCue(obj: TraitDefinitionV1Beta1SpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicHelm
 */
export interface TraitDefinitionV1Beta1SpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicHelm(obj: TraitDefinitionV1Beta1SpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicKube
 */
export interface TraitDefinitionV1Beta1SpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKube#parameters
   */
  readonly parameters?: TraitDefinitionV1Beta1SpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicKube(obj: TraitDefinitionV1Beta1SpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_TraitDefinitionV1Beta1SpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicTerraform
 */
export interface TraitDefinitionV1Beta1SpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#providerRef
   */
  readonly providerRef?: TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#type
   */
  readonly type?: TraitDefinitionV1Beta1SpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicTerraform(obj: TraitDefinitionV1Beta1SpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters
 */
export interface TraitDefinitionV1Beta1SpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicKubeParameters#type
   */
  readonly type: TraitDefinitionV1Beta1SpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicKubeParameters(obj: TraitDefinitionV1Beta1SpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference
 */
export interface TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj: TraitDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef
 */
export interface TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj: TraitDefinitionV1Beta1SpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicTerraformType
 */
export enum TraitDefinitionV1Beta1SpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj: TraitDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema TraitDefinitionV1Beta1SpecSchematicKubeParametersType
 */
export enum TraitDefinitionV1Beta1SpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * Workflow is the Schema for the workflow API
 *
 * @schema Workflow
 */
export class Workflow extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Workflow"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha1',
    kind: 'Workflow',
  }

  /**
   * Renders a Kubernetes manifest for "Workflow".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkflowProps = {}): any {
    return {
      ...Workflow.GVK,
      ...toJson_WorkflowProps(props),
    };
  }

  /**
   * Defines a "Workflow" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkflowProps = {}) {
    super(scope, id, {
      ...Workflow.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Workflow.GVK,
      ...toJson_WorkflowProps(resolved),
    };
  }
}

/**
 * Workflow is the Schema for the workflow API
 *
 * @schema Workflow
 */
export interface WorkflowProps {
  /**
   * @schema Workflow#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * WorkflowExecuteMode defines the mode of workflow execution
   *
   * @schema Workflow#mode
   */
  readonly mode?: WorkflowMode;

  /**
   * @schema Workflow#steps
   */
  readonly steps?: WorkflowSteps[];

}

/**
 * Converts an object of type 'WorkflowProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowProps(obj: WorkflowProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'mode': toJson_WorkflowMode(obj.mode),
    'steps': obj.steps?.map(y => toJson_WorkflowSteps(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowExecuteMode defines the mode of workflow execution
 *
 * @schema WorkflowMode
 */
export interface WorkflowMode {
  /**
   * Steps is the mode of workflow steps execution
   *
   * @schema WorkflowMode#steps
   */
  readonly steps?: string;

  /**
   * SubSteps is the mode of workflow sub steps execution
   *
   * @schema WorkflowMode#subSteps
   */
  readonly subSteps?: string;

}

/**
 * Converts an object of type 'WorkflowMode' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowMode(obj: WorkflowMode | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'steps': obj.steps,
    'subSteps': obj.subSteps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStep defines how to execute a workflow step.
 *
 * @schema WorkflowSteps
 */
export interface WorkflowSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema WorkflowSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema WorkflowSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema WorkflowSteps#inputs
   */
  readonly inputs?: WorkflowStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema WorkflowSteps#meta
   */
  readonly meta?: WorkflowStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema WorkflowSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema WorkflowSteps#outputs
   */
  readonly outputs?: WorkflowStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema WorkflowSteps#properties
   */
  readonly properties?: any;

  /**
   * @schema WorkflowSteps#subSteps
   */
  readonly subSteps?: WorkflowStepsSubSteps[];

  /**
   * Timeout is the timeout of the step
   *
   * @schema WorkflowSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema WorkflowSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'WorkflowSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowSteps(obj: WorkflowSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_WorkflowStepsInputs(y)),
    'meta': toJson_WorkflowStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_WorkflowStepsOutputs(y)),
    'properties': obj.properties,
    'subSteps': obj.subSteps?.map(y => toJson_WorkflowStepsSubSteps(y)),
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkflowStepsInputs
 */
export interface WorkflowStepsInputs {
  /**
   * @schema WorkflowStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema WorkflowStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'WorkflowStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsInputs(obj: WorkflowStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema WorkflowStepsMeta
 */
export interface WorkflowStepsMeta {
  /**
   * @schema WorkflowStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'WorkflowStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsMeta(obj: WorkflowStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkflowStepsOutputs
 */
export interface WorkflowStepsOutputs {
  /**
   * @schema WorkflowStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema WorkflowStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'WorkflowStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsOutputs(obj: WorkflowStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepBase defines the workflow step base
 *
 * @schema WorkflowStepsSubSteps
 */
export interface WorkflowStepsSubSteps {
  /**
   * DependsOn is the dependency of the step
   *
   * @schema WorkflowStepsSubSteps#dependsOn
   */
  readonly dependsOn?: string[];

  /**
   * If is the if condition of the step
   *
   * @schema WorkflowStepsSubSteps#if
   */
  readonly if?: string;

  /**
   * Inputs is the inputs of the step
   *
   * @schema WorkflowStepsSubSteps#inputs
   */
  readonly inputs?: WorkflowStepsSubStepsInputs[];

  /**
   * Meta is the meta data of the workflow step.
   *
   * @schema WorkflowStepsSubSteps#meta
   */
  readonly meta?: WorkflowStepsSubStepsMeta;

  /**
   * Name is the unique name of the workflow step.
   *
   * @schema WorkflowStepsSubSteps#name
   */
  readonly name: string;

  /**
   * Outputs is the outputs of the step
   *
   * @schema WorkflowStepsSubSteps#outputs
   */
  readonly outputs?: WorkflowStepsSubStepsOutputs[];

  /**
   * Properties is the properties of the step
   *
   * @schema WorkflowStepsSubSteps#properties
   */
  readonly properties?: any;

  /**
   * Timeout is the timeout of the step
   *
   * @schema WorkflowStepsSubSteps#timeout
   */
  readonly timeout?: string;

  /**
   * Type is the type of the workflow step.
   *
   * @schema WorkflowStepsSubSteps#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'WorkflowStepsSubSteps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsSubSteps(obj: WorkflowStepsSubSteps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dependsOn': obj.dependsOn?.map(y => y),
    'if': obj.if,
    'inputs': obj.inputs?.map(y => toJson_WorkflowStepsSubStepsInputs(y)),
    'meta': toJson_WorkflowStepsSubStepsMeta(obj.meta),
    'name': obj.name,
    'outputs': obj.outputs?.map(y => toJson_WorkflowStepsSubStepsOutputs(y)),
    'properties': obj.properties,
    'timeout': obj.timeout,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkflowStepsSubStepsInputs
 */
export interface WorkflowStepsSubStepsInputs {
  /**
   * @schema WorkflowStepsSubStepsInputs#from
   */
  readonly from: string;

  /**
   * @schema WorkflowStepsSubStepsInputs#parameterKey
   */
  readonly parameterKey: string;

}

/**
 * Converts an object of type 'WorkflowStepsSubStepsInputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsSubStepsInputs(obj: WorkflowStepsSubStepsInputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'parameterKey': obj.parameterKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Meta is the meta data of the workflow step.
 *
 * @schema WorkflowStepsSubStepsMeta
 */
export interface WorkflowStepsSubStepsMeta {
  /**
   * @schema WorkflowStepsSubStepsMeta#alias
   */
  readonly alias?: string;

}

/**
 * Converts an object of type 'WorkflowStepsSubStepsMeta' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsSubStepsMeta(obj: WorkflowStepsSubStepsMeta | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'alias': obj.alias,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkflowStepsSubStepsOutputs
 */
export interface WorkflowStepsSubStepsOutputs {
  /**
   * @schema WorkflowStepsSubStepsOutputs#name
   */
  readonly name: string;

  /**
   * @schema WorkflowStepsSubStepsOutputs#valueFrom
   */
  readonly valueFrom: string;

}

/**
 * Converts an object of type 'WorkflowStepsSubStepsOutputs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepsSubStepsOutputs(obj: WorkflowStepsSubStepsOutputs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'valueFrom': obj.valueFrom,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * WorkflowStepDefinition is the Schema for the workflowstepdefinitions API
 *
 * @schema WorkflowStepDefinition
 */
export class WorkflowStepDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkflowStepDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'WorkflowStepDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "WorkflowStepDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkflowStepDefinitionProps = {}): any {
    return {
      ...WorkflowStepDefinition.GVK,
      ...toJson_WorkflowStepDefinitionProps(props),
    };
  }

  /**
   * Defines a "WorkflowStepDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkflowStepDefinitionProps = {}) {
    super(scope, id, {
      ...WorkflowStepDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkflowStepDefinition.GVK,
      ...toJson_WorkflowStepDefinitionProps(resolved),
    };
  }
}

/**
 * WorkflowStepDefinition is the Schema for the workflowstepdefinitions API
 *
 * @schema WorkflowStepDefinition
 */
export interface WorkflowStepDefinitionProps {
  /**
   * @schema WorkflowStepDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
   *
   * @schema WorkflowStepDefinition#spec
   */
  readonly spec?: WorkflowStepDefinitionSpec;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionProps(obj: WorkflowStepDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkflowStepDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WorkflowStepDefinitionSpec defines the desired state of WorkflowStepDefinition
 *
 * @schema WorkflowStepDefinitionSpec
 */
export interface WorkflowStepDefinitionSpec {
  /**
   * Reference to the CustomResourceDefinition that defines this trait kind.
   *
   * @schema WorkflowStepDefinitionSpec#definitionRef
   */
  readonly definitionRef?: WorkflowStepDefinitionSpecDefinitionRef;

  /**
   * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
   *
   * @schema WorkflowStepDefinitionSpec#schematic
   */
  readonly schematic?: WorkflowStepDefinitionSpecSchematic;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpec(obj: WorkflowStepDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'definitionRef': toJson_WorkflowStepDefinitionSpecDefinitionRef(obj.definitionRef),
    'schematic': toJson_WorkflowStepDefinitionSpecSchematic(obj.schematic),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this trait kind.
 *
 * @schema WorkflowStepDefinitionSpecDefinitionRef
 */
export interface WorkflowStepDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema WorkflowStepDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema WorkflowStepDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecDefinitionRef(obj: WorkflowStepDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workflow step definition. Only CUE schematic is supported for now.
 *
 * @schema WorkflowStepDefinitionSpecSchematic
 */
export interface WorkflowStepDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema WorkflowStepDefinitionSpecSchematic#cue
   */
  readonly cue?: WorkflowStepDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema WorkflowStepDefinitionSpecSchematic#helm
   */
  readonly helm?: WorkflowStepDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema WorkflowStepDefinitionSpecSchematic#kube
   */
  readonly kube?: WorkflowStepDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema WorkflowStepDefinitionSpecSchematic#terraform
   */
  readonly terraform?: WorkflowStepDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematic(obj: WorkflowStepDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_WorkflowStepDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_WorkflowStepDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_WorkflowStepDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_WorkflowStepDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema WorkflowStepDefinitionSpecSchematicCue
 */
export interface WorkflowStepDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema WorkflowStepDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicCue(obj: WorkflowStepDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema WorkflowStepDefinitionSpecSchematicHelm
 */
export interface WorkflowStepDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema WorkflowStepDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema WorkflowStepDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicHelm(obj: WorkflowStepDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema WorkflowStepDefinitionSpecSchematicKube
 */
export interface WorkflowStepDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema WorkflowStepDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: WorkflowStepDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema WorkflowStepDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicKube(obj: WorkflowStepDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_WorkflowStepDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema WorkflowStepDefinitionSpecSchematicTerraform
 */
export interface WorkflowStepDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: WorkflowStepDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#type
   */
  readonly type?: WorkflowStepDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicTerraform(obj: WorkflowStepDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_WorkflowStepDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema WorkflowStepDefinitionSpecSchematicKubeParameters
 */
export interface WorkflowStepDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema WorkflowStepDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema WorkflowStepDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema WorkflowStepDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema WorkflowStepDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema WorkflowStepDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: WorkflowStepDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicKubeParameters(obj: WorkflowStepDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: WorkflowStepDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema WorkflowStepDefinitionSpecSchematicTerraformProviderRef
 */
export interface WorkflowStepDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicTerraformProviderRef(obj: WorkflowStepDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema WorkflowStepDefinitionSpecSchematicTerraformType
 */
export enum WorkflowStepDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: WorkflowStepDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema WorkflowStepDefinitionSpecSchematicKubeParametersType
 */
export enum WorkflowStepDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema WorkloadDefinition
 */
export class WorkloadDefinition extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadDefinition"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1alpha2',
    kind: 'WorkloadDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadDefinition".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadDefinitionProps = {}): any {
    return {
      ...WorkloadDefinition.GVK,
      ...toJson_WorkloadDefinitionProps(props),
    };
  }

  /**
   * Defines a "WorkloadDefinition" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadDefinitionProps = {}) {
    super(scope, id, {
      ...WorkloadDefinition.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadDefinition.GVK,
      ...toJson_WorkloadDefinitionProps(resolved),
    };
  }
}

/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema WorkloadDefinition
 */
export interface WorkloadDefinitionProps {
  /**
   * @schema WorkloadDefinition#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
   *
   * @schema WorkloadDefinition#spec
   */
  readonly spec?: WorkloadDefinitionSpec;

}

/**
 * Converts an object of type 'WorkloadDefinitionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionProps(obj: WorkloadDefinitionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadDefinitionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
 *
 * @schema WorkloadDefinitionSpec
 */
export interface WorkloadDefinitionSpec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema WorkloadDefinitionSpec#childResourceKinds
   */
  readonly childResourceKinds?: WorkloadDefinitionSpecChildResourceKinds[];

  /**
   * Reference to the CustomResourceDefinition that defines this workload kind.
   *
   * @schema WorkloadDefinitionSpec#definitionRef
   */
  readonly definitionRef: WorkloadDefinitionSpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema WorkloadDefinitionSpec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema WorkloadDefinitionSpec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema WorkloadDefinitionSpec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema WorkloadDefinitionSpec#schematic
   */
  readonly schematic?: WorkloadDefinitionSpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema WorkloadDefinitionSpec#status
   */
  readonly status?: WorkloadDefinitionSpecStatus;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpec(obj: WorkloadDefinitionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_WorkloadDefinitionSpecChildResourceKinds(y)),
    'definitionRef': toJson_WorkloadDefinitionSpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_WorkloadDefinitionSpecSchematic(obj.schematic),
    'status': toJson_WorkloadDefinitionSpecStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema WorkloadDefinitionSpecChildResourceKinds
 */
export interface WorkloadDefinitionSpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema WorkloadDefinitionSpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema WorkloadDefinitionSpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema WorkloadDefinitionSpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecChildResourceKinds(obj: WorkloadDefinitionSpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this workload kind.
 *
 * @schema WorkloadDefinitionSpecDefinitionRef
 */
export interface WorkloadDefinitionSpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema WorkloadDefinitionSpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema WorkloadDefinitionSpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecDefinitionRef(obj: WorkloadDefinitionSpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema WorkloadDefinitionSpecSchematic
 */
export interface WorkloadDefinitionSpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema WorkloadDefinitionSpecSchematic#cue
   */
  readonly cue?: WorkloadDefinitionSpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema WorkloadDefinitionSpecSchematic#helm
   */
  readonly helm?: WorkloadDefinitionSpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema WorkloadDefinitionSpecSchematic#kube
   */
  readonly kube?: WorkloadDefinitionSpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema WorkloadDefinitionSpecSchematic#terraform
   */
  readonly terraform?: WorkloadDefinitionSpecSchematicTerraform;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematic(obj: WorkloadDefinitionSpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_WorkloadDefinitionSpecSchematicCue(obj.cue),
    'helm': toJson_WorkloadDefinitionSpecSchematicHelm(obj.helm),
    'kube': toJson_WorkloadDefinitionSpecSchematicKube(obj.kube),
    'terraform': toJson_WorkloadDefinitionSpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema WorkloadDefinitionSpecStatus
 */
export interface WorkloadDefinitionSpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema WorkloadDefinitionSpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema WorkloadDefinitionSpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecStatus(obj: WorkloadDefinitionSpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema WorkloadDefinitionSpecSchematicCue
 */
export interface WorkloadDefinitionSpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema WorkloadDefinitionSpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicCue(obj: WorkloadDefinitionSpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema WorkloadDefinitionSpecSchematicHelm
 */
export interface WorkloadDefinitionSpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema WorkloadDefinitionSpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema WorkloadDefinitionSpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicHelm(obj: WorkloadDefinitionSpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema WorkloadDefinitionSpecSchematicKube
 */
export interface WorkloadDefinitionSpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema WorkloadDefinitionSpecSchematicKube#parameters
   */
  readonly parameters?: WorkloadDefinitionSpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema WorkloadDefinitionSpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicKube(obj: WorkloadDefinitionSpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_WorkloadDefinitionSpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema WorkloadDefinitionSpecSchematicTerraform
 */
export interface WorkloadDefinitionSpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#providerRef
   */
  readonly providerRef?: WorkloadDefinitionSpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#type
   */
  readonly type?: WorkloadDefinitionSpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicTerraform(obj: WorkloadDefinitionSpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_WorkloadDefinitionSpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema WorkloadDefinitionSpecSchematicKubeParameters
 */
export interface WorkloadDefinitionSpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema WorkloadDefinitionSpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema WorkloadDefinitionSpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema WorkloadDefinitionSpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema WorkloadDefinitionSpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema WorkloadDefinitionSpecSchematicKubeParameters#type
   */
  readonly type: WorkloadDefinitionSpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicKubeParameters(obj: WorkloadDefinitionSpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference
 */
export interface WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference(obj: WorkloadDefinitionSpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema WorkloadDefinitionSpecSchematicTerraformProviderRef
 */
export interface WorkloadDefinitionSpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicTerraformProviderRef(obj: WorkloadDefinitionSpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema WorkloadDefinitionSpecSchematicTerraformType
 */
export enum WorkloadDefinitionSpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef(obj: WorkloadDefinitionSpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema WorkloadDefinitionSpecSchematicKubeParametersType
 */
export enum WorkloadDefinitionSpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}


/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema WorkloadDefinitionV1Beta1
 */
export class WorkloadDefinitionV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadDefinitionV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'core.oam.dev/v1beta1',
    kind: 'WorkloadDefinition',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadDefinitionV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadDefinitionV1Beta1Props = {}): any {
    return {
      ...WorkloadDefinitionV1Beta1.GVK,
      ...toJson_WorkloadDefinitionV1Beta1Props(props),
    };
  }

  /**
   * Defines a "WorkloadDefinitionV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadDefinitionV1Beta1Props = {}) {
    super(scope, id, {
      ...WorkloadDefinitionV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadDefinitionV1Beta1.GVK,
      ...toJson_WorkloadDefinitionV1Beta1Props(resolved),
    };
  }
}

/**
 * A WorkloadDefinition registers a kind of Kubernetes custom resource as a valid OAM workload kind by referencing its CustomResourceDefinition. The CRD is used to validate the schema of the workload when it is embedded in an OAM Component.
 *
 * @schema WorkloadDefinitionV1Beta1
 */
export interface WorkloadDefinitionV1Beta1Props {
  /**
   * @schema WorkloadDefinitionV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
   *
   * @schema WorkloadDefinitionV1Beta1#spec
   */
  readonly spec?: WorkloadDefinitionV1Beta1Spec;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1Props(obj: WorkloadDefinitionV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadDefinitionV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A WorkloadDefinitionSpec defines the desired state of a WorkloadDefinition.
 *
 * @schema WorkloadDefinitionV1Beta1Spec
 */
export interface WorkloadDefinitionV1Beta1Spec {
  /**
   * ChildResourceKinds are the list of GVK of the child resources this workload generates
   *
   * @schema WorkloadDefinitionV1Beta1Spec#childResourceKinds
   */
  readonly childResourceKinds?: WorkloadDefinitionV1Beta1SpecChildResourceKinds[];

  /**
   * Reference to the CustomResourceDefinition that defines this workload kind.
   *
   * @schema WorkloadDefinitionV1Beta1Spec#definitionRef
   */
  readonly definitionRef: WorkloadDefinitionV1Beta1SpecDefinitionRef;

  /**
   * Extension is used for extension needs by OAM platform builders
   *
   * @schema WorkloadDefinitionV1Beta1Spec#extension
   */
  readonly extension?: any;

  /**
   * PodSpecPath indicates where/if this workload has K8s podSpec field if one workload has podSpec, trait can do lot's of assumption such as port, env, volume fields.
   *
   * @schema WorkloadDefinitionV1Beta1Spec#podSpecPath
   */
  readonly podSpecPath?: string;

  /**
   * RevisionLabel indicates which label for underlying resources(e.g. pods) of this workload can be used by trait to create resource selectors(e.g. label selector for pods).
   *
   * @schema WorkloadDefinitionV1Beta1Spec#revisionLabel
   */
  readonly revisionLabel?: string;

  /**
   * Schematic defines the data format and template of the encapsulation of the workload
   *
   * @schema WorkloadDefinitionV1Beta1Spec#schematic
   */
  readonly schematic?: WorkloadDefinitionV1Beta1SpecSchematic;

  /**
   * Status defines the custom health policy and status message for workload
   *
   * @schema WorkloadDefinitionV1Beta1Spec#status
   */
  readonly status?: WorkloadDefinitionV1Beta1SpecStatus;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1Spec(obj: WorkloadDefinitionV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'childResourceKinds': obj.childResourceKinds?.map(y => toJson_WorkloadDefinitionV1Beta1SpecChildResourceKinds(y)),
    'definitionRef': toJson_WorkloadDefinitionV1Beta1SpecDefinitionRef(obj.definitionRef),
    'extension': obj.extension,
    'podSpecPath': obj.podSpecPath,
    'revisionLabel': obj.revisionLabel,
    'schematic': toJson_WorkloadDefinitionV1Beta1SpecSchematic(obj.schematic),
    'status': toJson_WorkloadDefinitionV1Beta1SpecStatus(obj.status),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ChildResourceKind defines a child Kubernetes resource kind with a selector
 *
 * @schema WorkloadDefinitionV1Beta1SpecChildResourceKinds
 */
export interface WorkloadDefinitionV1Beta1SpecChildResourceKinds {
  /**
   * APIVersion of the child resource
   *
   * @schema WorkloadDefinitionV1Beta1SpecChildResourceKinds#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the child resource
   *
   * @schema WorkloadDefinitionV1Beta1SpecChildResourceKinds#kind
   */
  readonly kind: string;

  /**
   * Selector to select the child resources that the workload wants to expose to traits
   *
   * @schema WorkloadDefinitionV1Beta1SpecChildResourceKinds#selector
   */
  readonly selector?: { [key: string]: string };

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecChildResourceKinds' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecChildResourceKinds(obj: WorkloadDefinitionV1Beta1SpecChildResourceKinds | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to the CustomResourceDefinition that defines this workload kind.
 *
 * @schema WorkloadDefinitionV1Beta1SpecDefinitionRef
 */
export interface WorkloadDefinitionV1Beta1SpecDefinitionRef {
  /**
   * Name of the referenced CustomResourceDefinition.
   *
   * @schema WorkloadDefinitionV1Beta1SpecDefinitionRef#name
   */
  readonly name: string;

  /**
   * Version indicate which version should be used if CRD has multiple versions by default it will use the first one if not specified
   *
   * @schema WorkloadDefinitionV1Beta1SpecDefinitionRef#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecDefinitionRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecDefinitionRef(obj: WorkloadDefinitionV1Beta1SpecDefinitionRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Schematic defines the data format and template of the encapsulation of the workload
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematic
 */
export interface WorkloadDefinitionV1Beta1SpecSchematic {
  /**
   * CUE defines the encapsulation in CUE format
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematic#cue
   */
  readonly cue?: WorkloadDefinitionV1Beta1SpecSchematicCue;

  /**
   * A Helm represents resources used by a Helm module
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematic#helm
   */
  readonly helm?: WorkloadDefinitionV1Beta1SpecSchematicHelm;

  /**
   * Kube defines the encapsulation in raw Kubernetes resource format
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematic#kube
   */
  readonly kube?: WorkloadDefinitionV1Beta1SpecSchematicKube;

  /**
   * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematic#terraform
   */
  readonly terraform?: WorkloadDefinitionV1Beta1SpecSchematicTerraform;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematic(obj: WorkloadDefinitionV1Beta1SpecSchematic | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cue': toJson_WorkloadDefinitionV1Beta1SpecSchematicCue(obj.cue),
    'helm': toJson_WorkloadDefinitionV1Beta1SpecSchematicHelm(obj.helm),
    'kube': toJson_WorkloadDefinitionV1Beta1SpecSchematicKube(obj.kube),
    'terraform': toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraform(obj.terraform),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Status defines the custom health policy and status message for workload
 *
 * @schema WorkloadDefinitionV1Beta1SpecStatus
 */
export interface WorkloadDefinitionV1Beta1SpecStatus {
  /**
   * CustomStatus defines the custom status message that could display to user
   *
   * @schema WorkloadDefinitionV1Beta1SpecStatus#customStatus
   */
  readonly customStatus?: string;

  /**
   * HealthPolicy defines the health check policy for the abstraction
   *
   * @schema WorkloadDefinitionV1Beta1SpecStatus#healthPolicy
   */
  readonly healthPolicy?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecStatus' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecStatus(obj: WorkloadDefinitionV1Beta1SpecStatus | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'customStatus': obj.customStatus,
    'healthPolicy': obj.healthPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CUE defines the encapsulation in CUE format
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicCue
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicCue {
  /**
   * Template defines the abstraction template data of the capability, it will replace the old CUE template in extension field. Template is a required field if CUE is defined in Capability Definition.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicCue#template
   */
  readonly template: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicCue' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicCue(obj: WorkloadDefinitionV1Beta1SpecSchematicCue | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Helm represents resources used by a Helm module
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicHelm
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicHelm {
  /**
   * Release records a Helm release used by a Helm module workload.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicHelm#release
   */
  readonly release: any;

  /**
   * HelmRelease records a Helm repository used by a Helm module workload.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicHelm#repository
   */
  readonly repository: any;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicHelm(obj: WorkloadDefinitionV1Beta1SpecSchematicHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'release': obj.release,
    'repository': obj.repository,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kube defines the encapsulation in raw Kubernetes resource format
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicKube
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicKube {
  /**
   * Parameters defines configurable parameters
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKube#parameters
   */
  readonly parameters?: WorkloadDefinitionV1Beta1SpecSchematicKubeParameters[];

  /**
   * Template defines the raw Kubernetes resource
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKube#template
   */
  readonly template: any;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicKube' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicKube(obj: WorkloadDefinitionV1Beta1SpecSchematicKube | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': obj.parameters?.map(y => toJson_WorkloadDefinitionV1Beta1SpecSchematicKubeParameters(y)),
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Terraform is the struct to describe cloud resources managed by Hashicorp Terraform
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicTerraform {
  /**
   * Configuration is Terraform Configuration
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#configuration
   */
  readonly configuration: string;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#gitCredentialsSecretReference
   */
  readonly gitCredentialsSecretReference?: WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference;

  /**
   * Path is the sub-directory of remote git repository. It's valid when remote is set
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#providerRef
   */
  readonly providerRef?: WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef;

  /**
   * Type specifies which Terraform configuration it is, HCL or JSON syntax
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#type
   */
  readonly type?: WorkloadDefinitionV1Beta1SpecSchematicTerraformType;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraform#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicTerraform' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraform(obj: WorkloadDefinitionV1Beta1SpecSchematicTerraform | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': obj.configuration,
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'gitCredentialsSecretReference': toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj.gitCredentialsSecretReference),
    'path': obj.path,
    'providerRef': toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj.providerRef),
    'type': obj.type,
    'writeConnectionSecretToRef': toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A KubeParameter defines a configurable parameter of a component.
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicKubeParameters {
  /**
   * Description of this parameter.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters#description
   */
  readonly description?: string;

  /**
   * FieldPaths specifies an array of fields within this workload that will be overwritten by the value of this parameter. 	All fields must be of the same type. Fields are specified as JSON field paths without a leading dot, for example 'spec.replicas'.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters#fieldPaths
   */
  readonly fieldPaths: string[];

  /**
   * Name of this parameter
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters#name
   */
  readonly name: string;

  /**
   * Required specifies whether or not a value for this parameter must be supplied when authoring an Application.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters#required
   */
  readonly required?: boolean;

  /**
   * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParameters#type
   */
  readonly type: WorkloadDefinitionV1Beta1SpecSchematicKubeParametersType;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicKubeParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicKubeParameters(obj: WorkloadDefinitionV1Beta1SpecSchematicKubeParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'fieldPaths': obj.fieldPaths?.map(y => y),
    'name': obj.name,
    'required': obj.required,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitCredentialsSecretReference specifies the reference to the secret containing the git credentials
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference {
  /**
   * name is unique within a namespace to reference a secret resource.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#name
   */
  readonly name?: string;

  /**
   * namespace defines the space within which the secret name must be unique.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference(obj: WorkloadDefinitionV1Beta1SpecSchematicTerraformGitCredentialsSecretReference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef(obj: WorkloadDefinitionV1Beta1SpecSchematicTerraformProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Type specifies which Terraform configuration it is, HCL or JSON syntax
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformType
 */
export enum WorkloadDefinitionV1Beta1SpecSchematicTerraformType {
  /** hcl */
  HCL = "hcl",
  /** json */
  JSON = "json",
  /** remote */
  REMOTE = "remote",
}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef
 */
export interface WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef(obj: WorkloadDefinitionV1Beta1SpecSchematicTerraformWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValueType indicates the type of the parameter value, and only supports basic data types: string, number, boolean.
 *
 * @schema WorkloadDefinitionV1Beta1SpecSchematicKubeParametersType
 */
export enum WorkloadDefinitionV1Beta1SpecSchematicKubeParametersType {
  /** string */
  STRING = "string",
  /** number */
  NUMBER = "number",
  /** boolean */
  BOOLEAN = "boolean",
}

