// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * EnvironmentEC2 is the Schema for the EnvironmentEC2s API. Provides a Cloud9 EC2 Development Environment.
 *
 * @schema EnvironmentEC2
 */
export class EnvironmentEc2 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EnvironmentEC2"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloud9.aws.upbound.io/v1beta1',
    kind: 'EnvironmentEC2',
  }

  /**
   * Renders a Kubernetes manifest for "EnvironmentEC2".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EnvironmentEc2Props): any {
    return {
      ...EnvironmentEc2.GVK,
      ...toJson_EnvironmentEc2Props(props),
    };
  }

  /**
   * Defines a "EnvironmentEC2" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EnvironmentEc2Props) {
    super(scope, id, {
      ...EnvironmentEc2.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EnvironmentEc2.GVK,
      ...toJson_EnvironmentEc2Props(resolved),
    };
  }
}

/**
 * EnvironmentEC2 is the Schema for the EnvironmentEC2s API. Provides a Cloud9 EC2 Development Environment.
 *
 * @schema EnvironmentEC2
 */
export interface EnvironmentEc2Props {
  /**
   * @schema EnvironmentEC2#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * EnvironmentEC2Spec defines the desired state of EnvironmentEC2
   *
   * @schema EnvironmentEC2#spec
   */
  readonly spec: EnvironmentEc2Spec;

}

/**
 * Converts an object of type 'EnvironmentEc2Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2Props(obj: EnvironmentEc2Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EnvironmentEc2Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvironmentEC2Spec defines the desired state of EnvironmentEC2
 *
 * @schema EnvironmentEc2Spec
 */
export interface EnvironmentEc2Spec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema EnvironmentEc2Spec#deletionPolicy
   */
  readonly deletionPolicy?: EnvironmentEc2SpecDeletionPolicy;

  /**
   * @schema EnvironmentEc2Spec#forProvider
   */
  readonly forProvider: EnvironmentEc2SpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema EnvironmentEc2Spec#providerConfigRef
   */
  readonly providerConfigRef?: EnvironmentEc2SpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema EnvironmentEc2Spec#providerRef
   */
  readonly providerRef?: EnvironmentEc2SpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema EnvironmentEc2Spec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: EnvironmentEc2SpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema EnvironmentEc2Spec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: EnvironmentEc2SpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'EnvironmentEc2Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2Spec(obj: EnvironmentEc2Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_EnvironmentEc2SpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_EnvironmentEc2SpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_EnvironmentEc2SpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_EnvironmentEc2SpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_EnvironmentEc2SpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema EnvironmentEc2SpecDeletionPolicy
 */
export enum EnvironmentEc2SpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema EnvironmentEc2SpecForProvider
 */
export interface EnvironmentEc2SpecForProvider {
  /**
   * The number of minutes until the running instance is shut down after the environment has last been used.
   *
   * @schema EnvironmentEc2SpecForProvider#automaticStopTimeMinutes
   */
  readonly automaticStopTimeMinutes?: number;

  /**
   * The connection type used for connecting to an Amazon EC2 environment. Valid values are CONNECT_SSH and CONNECT_SSM. For more information please refer AWS documentation for Cloud9.
   *
   * @schema EnvironmentEc2SpecForProvider#connectionType
   */
  readonly connectionType?: string;

  /**
   * The description of the environment.
   *
   * @schema EnvironmentEc2SpecForProvider#description
   */
  readonly description?: string;

  /**
   * The identifier for the Amazon Machine Image (AMI) that's used to create the EC2 instance. Valid values are
   *
   * @schema EnvironmentEc2SpecForProvider#imageId
   */
  readonly imageId?: string;

  /**
   * The type of instance to connect to the environment, e.g., t2.micro.
   *
   * @schema EnvironmentEc2SpecForProvider#instanceType
   */
  readonly instanceType: string;

  /**
   * The name of the environment.
   *
   * @schema EnvironmentEc2SpecForProvider#name
   */
  readonly name: string;

  /**
   * The ARN of the environment owner. This can be ARN of any AWS IAM principal. Defaults to the environment's creator.
   *
   * @default the environment's creator.
   * @schema EnvironmentEc2SpecForProvider#ownerArn
   */
  readonly ownerArn?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema EnvironmentEc2SpecForProvider#region
   */
  readonly region: string;

  /**
   * The ID of the subnet in Amazon VPC that AWS Cloud9 will use to communicate with the Amazon EC2 instance.
   *
   * @schema EnvironmentEc2SpecForProvider#subnetId
   */
  readonly subnetId?: string;

  /**
   * Reference to a Subnet in ec2 to populate subnetId.
   *
   * @schema EnvironmentEc2SpecForProvider#subnetIdRef
   */
  readonly subnetIdRef?: EnvironmentEc2SpecForProviderSubnetIdRef;

  /**
   * Selector for a Subnet in ec2 to populate subnetId.
   *
   * @schema EnvironmentEc2SpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: EnvironmentEc2SpecForProviderSubnetIdSelector;

  /**
   * Key-value map of resource tags.
   *
   * @schema EnvironmentEc2SpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'EnvironmentEc2SpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecForProvider(obj: EnvironmentEc2SpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'automaticStopTimeMinutes': obj.automaticStopTimeMinutes,
    'connectionType': obj.connectionType,
    'description': obj.description,
    'imageId': obj.imageId,
    'instanceType': obj.instanceType,
    'name': obj.name,
    'ownerArn': obj.ownerArn,
    'region': obj.region,
    'subnetId': obj.subnetId,
    'subnetIdRef': toJson_EnvironmentEc2SpecForProviderSubnetIdRef(obj.subnetIdRef),
    'subnetIdSelector': toJson_EnvironmentEc2SpecForProviderSubnetIdSelector(obj.subnetIdSelector),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema EnvironmentEc2SpecProviderConfigRef
 */
export interface EnvironmentEc2SpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentEc2SpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentEc2SpecProviderConfigRef#policy
   */
  readonly policy?: EnvironmentEc2SpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecProviderConfigRef(obj: EnvironmentEc2SpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentEc2SpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema EnvironmentEc2SpecProviderRef
 */
export interface EnvironmentEc2SpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentEc2SpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentEc2SpecProviderRef#policy
   */
  readonly policy?: EnvironmentEc2SpecProviderRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecProviderRef(obj: EnvironmentEc2SpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentEc2SpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsTo
 */
export interface EnvironmentEc2SpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: EnvironmentEc2SpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: EnvironmentEc2SpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecPublishConnectionDetailsTo(obj: EnvironmentEc2SpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_EnvironmentEc2SpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_EnvironmentEc2SpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema EnvironmentEc2SpecWriteConnectionSecretToRef
 */
export interface EnvironmentEc2SpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema EnvironmentEc2SpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema EnvironmentEc2SpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecWriteConnectionSecretToRef(obj: EnvironmentEc2SpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Subnet in ec2 to populate subnetId.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdRef
 */
export interface EnvironmentEc2SpecForProviderSubnetIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdRef#policy
   */
  readonly policy?: EnvironmentEc2SpecForProviderSubnetIdRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecForProviderSubnetIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecForProviderSubnetIdRef(obj: EnvironmentEc2SpecForProviderSubnetIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentEc2SpecForProviderSubnetIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Subnet in ec2 to populate subnetId.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdSelector
 */
export interface EnvironmentEc2SpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdSelector#policy
   */
  readonly policy?: EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecForProviderSubnetIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecForProviderSubnetIdSelector(obj: EnvironmentEc2SpecForProviderSubnetIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentEc2SpecProviderConfigRefPolicy
 */
export interface EnvironmentEc2SpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentEc2SpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: EnvironmentEc2SpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentEc2SpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: EnvironmentEc2SpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecProviderConfigRefPolicy(obj: EnvironmentEc2SpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentEc2SpecProviderRefPolicy
 */
export interface EnvironmentEc2SpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentEc2SpecProviderRefPolicy#resolution
   */
  readonly resolution?: EnvironmentEc2SpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentEc2SpecProviderRefPolicy#resolve
   */
  readonly resolve?: EnvironmentEc2SpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecProviderRefPolicy(obj: EnvironmentEc2SpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRef
 */
export interface EnvironmentEc2SpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecPublishConnectionDetailsToConfigRef(obj: EnvironmentEc2SpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsToMetadata
 */
export interface EnvironmentEc2SpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecPublishConnectionDetailsToMetadata(obj: EnvironmentEc2SpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdRefPolicy
 */
export interface EnvironmentEc2SpecForProviderSubnetIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdRefPolicy#resolution
   */
  readonly resolution?: EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdRefPolicy#resolve
   */
  readonly resolve?: EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecForProviderSubnetIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecForProviderSubnetIdRefPolicy(obj: EnvironmentEc2SpecForProviderSubnetIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy
 */
export interface EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy#resolution
   */
  readonly resolution?: EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy#resolve
   */
  readonly resolve?: EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy(obj: EnvironmentEc2SpecForProviderSubnetIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentEc2SpecProviderConfigRefPolicyResolution
 */
export enum EnvironmentEc2SpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentEc2SpecProviderConfigRefPolicyResolve
 */
export enum EnvironmentEc2SpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentEc2SpecProviderRefPolicyResolution
 */
export enum EnvironmentEc2SpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentEc2SpecProviderRefPolicyResolve
 */
export enum EnvironmentEc2SpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy(obj: EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolution
 */
export enum EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolve
 */
export enum EnvironmentEc2SpecForProviderSubnetIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolution
 */
export enum EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolve
 */
export enum EnvironmentEc2SpecForProviderSubnetIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum EnvironmentEc2SpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * EnvironmentMembership is the Schema for the EnvironmentMemberships API. Provides an environment member to an AWS Cloud9 development environment.
 *
 * @schema EnvironmentMembership
 */
export class EnvironmentMembership extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EnvironmentMembership"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cloud9.aws.upbound.io/v1beta1',
    kind: 'EnvironmentMembership',
  }

  /**
   * Renders a Kubernetes manifest for "EnvironmentMembership".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EnvironmentMembershipProps): any {
    return {
      ...EnvironmentMembership.GVK,
      ...toJson_EnvironmentMembershipProps(props),
    };
  }

  /**
   * Defines a "EnvironmentMembership" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EnvironmentMembershipProps) {
    super(scope, id, {
      ...EnvironmentMembership.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EnvironmentMembership.GVK,
      ...toJson_EnvironmentMembershipProps(resolved),
    };
  }
}

/**
 * EnvironmentMembership is the Schema for the EnvironmentMemberships API. Provides an environment member to an AWS Cloud9 development environment.
 *
 * @schema EnvironmentMembership
 */
export interface EnvironmentMembershipProps {
  /**
   * @schema EnvironmentMembership#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * EnvironmentMembershipSpec defines the desired state of EnvironmentMembership
   *
   * @schema EnvironmentMembership#spec
   */
  readonly spec: EnvironmentMembershipSpec;

}

/**
 * Converts an object of type 'EnvironmentMembershipProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipProps(obj: EnvironmentMembershipProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EnvironmentMembershipSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvironmentMembershipSpec defines the desired state of EnvironmentMembership
 *
 * @schema EnvironmentMembershipSpec
 */
export interface EnvironmentMembershipSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema EnvironmentMembershipSpec#deletionPolicy
   */
  readonly deletionPolicy?: EnvironmentMembershipSpecDeletionPolicy;

  /**
   * @schema EnvironmentMembershipSpec#forProvider
   */
  readonly forProvider: EnvironmentMembershipSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema EnvironmentMembershipSpec#providerConfigRef
   */
  readonly providerConfigRef?: EnvironmentMembershipSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema EnvironmentMembershipSpec#providerRef
   */
  readonly providerRef?: EnvironmentMembershipSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema EnvironmentMembershipSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: EnvironmentMembershipSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema EnvironmentMembershipSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: EnvironmentMembershipSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpec(obj: EnvironmentMembershipSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_EnvironmentMembershipSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_EnvironmentMembershipSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_EnvironmentMembershipSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_EnvironmentMembershipSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_EnvironmentMembershipSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema EnvironmentMembershipSpecDeletionPolicy
 */
export enum EnvironmentMembershipSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema EnvironmentMembershipSpecForProvider
 */
export interface EnvironmentMembershipSpecForProvider {
  /**
   * The ID of the environment that contains the environment member you want to add.
   *
   * @schema EnvironmentMembershipSpecForProvider#environmentId
   */
  readonly environmentId?: string;

  /**
   * Reference to a EnvironmentEC2 in cloud9 to populate environmentId.
   *
   * @schema EnvironmentMembershipSpecForProvider#environmentIdRef
   */
  readonly environmentIdRef?: EnvironmentMembershipSpecForProviderEnvironmentIdRef;

  /**
   * Selector for a EnvironmentEC2 in cloud9 to populate environmentId.
   *
   * @schema EnvironmentMembershipSpecForProvider#environmentIdSelector
   */
  readonly environmentIdSelector?: EnvironmentMembershipSpecForProviderEnvironmentIdSelector;

  /**
   * The type of environment member permissions you want to associate with this environment member. Allowed values are read-only and read-write .
   *
   * @schema EnvironmentMembershipSpecForProvider#permissions
   */
  readonly permissions: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema EnvironmentMembershipSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Amazon Resource Name (ARN) of the environment member you want to add.
   *
   * @schema EnvironmentMembershipSpecForProvider#userArn
   */
  readonly userArn?: string;

  /**
   * Reference to a User in iam to populate userArn.
   *
   * @schema EnvironmentMembershipSpecForProvider#userArnRef
   */
  readonly userArnRef?: EnvironmentMembershipSpecForProviderUserArnRef;

  /**
   * Selector for a User in iam to populate userArn.
   *
   * @schema EnvironmentMembershipSpecForProvider#userArnSelector
   */
  readonly userArnSelector?: EnvironmentMembershipSpecForProviderUserArnSelector;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProvider(obj: EnvironmentMembershipSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'environmentId': obj.environmentId,
    'environmentIdRef': toJson_EnvironmentMembershipSpecForProviderEnvironmentIdRef(obj.environmentIdRef),
    'environmentIdSelector': toJson_EnvironmentMembershipSpecForProviderEnvironmentIdSelector(obj.environmentIdSelector),
    'permissions': obj.permissions,
    'region': obj.region,
    'userArn': obj.userArn,
    'userArnRef': toJson_EnvironmentMembershipSpecForProviderUserArnRef(obj.userArnRef),
    'userArnSelector': toJson_EnvironmentMembershipSpecForProviderUserArnSelector(obj.userArnSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema EnvironmentMembershipSpecProviderConfigRef
 */
export interface EnvironmentMembershipSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentMembershipSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentMembershipSpecProviderConfigRef#policy
   */
  readonly policy?: EnvironmentMembershipSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecProviderConfigRef(obj: EnvironmentMembershipSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentMembershipSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema EnvironmentMembershipSpecProviderRef
 */
export interface EnvironmentMembershipSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentMembershipSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentMembershipSpecProviderRef#policy
   */
  readonly policy?: EnvironmentMembershipSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecProviderRef(obj: EnvironmentMembershipSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentMembershipSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsTo
 */
export interface EnvironmentMembershipSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: EnvironmentMembershipSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecPublishConnectionDetailsTo(obj: EnvironmentMembershipSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_EnvironmentMembershipSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema EnvironmentMembershipSpecWriteConnectionSecretToRef
 */
export interface EnvironmentMembershipSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema EnvironmentMembershipSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema EnvironmentMembershipSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecWriteConnectionSecretToRef(obj: EnvironmentMembershipSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a EnvironmentEC2 in cloud9 to populate environmentId.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRef
 */
export interface EnvironmentMembershipSpecForProviderEnvironmentIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRef#policy
   */
  readonly policy?: EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderEnvironmentIdRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderEnvironmentIdRef(obj: EnvironmentMembershipSpecForProviderEnvironmentIdRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a EnvironmentEC2 in cloud9 to populate environmentId.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelector
 */
export interface EnvironmentMembershipSpecForProviderEnvironmentIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelector#policy
   */
  readonly policy?: EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderEnvironmentIdSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderEnvironmentIdSelector(obj: EnvironmentMembershipSpecForProviderEnvironmentIdSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a User in iam to populate userArn.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnRef
 */
export interface EnvironmentMembershipSpecForProviderUserArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnRef#policy
   */
  readonly policy?: EnvironmentMembershipSpecForProviderUserArnRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderUserArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderUserArnRef(obj: EnvironmentMembershipSpecForProviderUserArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentMembershipSpecForProviderUserArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a User in iam to populate userArn.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnSelector
 */
export interface EnvironmentMembershipSpecForProviderUserArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnSelector#policy
   */
  readonly policy?: EnvironmentMembershipSpecForProviderUserArnSelectorPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderUserArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderUserArnSelector(obj: EnvironmentMembershipSpecForProviderUserArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_EnvironmentMembershipSpecForProviderUserArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentMembershipSpecProviderConfigRefPolicy
 */
export interface EnvironmentMembershipSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecProviderConfigRefPolicy(obj: EnvironmentMembershipSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentMembershipSpecProviderRefPolicy
 */
export interface EnvironmentMembershipSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecProviderRefPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecProviderRefPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecProviderRefPolicy(obj: EnvironmentMembershipSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef
 */
export interface EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef(obj: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsToMetadata
 */
export interface EnvironmentMembershipSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecPublishConnectionDetailsToMetadata(obj: EnvironmentMembershipSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy
 */
export interface EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy(obj: EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy
 */
export interface EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy(obj: EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnRefPolicy
 */
export interface EnvironmentMembershipSpecForProviderUserArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnRefPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecForProviderUserArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnRefPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecForProviderUserArnRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderUserArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderUserArnRefPolicy(obj: EnvironmentMembershipSpecForProviderUserArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnSelectorPolicy
 */
export interface EnvironmentMembershipSpecForProviderUserArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnSelectorPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecForProviderUserArnSelectorPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecForProviderUserArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecForProviderUserArnSelectorPolicy(obj: EnvironmentMembershipSpecForProviderUserArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecProviderConfigRefPolicyResolution
 */
export enum EnvironmentMembershipSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecProviderConfigRefPolicyResolve
 */
export enum EnvironmentMembershipSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecProviderRefPolicyResolution
 */
export enum EnvironmentMembershipSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecProviderRefPolicyResolve
 */
export enum EnvironmentMembershipSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy(obj: EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolution
 */
export enum EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolve
 */
export enum EnvironmentMembershipSpecForProviderEnvironmentIdRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolution
 */
export enum EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolve
 */
export enum EnvironmentMembershipSpecForProviderEnvironmentIdSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnRefPolicyResolution
 */
export enum EnvironmentMembershipSpecForProviderUserArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnRefPolicyResolve
 */
export enum EnvironmentMembershipSpecForProviderUserArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolution
 */
export enum EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolve
 */
export enum EnvironmentMembershipSpecForProviderUserArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum EnvironmentMembershipSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

