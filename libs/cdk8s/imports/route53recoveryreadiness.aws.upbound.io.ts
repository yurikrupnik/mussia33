// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Cell is the Schema for the Cells API. Provides an AWS Route 53 Recovery Readiness Cell
 *
 * @schema Cell
 */
export class Cell extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Cell"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'route53recoveryreadiness.aws.upbound.io/v1beta1',
    kind: 'Cell',
  }

  /**
   * Renders a Kubernetes manifest for "Cell".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: CellProps): any {
    return {
      ...Cell.GVK,
      ...toJson_CellProps(props),
    };
  }

  /**
   * Defines a "Cell" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: CellProps) {
    super(scope, id, {
      ...Cell.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Cell.GVK,
      ...toJson_CellProps(resolved),
    };
  }
}

/**
 * Cell is the Schema for the Cells API. Provides an AWS Route 53 Recovery Readiness Cell
 *
 * @schema Cell
 */
export interface CellProps {
  /**
   * @schema Cell#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * CellSpec defines the desired state of Cell
   *
   * @schema Cell#spec
   */
  readonly spec: CellSpec;

}

/**
 * Converts an object of type 'CellProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellProps(obj: CellProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_CellSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CellSpec defines the desired state of Cell
 *
 * @schema CellSpec
 */
export interface CellSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema CellSpec#deletionPolicy
   */
  readonly deletionPolicy?: CellSpecDeletionPolicy;

  /**
   * @schema CellSpec#forProvider
   */
  readonly forProvider: CellSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema CellSpec#initProvider
   */
  readonly initProvider?: CellSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema CellSpec#managementPolicies
   */
  readonly managementPolicies?: CellSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CellSpec#providerConfigRef
   */
  readonly providerConfigRef?: CellSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CellSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: CellSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema CellSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CellSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'CellSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpec(obj: CellSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_CellSpecForProvider(obj.forProvider),
    'initProvider': toJson_CellSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_CellSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_CellSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_CellSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema CellSpecDeletionPolicy
 */
export enum CellSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema CellSpecForProvider
 */
export interface CellSpecForProvider {
  /**
   * List of cell arns to add as nested fault domains within this cell.
   *
   * @schema CellSpecForProvider#cells
   */
  readonly cells?: string[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema CellSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema CellSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'CellSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecForProvider(obj: CellSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cells': obj.cells?.map(y => y),
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema CellSpecInitProvider
 */
export interface CellSpecInitProvider {
  /**
   * List of cell arns to add as nested fault domains within this cell.
   *
   * @schema CellSpecInitProvider#cells
   */
  readonly cells?: string[];

  /**
   * Key-value map of resource tags.
   *
   * @schema CellSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'CellSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecInitProvider(obj: CellSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cells': obj.cells?.map(y => y),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema CellSpecManagementPolicies
 */
export enum CellSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CellSpecProviderConfigRef
 */
export interface CellSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CellSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CellSpecProviderConfigRef#policy
   */
  readonly policy?: CellSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'CellSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecProviderConfigRef(obj: CellSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CellSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CellSpecPublishConnectionDetailsTo
 */
export interface CellSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema CellSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: CellSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema CellSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: CellSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema CellSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'CellSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecPublishConnectionDetailsTo(obj: CellSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_CellSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_CellSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema CellSpecWriteConnectionSecretToRef
 */
export interface CellSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CellSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CellSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'CellSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecWriteConnectionSecretToRef(obj: CellSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema CellSpecProviderConfigRefPolicy
 */
export interface CellSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CellSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: CellSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CellSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: CellSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CellSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecProviderConfigRefPolicy(obj: CellSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema CellSpecPublishConnectionDetailsToConfigRef
 */
export interface CellSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CellSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema CellSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: CellSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'CellSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecPublishConnectionDetailsToConfigRef(obj: CellSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_CellSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema CellSpecPublishConnectionDetailsToMetadata
 */
export interface CellSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema CellSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema CellSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema CellSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'CellSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecPublishConnectionDetailsToMetadata(obj: CellSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CellSpecProviderConfigRefPolicyResolution
 */
export enum CellSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CellSpecProviderConfigRefPolicyResolve
 */
export enum CellSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema CellSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface CellSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema CellSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: CellSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema CellSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: CellSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'CellSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_CellSpecPublishConnectionDetailsToConfigRefPolicy(obj: CellSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema CellSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum CellSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema CellSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum CellSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * ReadinessCheck is the Schema for the ReadinessChecks API. Provides an AWS Route 53 Recovery Readiness Readiness Check
 *
 * @schema ReadinessCheck
 */
export class ReadinessCheck extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReadinessCheck"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'route53recoveryreadiness.aws.upbound.io/v1beta1',
    kind: 'ReadinessCheck',
  }

  /**
   * Renders a Kubernetes manifest for "ReadinessCheck".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReadinessCheckProps): any {
    return {
      ...ReadinessCheck.GVK,
      ...toJson_ReadinessCheckProps(props),
    };
  }

  /**
   * Defines a "ReadinessCheck" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ReadinessCheckProps) {
    super(scope, id, {
      ...ReadinessCheck.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReadinessCheck.GVK,
      ...toJson_ReadinessCheckProps(resolved),
    };
  }
}

/**
 * ReadinessCheck is the Schema for the ReadinessChecks API. Provides an AWS Route 53 Recovery Readiness Readiness Check
 *
 * @schema ReadinessCheck
 */
export interface ReadinessCheckProps {
  /**
   * @schema ReadinessCheck#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ReadinessCheckSpec defines the desired state of ReadinessCheck
   *
   * @schema ReadinessCheck#spec
   */
  readonly spec: ReadinessCheckSpec;

}

/**
 * Converts an object of type 'ReadinessCheckProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckProps(obj: ReadinessCheckProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ReadinessCheckSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ReadinessCheckSpec defines the desired state of ReadinessCheck
 *
 * @schema ReadinessCheckSpec
 */
export interface ReadinessCheckSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ReadinessCheckSpec#deletionPolicy
   */
  readonly deletionPolicy?: ReadinessCheckSpecDeletionPolicy;

  /**
   * @schema ReadinessCheckSpec#forProvider
   */
  readonly forProvider: ReadinessCheckSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ReadinessCheckSpec#initProvider
   */
  readonly initProvider?: ReadinessCheckSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ReadinessCheckSpec#managementPolicies
   */
  readonly managementPolicies?: ReadinessCheckSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ReadinessCheckSpec#providerConfigRef
   */
  readonly providerConfigRef?: ReadinessCheckSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ReadinessCheckSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ReadinessCheckSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ReadinessCheckSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ReadinessCheckSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ReadinessCheckSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpec(obj: ReadinessCheckSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ReadinessCheckSpecForProvider(obj.forProvider),
    'initProvider': toJson_ReadinessCheckSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ReadinessCheckSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ReadinessCheckSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ReadinessCheckSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ReadinessCheckSpecDeletionPolicy
 */
export enum ReadinessCheckSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ReadinessCheckSpecForProvider
 */
export interface ReadinessCheckSpecForProvider {
  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema ReadinessCheckSpecForProvider#region
   */
  readonly region: string;

  /**
   * Name describing the resource set that will be monitored for readiness.
   *
   * @schema ReadinessCheckSpecForProvider#resourceSetName
   */
  readonly resourceSetName?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ReadinessCheckSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ReadinessCheckSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecForProvider(obj: ReadinessCheckSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'region': obj.region,
    'resourceSetName': obj.resourceSetName,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ReadinessCheckSpecInitProvider
 */
export interface ReadinessCheckSpecInitProvider {
  /**
   * Name describing the resource set that will be monitored for readiness.
   *
   * @schema ReadinessCheckSpecInitProvider#resourceSetName
   */
  readonly resourceSetName?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ReadinessCheckSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ReadinessCheckSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecInitProvider(obj: ReadinessCheckSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceSetName': obj.resourceSetName,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ReadinessCheckSpecManagementPolicies
 */
export enum ReadinessCheckSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ReadinessCheckSpecProviderConfigRef
 */
export interface ReadinessCheckSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReadinessCheckSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReadinessCheckSpecProviderConfigRef#policy
   */
  readonly policy?: ReadinessCheckSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ReadinessCheckSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecProviderConfigRef(obj: ReadinessCheckSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReadinessCheckSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsTo
 */
export interface ReadinessCheckSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ReadinessCheckSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ReadinessCheckSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ReadinessCheckSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecPublishConnectionDetailsTo(obj: ReadinessCheckSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ReadinessCheckSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ReadinessCheckSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ReadinessCheckSpecWriteConnectionSecretToRef
 */
export interface ReadinessCheckSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ReadinessCheckSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ReadinessCheckSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ReadinessCheckSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecWriteConnectionSecretToRef(obj: ReadinessCheckSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ReadinessCheckSpecProviderConfigRefPolicy
 */
export interface ReadinessCheckSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReadinessCheckSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ReadinessCheckSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReadinessCheckSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ReadinessCheckSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ReadinessCheckSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecProviderConfigRefPolicy(obj: ReadinessCheckSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRef
 */
export interface ReadinessCheckSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ReadinessCheckSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecPublishConnectionDetailsToConfigRef(obj: ReadinessCheckSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsToMetadata
 */
export interface ReadinessCheckSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ReadinessCheckSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecPublishConnectionDetailsToMetadata(obj: ReadinessCheckSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReadinessCheckSpecProviderConfigRefPolicyResolution
 */
export enum ReadinessCheckSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReadinessCheckSpecProviderConfigRefPolicyResolve
 */
export enum ReadinessCheckSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy(obj: ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ReadinessCheckSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * RecoveryGroup is the Schema for the RecoveryGroups API. Provides an AWS Route 53 Recovery Readiness Recovery Group
 *
 * @schema RecoveryGroup
 */
export class RecoveryGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RecoveryGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'route53recoveryreadiness.aws.upbound.io/v1beta1',
    kind: 'RecoveryGroup',
  }

  /**
   * Renders a Kubernetes manifest for "RecoveryGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RecoveryGroupProps): any {
    return {
      ...RecoveryGroup.GVK,
      ...toJson_RecoveryGroupProps(props),
    };
  }

  /**
   * Defines a "RecoveryGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RecoveryGroupProps) {
    super(scope, id, {
      ...RecoveryGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RecoveryGroup.GVK,
      ...toJson_RecoveryGroupProps(resolved),
    };
  }
}

/**
 * RecoveryGroup is the Schema for the RecoveryGroups API. Provides an AWS Route 53 Recovery Readiness Recovery Group
 *
 * @schema RecoveryGroup
 */
export interface RecoveryGroupProps {
  /**
   * @schema RecoveryGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RecoveryGroupSpec defines the desired state of RecoveryGroup
   *
   * @schema RecoveryGroup#spec
   */
  readonly spec: RecoveryGroupSpec;

}

/**
 * Converts an object of type 'RecoveryGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupProps(obj: RecoveryGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RecoveryGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RecoveryGroupSpec defines the desired state of RecoveryGroup
 *
 * @schema RecoveryGroupSpec
 */
export interface RecoveryGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema RecoveryGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: RecoveryGroupSpecDeletionPolicy;

  /**
   * @schema RecoveryGroupSpec#forProvider
   */
  readonly forProvider: RecoveryGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema RecoveryGroupSpec#initProvider
   */
  readonly initProvider?: RecoveryGroupSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema RecoveryGroupSpec#managementPolicies
   */
  readonly managementPolicies?: RecoveryGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RecoveryGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: RecoveryGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RecoveryGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RecoveryGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RecoveryGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RecoveryGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RecoveryGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpec(obj: RecoveryGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RecoveryGroupSpecForProvider(obj.forProvider),
    'initProvider': toJson_RecoveryGroupSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_RecoveryGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_RecoveryGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RecoveryGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema RecoveryGroupSpecDeletionPolicy
 */
export enum RecoveryGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema RecoveryGroupSpecForProvider
 */
export interface RecoveryGroupSpecForProvider {
  /**
   * List of cell arns to add as nested fault domains within this recovery group
   *
   * @schema RecoveryGroupSpecForProvider#cells
   */
  readonly cells?: string[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema RecoveryGroupSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema RecoveryGroupSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'RecoveryGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecForProvider(obj: RecoveryGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cells': obj.cells?.map(y => y),
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema RecoveryGroupSpecInitProvider
 */
export interface RecoveryGroupSpecInitProvider {
  /**
   * List of cell arns to add as nested fault domains within this recovery group
   *
   * @schema RecoveryGroupSpecInitProvider#cells
   */
  readonly cells?: string[];

  /**
   * Key-value map of resource tags.
   *
   * @schema RecoveryGroupSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'RecoveryGroupSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecInitProvider(obj: RecoveryGroupSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cells': obj.cells?.map(y => y),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema RecoveryGroupSpecManagementPolicies
 */
export enum RecoveryGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RecoveryGroupSpecProviderConfigRef
 */
export interface RecoveryGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RecoveryGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RecoveryGroupSpecProviderConfigRef#policy
   */
  readonly policy?: RecoveryGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RecoveryGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecProviderConfigRef(obj: RecoveryGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RecoveryGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsTo
 */
export interface RecoveryGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RecoveryGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RecoveryGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RecoveryGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecPublishConnectionDetailsTo(obj: RecoveryGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RecoveryGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RecoveryGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RecoveryGroupSpecWriteConnectionSecretToRef
 */
export interface RecoveryGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RecoveryGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RecoveryGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RecoveryGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecWriteConnectionSecretToRef(obj: RecoveryGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RecoveryGroupSpecProviderConfigRefPolicy
 */
export interface RecoveryGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RecoveryGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RecoveryGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RecoveryGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RecoveryGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RecoveryGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecProviderConfigRefPolicy(obj: RecoveryGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface RecoveryGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RecoveryGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecPublishConnectionDetailsToConfigRef(obj: RecoveryGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsToMetadata
 */
export interface RecoveryGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RecoveryGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecPublishConnectionDetailsToMetadata(obj: RecoveryGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RecoveryGroupSpecProviderConfigRefPolicyResolution
 */
export enum RecoveryGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RecoveryGroupSpecProviderConfigRefPolicyResolve
 */
export enum RecoveryGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RecoveryGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * ResourceSet is the Schema for the ResourceSets API. Provides an AWS Route 53 Recovery Readiness Resource Set
 *
 * @schema ResourceSet
 */
export class ResourceSet extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResourceSet"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'route53recoveryreadiness.aws.upbound.io/v1beta1',
    kind: 'ResourceSet',
  }

  /**
   * Renders a Kubernetes manifest for "ResourceSet".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResourceSetProps): any {
    return {
      ...ResourceSet.GVK,
      ...toJson_ResourceSetProps(props),
    };
  }

  /**
   * Defines a "ResourceSet" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResourceSetProps) {
    super(scope, id, {
      ...ResourceSet.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResourceSet.GVK,
      ...toJson_ResourceSetProps(resolved),
    };
  }
}

/**
 * ResourceSet is the Schema for the ResourceSets API. Provides an AWS Route 53 Recovery Readiness Resource Set
 *
 * @schema ResourceSet
 */
export interface ResourceSetProps {
  /**
   * @schema ResourceSet#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ResourceSetSpec defines the desired state of ResourceSet
   *
   * @schema ResourceSet#spec
   */
  readonly spec: ResourceSetSpec;

}

/**
 * Converts an object of type 'ResourceSetProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetProps(obj: ResourceSetProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResourceSetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceSetSpec defines the desired state of ResourceSet
 *
 * @schema ResourceSetSpec
 */
export interface ResourceSetSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ResourceSetSpec#deletionPolicy
   */
  readonly deletionPolicy?: ResourceSetSpecDeletionPolicy;

  /**
   * @schema ResourceSetSpec#forProvider
   */
  readonly forProvider: ResourceSetSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ResourceSetSpec#initProvider
   */
  readonly initProvider?: ResourceSetSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ResourceSetSpec#managementPolicies
   */
  readonly managementPolicies?: ResourceSetSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ResourceSetSpec#providerConfigRef
   */
  readonly providerConfigRef?: ResourceSetSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ResourceSetSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ResourceSetSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ResourceSetSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ResourceSetSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ResourceSetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpec(obj: ResourceSetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ResourceSetSpecForProvider(obj.forProvider),
    'initProvider': toJson_ResourceSetSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ResourceSetSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ResourceSetSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ResourceSetSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ResourceSetSpecDeletionPolicy
 */
export enum ResourceSetSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ResourceSetSpecForProvider
 */
export interface ResourceSetSpecForProvider {
  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema ResourceSetSpecForProvider#region
   */
  readonly region: string;

  /**
   * Type of the resources in the resource set.
   *
   * @schema ResourceSetSpecForProvider#resourceSetType
   */
  readonly resourceSetType?: string;

  /**
   * List of resources to add to this resource set. See below.
   *
   * @schema ResourceSetSpecForProvider#resources
   */
  readonly resources?: ResourceSetSpecForProviderResources[];

  /**
   * Key-value map of resource tags.
   *
   * @schema ResourceSetSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ResourceSetSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProvider(obj: ResourceSetSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'region': obj.region,
    'resourceSetType': obj.resourceSetType,
    'resources': obj.resources?.map(y => toJson_ResourceSetSpecForProviderResources(y)),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ResourceSetSpecInitProvider
 */
export interface ResourceSetSpecInitProvider {
  /**
   * Type of the resources in the resource set.
   *
   * @schema ResourceSetSpecInitProvider#resourceSetType
   */
  readonly resourceSetType?: string;

  /**
   * List of resources to add to this resource set. See below.
   *
   * @schema ResourceSetSpecInitProvider#resources
   */
  readonly resources?: ResourceSetSpecInitProviderResources[];

  /**
   * Key-value map of resource tags.
   *
   * @schema ResourceSetSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ResourceSetSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProvider(obj: ResourceSetSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resourceSetType': obj.resourceSetType,
    'resources': obj.resources?.map(y => toJson_ResourceSetSpecInitProviderResources(y)),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ResourceSetSpecManagementPolicies
 */
export enum ResourceSetSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ResourceSetSpecProviderConfigRef
 */
export interface ResourceSetSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResourceSetSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResourceSetSpecProviderConfigRef#policy
   */
  readonly policy?: ResourceSetSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ResourceSetSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecProviderConfigRef(obj: ResourceSetSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResourceSetSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsTo
 */
export interface ResourceSetSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ResourceSetSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ResourceSetSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ResourceSetSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecPublishConnectionDetailsTo(obj: ResourceSetSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ResourceSetSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ResourceSetSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ResourceSetSpecWriteConnectionSecretToRef
 */
export interface ResourceSetSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ResourceSetSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ResourceSetSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ResourceSetSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecWriteConnectionSecretToRef(obj: ResourceSetSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecForProviderResources
 */
export interface ResourceSetSpecForProviderResources {
  /**
   * Component for DNS/Routing Control Readiness Checks.
   *
   * @schema ResourceSetSpecForProviderResources#dnsTargetResource
   */
  readonly dnsTargetResource?: ResourceSetSpecForProviderResourcesDnsTargetResource[];

  /**
   * Recovery group ARN or cell ARN that contains this resource set.
   *
   * @schema ResourceSetSpecForProviderResources#readinessScopes
   */
  readonly readinessScopes?: string[];

  /**
   * ARN of the resource.
   *
   * @schema ResourceSetSpecForProviderResources#resourceArn
   */
  readonly resourceArn?: string;

  /**
   * Reference to a MetricAlarm in cloudwatch to populate resourceArn.
   *
   * @schema ResourceSetSpecForProviderResources#resourceArnRef
   */
  readonly resourceArnRef?: ResourceSetSpecForProviderResourcesResourceArnRef;

  /**
   * Selector for a MetricAlarm in cloudwatch to populate resourceArn.
   *
   * @schema ResourceSetSpecForProviderResources#resourceArnSelector
   */
  readonly resourceArnSelector?: ResourceSetSpecForProviderResourcesResourceArnSelector;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResources(obj: ResourceSetSpecForProviderResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dnsTargetResource': obj.dnsTargetResource?.map(y => toJson_ResourceSetSpecForProviderResourcesDnsTargetResource(y)),
    'readinessScopes': obj.readinessScopes?.map(y => y),
    'resourceArn': obj.resourceArn,
    'resourceArnRef': toJson_ResourceSetSpecForProviderResourcesResourceArnRef(obj.resourceArnRef),
    'resourceArnSelector': toJson_ResourceSetSpecForProviderResourcesResourceArnSelector(obj.resourceArnSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecInitProviderResources
 */
export interface ResourceSetSpecInitProviderResources {
  /**
   * Component for DNS/Routing Control Readiness Checks.
   *
   * @schema ResourceSetSpecInitProviderResources#dnsTargetResource
   */
  readonly dnsTargetResource?: ResourceSetSpecInitProviderResourcesDnsTargetResource[];

  /**
   * Recovery group ARN or cell ARN that contains this resource set.
   *
   * @schema ResourceSetSpecInitProviderResources#readinessScopes
   */
  readonly readinessScopes?: string[];

}

/**
 * Converts an object of type 'ResourceSetSpecInitProviderResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProviderResources(obj: ResourceSetSpecInitProviderResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dnsTargetResource': obj.dnsTargetResource?.map(y => toJson_ResourceSetSpecInitProviderResourcesDnsTargetResource(y)),
    'readinessScopes': obj.readinessScopes?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ResourceSetSpecProviderConfigRefPolicy
 */
export interface ResourceSetSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceSetSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ResourceSetSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceSetSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ResourceSetSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResourceSetSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecProviderConfigRefPolicy(obj: ResourceSetSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsToConfigRef
 */
export interface ResourceSetSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ResourceSetSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecPublishConnectionDetailsToConfigRef(obj: ResourceSetSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsToMetadata
 */
export interface ResourceSetSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ResourceSetSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecPublishConnectionDetailsToMetadata(obj: ResourceSetSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecForProviderResourcesDnsTargetResource
 */
export interface ResourceSetSpecForProviderResourcesDnsTargetResource {
  /**
   * DNS Name that acts as the ingress point to a portion of application.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResource#domainName
   */
  readonly domainName?: string;

  /**
   * Hosted Zone ARN that contains the DNS record with the provided name of target resource.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResource#hostedZoneArn
   */
  readonly hostedZoneArn?: string;

  /**
   * Route53 record set id to uniquely identify a record given a domain_name and a record_type.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResource#recordSetId
   */
  readonly recordSetId?: string;

  /**
   * Type of DNS Record of target resource.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResource#recordType
   */
  readonly recordType?: string;

  /**
   * Target resource the R53 record specified with the above params points to.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResource#targetResource
   */
  readonly targetResource?: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource[];

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesDnsTargetResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesDnsTargetResource(obj: ResourceSetSpecForProviderResourcesDnsTargetResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'domainName': obj.domainName,
    'hostedZoneArn': obj.hostedZoneArn,
    'recordSetId': obj.recordSetId,
    'recordType': obj.recordType,
    'targetResource': obj.targetResource?.map(y => toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a MetricAlarm in cloudwatch to populate resourceArn.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnRef
 */
export interface ResourceSetSpecForProviderResourcesResourceArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnRef#policy
   */
  readonly policy?: ResourceSetSpecForProviderResourcesResourceArnRefPolicy;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesResourceArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesResourceArnRef(obj: ResourceSetSpecForProviderResourcesResourceArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResourceSetSpecForProviderResourcesResourceArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a MetricAlarm in cloudwatch to populate resourceArn.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnSelector
 */
export interface ResourceSetSpecForProviderResourcesResourceArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnSelector#policy
   */
  readonly policy?: ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesResourceArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesResourceArnSelector(obj: ResourceSetSpecForProviderResourcesResourceArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource
 */
export interface ResourceSetSpecInitProviderResourcesDnsTargetResource {
  /**
   * DNS Name that acts as the ingress point to a portion of application.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource#domainName
   */
  readonly domainName?: string;

  /**
   * Hosted Zone ARN that contains the DNS record with the provided name of target resource.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource#hostedZoneArn
   */
  readonly hostedZoneArn?: string;

  /**
   * Route53 record set id to uniquely identify a record given a domain_name and a record_type.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource#recordSetId
   */
  readonly recordSetId?: string;

  /**
   * Type of DNS Record of target resource.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource#recordType
   */
  readonly recordType?: string;

  /**
   * Target resource the R53 record specified with the above params points to.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResource#targetResource
   */
  readonly targetResource?: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource[];

}

/**
 * Converts an object of type 'ResourceSetSpecInitProviderResourcesDnsTargetResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProviderResourcesDnsTargetResource(obj: ResourceSetSpecInitProviderResourcesDnsTargetResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'domainName': obj.domainName,
    'hostedZoneArn': obj.hostedZoneArn,
    'recordSetId': obj.recordSetId,
    'recordType': obj.recordType,
    'targetResource': obj.targetResource?.map(y => toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceSetSpecProviderConfigRefPolicyResolution
 */
export enum ResourceSetSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceSetSpecProviderConfigRefPolicyResolve
 */
export enum ResourceSetSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy(obj: ResourceSetSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource
 */
export interface ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource {
  /**
   * NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource#nlbResource
   */
  readonly nlbResource?: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource[];

  /**
   * Route53 resource a DNS Target Resource record points to.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource#r53Resource
   */
  readonly r53Resource?: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource[];

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource(obj: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nlbResource': obj.nlbResource?.map(y => toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource(y)),
    'r53Resource': obj.r53Resource?.map(y => toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnRefPolicy
 */
export interface ResourceSetSpecForProviderResourcesResourceArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnRefPolicy#resolution
   */
  readonly resolution?: ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnRefPolicy#resolve
   */
  readonly resolve?: ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolve;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesResourceArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesResourceArnRefPolicy(obj: ResourceSetSpecForProviderResourcesResourceArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy
 */
export interface ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy#resolution
   */
  readonly resolution?: ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy#resolve
   */
  readonly resolve?: ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy(obj: ResourceSetSpecForProviderResourcesResourceArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource
 */
export interface ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource {
  /**
   * NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource#nlbResource
   */
  readonly nlbResource?: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource[];

  /**
   * Route53 resource a DNS Target Resource record points to.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource#r53Resource
   */
  readonly r53Resource?: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource[];

}

/**
 * Converts an object of type 'ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource(obj: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nlbResource': obj.nlbResource?.map(y => toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource(y)),
    'r53Resource': obj.r53Resource?.map(y => toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ResourceSetSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource
 */
export interface ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource {
  /**
   * NLB resource ARN.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource#arn
   */
  readonly arn?: string;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource(obj: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceNlbResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arn': obj.arn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource
 */
export interface ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource {
  /**
   * Domain name that is targeted.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource#domainName
   */
  readonly domainName?: string;

  /**
   * Resource record set ID that is targeted.
   *
   * @schema ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource#recordSetId
   */
  readonly recordSetId?: string;

}

/**
 * Converts an object of type 'ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource(obj: ResourceSetSpecForProviderResourcesDnsTargetResourceTargetResourceR53Resource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'domainName': obj.domainName,
    'recordSetId': obj.recordSetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolution
 */
export enum ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolve
 */
export enum ResourceSetSpecForProviderResourcesResourceArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolution
 */
export enum ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolve
 */
export enum ResourceSetSpecForProviderResourcesResourceArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource
 */
export interface ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource {
  /**
   * NLB resource ARN.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource#arn
   */
  readonly arn?: string;

}

/**
 * Converts an object of type 'ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource(obj: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceNlbResource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'arn': obj.arn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource
 */
export interface ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource {
  /**
   * Domain name that is targeted.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource#domainName
   */
  readonly domainName?: string;

  /**
   * Resource record set ID that is targeted.
   *
   * @schema ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource#recordSetId
   */
  readonly recordSetId?: string;

}

/**
 * Converts an object of type 'ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource(obj: ResourceSetSpecInitProviderResourcesDnsTargetResourceTargetResourceR53Resource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'domainName': obj.domainName,
    'recordSetId': obj.recordSetId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

