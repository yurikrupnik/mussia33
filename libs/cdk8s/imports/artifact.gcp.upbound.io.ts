// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * RegistryRepository is the Schema for the RegistryRepositorys API. A repository for storing artifacts
 *
 * @schema RegistryRepository
 */
export class RegistryRepository extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RegistryRepository"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'artifact.gcp.upbound.io/v1beta1',
    kind: 'RegistryRepository',
  }

  /**
   * Renders a Kubernetes manifest for "RegistryRepository".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RegistryRepositoryProps): any {
    return {
      ...RegistryRepository.GVK,
      ...toJson_RegistryRepositoryProps(props),
    };
  }

  /**
   * Defines a "RegistryRepository" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RegistryRepositoryProps) {
    super(scope, id, {
      ...RegistryRepository.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RegistryRepository.GVK,
      ...toJson_RegistryRepositoryProps(resolved),
    };
  }
}

/**
 * RegistryRepository is the Schema for the RegistryRepositorys API. A repository for storing artifacts
 *
 * @schema RegistryRepository
 */
export interface RegistryRepositoryProps {
  /**
   * @schema RegistryRepository#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RegistryRepositorySpec defines the desired state of RegistryRepository
   *
   * @schema RegistryRepository#spec
   */
  readonly spec: RegistryRepositorySpec;

}

/**
 * Converts an object of type 'RegistryRepositoryProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryProps(obj: RegistryRepositoryProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RegistryRepositorySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RegistryRepositorySpec defines the desired state of RegistryRepository
 *
 * @schema RegistryRepositorySpec
 */
export interface RegistryRepositorySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema RegistryRepositorySpec#deletionPolicy
   */
  readonly deletionPolicy?: RegistryRepositorySpecDeletionPolicy;

  /**
   * @schema RegistryRepositorySpec#forProvider
   */
  readonly forProvider: RegistryRepositorySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RegistryRepositorySpec#providerConfigRef
   */
  readonly providerConfigRef?: RegistryRepositorySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RegistryRepositorySpec#providerRef
   */
  readonly providerRef?: RegistryRepositorySpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RegistryRepositorySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RegistryRepositorySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RegistryRepositorySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RegistryRepositorySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RegistryRepositorySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpec(obj: RegistryRepositorySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RegistryRepositorySpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_RegistryRepositorySpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_RegistryRepositorySpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_RegistryRepositorySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RegistryRepositorySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema RegistryRepositorySpecDeletionPolicy
 */
export enum RegistryRepositorySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema RegistryRepositorySpecForProvider
 */
export interface RegistryRepositorySpecForProvider {
  /**
   * The user-provided description of the repository.
   *
   * @schema RegistryRepositorySpecForProvider#description
   */
  readonly description?: string;

  /**
   * The format of packages that are stored in the repository. Supported formats can be found here. You can only create alpha formats if you are a member of the alpha user group.
   *
   * @schema RegistryRepositorySpecForProvider#format
   */
  readonly format: string;

  /**
   * The Cloud KMS resource name of the customer managed encryption key thatâ€™s used to encrypt the contents of the Repository. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. This value may not be changed after the Repository has been created.
   *
   * @schema RegistryRepositorySpecForProvider#kmsKeyName
   */
  readonly kmsKeyName?: string;

  /**
   * Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
   *
   * @schema RegistryRepositorySpecForProvider#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The name of the location this repository is located in.
   *
   * @schema RegistryRepositorySpecForProvider#location
   */
  readonly location?: string;

  /**
   * MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type. Structure is documented below.
   *
   * @schema RegistryRepositorySpecForProvider#mavenConfig
   */
  readonly mavenConfig?: RegistryRepositorySpecForProviderMavenConfig[];

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema RegistryRepositorySpecForProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'RegistryRepositorySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecForProvider(obj: RegistryRepositorySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'format': obj.format,
    'kmsKeyName': obj.kmsKeyName,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'location': obj.location,
    'mavenConfig': obj.mavenConfig?.map(y => toJson_RegistryRepositorySpecForProviderMavenConfig(y)),
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RegistryRepositorySpecProviderConfigRef
 */
export interface RegistryRepositorySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositorySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositorySpecProviderConfigRef#policy
   */
  readonly policy?: RegistryRepositorySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositorySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecProviderConfigRef(obj: RegistryRepositorySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositorySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RegistryRepositorySpecProviderRef
 */
export interface RegistryRepositorySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositorySpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositorySpecProviderRef#policy
   */
  readonly policy?: RegistryRepositorySpecProviderRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositorySpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecProviderRef(obj: RegistryRepositorySpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositorySpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsTo
 */
export interface RegistryRepositorySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RegistryRepositorySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RegistryRepositorySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RegistryRepositorySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecPublishConnectionDetailsTo(obj: RegistryRepositorySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RegistryRepositorySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RegistryRepositorySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RegistryRepositorySpecWriteConnectionSecretToRef
 */
export interface RegistryRepositorySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RegistryRepositorySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RegistryRepositorySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RegistryRepositorySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecWriteConnectionSecretToRef(obj: RegistryRepositorySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RegistryRepositorySpecForProviderMavenConfig
 */
export interface RegistryRepositorySpecForProviderMavenConfig {
  /**
   * The repository with this flag will allow publishing the same snapshot versions.
   *
   * @schema RegistryRepositorySpecForProviderMavenConfig#allowSnapshotOverwrites
   */
  readonly allowSnapshotOverwrites?: boolean;

  /**
   * Version policy defines the versions that the registry will accept. Default value is VERSION_POLICY_UNSPECIFIED. Possible values are VERSION_POLICY_UNSPECIFIED, RELEASE, and SNAPSHOT.
   *
   * @schema RegistryRepositorySpecForProviderMavenConfig#versionPolicy
   */
  readonly versionPolicy?: string;

}

/**
 * Converts an object of type 'RegistryRepositorySpecForProviderMavenConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecForProviderMavenConfig(obj: RegistryRepositorySpecForProviderMavenConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowSnapshotOverwrites': obj.allowSnapshotOverwrites,
    'versionPolicy': obj.versionPolicy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositorySpecProviderConfigRefPolicy
 */
export interface RegistryRepositorySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositorySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositorySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositorySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositorySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositorySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecProviderConfigRefPolicy(obj: RegistryRepositorySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositorySpecProviderRefPolicy
 */
export interface RegistryRepositorySpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositorySpecProviderRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositorySpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositorySpecProviderRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositorySpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositorySpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecProviderRefPolicy(obj: RegistryRepositorySpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRef
 */
export interface RegistryRepositorySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositorySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecPublishConnectionDetailsToConfigRef(obj: RegistryRepositorySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsToMetadata
 */
export interface RegistryRepositorySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RegistryRepositorySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecPublishConnectionDetailsToMetadata(obj: RegistryRepositorySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositorySpecProviderConfigRefPolicyResolution
 */
export enum RegistryRepositorySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositorySpecProviderConfigRefPolicyResolve
 */
export enum RegistryRepositorySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositorySpecProviderRefPolicyResolution
 */
export enum RegistryRepositorySpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositorySpecProviderRefPolicyResolve
 */
export enum RegistryRepositorySpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy(obj: RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RegistryRepositorySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * RegistryRepositoryIAMMember is the Schema for the RegistryRepositoryIAMMembers API. <no value>
 *
 * @schema RegistryRepositoryIAMMember
 */
export class RegistryRepositoryIamMember extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RegistryRepositoryIAMMember"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'artifact.gcp.upbound.io/v1beta1',
    kind: 'RegistryRepositoryIAMMember',
  }

  /**
   * Renders a Kubernetes manifest for "RegistryRepositoryIAMMember".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RegistryRepositoryIamMemberProps): any {
    return {
      ...RegistryRepositoryIamMember.GVK,
      ...toJson_RegistryRepositoryIamMemberProps(props),
    };
  }

  /**
   * Defines a "RegistryRepositoryIAMMember" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RegistryRepositoryIamMemberProps) {
    super(scope, id, {
      ...RegistryRepositoryIamMember.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RegistryRepositoryIamMember.GVK,
      ...toJson_RegistryRepositoryIamMemberProps(resolved),
    };
  }
}

/**
 * RegistryRepositoryIAMMember is the Schema for the RegistryRepositoryIAMMembers API. <no value>
 *
 * @schema RegistryRepositoryIAMMember
 */
export interface RegistryRepositoryIamMemberProps {
  /**
   * @schema RegistryRepositoryIAMMember#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RegistryRepositoryIAMMemberSpec defines the desired state of RegistryRepositoryIAMMember
   *
   * @schema RegistryRepositoryIAMMember#spec
   */
  readonly spec: RegistryRepositoryIamMemberSpec;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberProps(obj: RegistryRepositoryIamMemberProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RegistryRepositoryIamMemberSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RegistryRepositoryIAMMemberSpec defines the desired state of RegistryRepositoryIAMMember
 *
 * @schema RegistryRepositoryIamMemberSpec
 */
export interface RegistryRepositoryIamMemberSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema RegistryRepositoryIamMemberSpec#deletionPolicy
   */
  readonly deletionPolicy?: RegistryRepositoryIamMemberSpecDeletionPolicy;

  /**
   * @schema RegistryRepositoryIamMemberSpec#forProvider
   */
  readonly forProvider: RegistryRepositoryIamMemberSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RegistryRepositoryIamMemberSpec#providerConfigRef
   */
  readonly providerConfigRef?: RegistryRepositoryIamMemberSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RegistryRepositoryIamMemberSpec#providerRef
   */
  readonly providerRef?: RegistryRepositoryIamMemberSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RegistryRepositoryIamMemberSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema RegistryRepositoryIamMemberSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpec(obj: RegistryRepositoryIamMemberSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_RegistryRepositoryIamMemberSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_RegistryRepositoryIamMemberSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_RegistryRepositoryIamMemberSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema RegistryRepositoryIamMemberSpecDeletionPolicy
 */
export enum RegistryRepositoryIamMemberSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema RegistryRepositoryIamMemberSpecForProvider
 */
export interface RegistryRepositoryIamMemberSpecForProvider {
  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#condition
   */
  readonly condition?: RegistryRepositoryIamMemberSpecForProviderCondition[];

  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#location
   */
  readonly location?: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#member
   */
  readonly member: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#project
   */
  readonly project?: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#repository
   */
  readonly repository: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProvider#role
   */
  readonly role: string;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecForProvider(obj: RegistryRepositoryIamMemberSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'condition': obj.condition?.map(y => toJson_RegistryRepositoryIamMemberSpecForProviderCondition(y)),
    'location': obj.location,
    'member': obj.member,
    'project': obj.project,
    'repository': obj.repository,
    'role': obj.role,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderConfigRef
 */
export interface RegistryRepositoryIamMemberSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderConfigRef#policy
   */
  readonly policy?: RegistryRepositoryIamMemberSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecProviderConfigRef(obj: RegistryRepositoryIamMemberSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositoryIamMemberSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RegistryRepositoryIamMemberSpecProviderRef
 */
export interface RegistryRepositoryIamMemberSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderRef#policy
   */
  readonly policy?: RegistryRepositoryIamMemberSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecProviderRef(obj: RegistryRepositoryIamMemberSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositoryIamMemberSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo
 */
export interface RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo(obj: RegistryRepositoryIamMemberSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef
 */
export interface RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef(obj: RegistryRepositoryIamMemberSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RegistryRepositoryIamMemberSpecForProviderCondition
 */
export interface RegistryRepositoryIamMemberSpecForProviderCondition {
  /**
   * @schema RegistryRepositoryIamMemberSpecForProviderCondition#description
   */
  readonly description?: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProviderCondition#expression
   */
  readonly expression: string;

  /**
   * @schema RegistryRepositoryIamMemberSpecForProviderCondition#title
   */
  readonly title: string;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecForProviderCondition' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecForProviderCondition(obj: RegistryRepositoryIamMemberSpecForProviderCondition | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'expression': obj.expression,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderConfigRefPolicy
 */
export interface RegistryRepositoryIamMemberSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecProviderConfigRefPolicy(obj: RegistryRepositoryIamMemberSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderRefPolicy
 */
export interface RegistryRepositoryIamMemberSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositoryIamMemberSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositoryIamMemberSpecProviderRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositoryIamMemberSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecProviderRefPolicy(obj: RegistryRepositoryIamMemberSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef
 */
export interface RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef(obj: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata
 */
export interface RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata(obj: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolution
 */
export enum RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolve
 */
export enum RegistryRepositoryIamMemberSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderRefPolicyResolution
 */
export enum RegistryRepositoryIamMemberSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositoryIamMemberSpecProviderRefPolicyResolve
 */
export enum RegistryRepositoryIamMemberSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy(obj: RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum RegistryRepositoryIamMemberSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

