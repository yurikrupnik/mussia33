// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AssessmentTarget is the Schema for the AssessmentTargets API. Provides an Inspector Classic Assessment Target.
 *
 * @schema AssessmentTarget
 */
export class AssessmentTarget extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AssessmentTarget"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'inspector.aws.upbound.io/v1beta1',
    kind: 'AssessmentTarget',
  }

  /**
   * Renders a Kubernetes manifest for "AssessmentTarget".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AssessmentTargetProps): any {
    return {
      ...AssessmentTarget.GVK,
      ...toJson_AssessmentTargetProps(props),
    };
  }

  /**
   * Defines a "AssessmentTarget" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AssessmentTargetProps) {
    super(scope, id, {
      ...AssessmentTarget.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AssessmentTarget.GVK,
      ...toJson_AssessmentTargetProps(resolved),
    };
  }
}

/**
 * AssessmentTarget is the Schema for the AssessmentTargets API. Provides an Inspector Classic Assessment Target.
 *
 * @schema AssessmentTarget
 */
export interface AssessmentTargetProps {
  /**
   * @schema AssessmentTarget#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AssessmentTargetSpec defines the desired state of AssessmentTarget
   *
   * @schema AssessmentTarget#spec
   */
  readonly spec: AssessmentTargetSpec;

}

/**
 * Converts an object of type 'AssessmentTargetProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetProps(obj: AssessmentTargetProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AssessmentTargetSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AssessmentTargetSpec defines the desired state of AssessmentTarget
 *
 * @schema AssessmentTargetSpec
 */
export interface AssessmentTargetSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema AssessmentTargetSpec#deletionPolicy
   */
  readonly deletionPolicy?: AssessmentTargetSpecDeletionPolicy;

  /**
   * @schema AssessmentTargetSpec#forProvider
   */
  readonly forProvider: AssessmentTargetSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema AssessmentTargetSpec#initProvider
   */
  readonly initProvider?: AssessmentTargetSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema AssessmentTargetSpec#managementPolicies
   */
  readonly managementPolicies?: AssessmentTargetSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AssessmentTargetSpec#providerConfigRef
   */
  readonly providerConfigRef?: AssessmentTargetSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AssessmentTargetSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: AssessmentTargetSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema AssessmentTargetSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AssessmentTargetSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'AssessmentTargetSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpec(obj: AssessmentTargetSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_AssessmentTargetSpecForProvider(obj.forProvider),
    'initProvider': toJson_AssessmentTargetSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_AssessmentTargetSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_AssessmentTargetSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_AssessmentTargetSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema AssessmentTargetSpecDeletionPolicy
 */
export enum AssessmentTargetSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema AssessmentTargetSpecForProvider
 */
export interface AssessmentTargetSpecForProvider {
  /**
   * The name of the assessment target.
   *
   * @schema AssessmentTargetSpecForProvider#name
   */
  readonly name?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema AssessmentTargetSpecForProvider#region
   */
  readonly region: string;

  /**
   * Inspector Resource Group Amazon Resource Name (ARN) stating tags for instance matching. If not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
   *
   * @schema AssessmentTargetSpecForProvider#resourceGroupArn
   */
  readonly resourceGroupArn?: string;

  /**
   * Reference to a ResourceGroup in inspector to populate resourceGroupArn.
   *
   * @schema AssessmentTargetSpecForProvider#resourceGroupArnRef
   */
  readonly resourceGroupArnRef?: AssessmentTargetSpecForProviderResourceGroupArnRef;

  /**
   * Selector for a ResourceGroup in inspector to populate resourceGroupArn.
   *
   * @schema AssessmentTargetSpecForProvider#resourceGroupArnSelector
   */
  readonly resourceGroupArnSelector?: AssessmentTargetSpecForProviderResourceGroupArnSelector;

}

/**
 * Converts an object of type 'AssessmentTargetSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecForProvider(obj: AssessmentTargetSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'region': obj.region,
    'resourceGroupArn': obj.resourceGroupArn,
    'resourceGroupArnRef': toJson_AssessmentTargetSpecForProviderResourceGroupArnRef(obj.resourceGroupArnRef),
    'resourceGroupArnSelector': toJson_AssessmentTargetSpecForProviderResourceGroupArnSelector(obj.resourceGroupArnSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema AssessmentTargetSpecInitProvider
 */
export interface AssessmentTargetSpecInitProvider {
  /**
   * The name of the assessment target.
   *
   * @schema AssessmentTargetSpecInitProvider#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AssessmentTargetSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecInitProvider(obj: AssessmentTargetSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema AssessmentTargetSpecManagementPolicies
 */
export enum AssessmentTargetSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AssessmentTargetSpecProviderConfigRef
 */
export interface AssessmentTargetSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTargetSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTargetSpecProviderConfigRef#policy
   */
  readonly policy?: AssessmentTargetSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTargetSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecProviderConfigRef(obj: AssessmentTargetSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTargetSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsTo
 */
export interface AssessmentTargetSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: AssessmentTargetSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: AssessmentTargetSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'AssessmentTargetSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecPublishConnectionDetailsTo(obj: AssessmentTargetSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_AssessmentTargetSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_AssessmentTargetSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema AssessmentTargetSpecWriteConnectionSecretToRef
 */
export interface AssessmentTargetSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AssessmentTargetSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AssessmentTargetSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'AssessmentTargetSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecWriteConnectionSecretToRef(obj: AssessmentTargetSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a ResourceGroup in inspector to populate resourceGroupArn.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnRef
 */
export interface AssessmentTargetSpecForProviderResourceGroupArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnRef#policy
   */
  readonly policy?: AssessmentTargetSpecForProviderResourceGroupArnRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTargetSpecForProviderResourceGroupArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecForProviderResourceGroupArnRef(obj: AssessmentTargetSpecForProviderResourceGroupArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTargetSpecForProviderResourceGroupArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a ResourceGroup in inspector to populate resourceGroupArn.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnSelector
 */
export interface AssessmentTargetSpecForProviderResourceGroupArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnSelector#policy
   */
  readonly policy?: AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy;

}

/**
 * Converts an object of type 'AssessmentTargetSpecForProviderResourceGroupArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecForProviderResourceGroupArnSelector(obj: AssessmentTargetSpecForProviderResourceGroupArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AssessmentTargetSpecProviderConfigRefPolicy
 */
export interface AssessmentTargetSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTargetSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: AssessmentTargetSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTargetSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: AssessmentTargetSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTargetSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecProviderConfigRefPolicy(obj: AssessmentTargetSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRef
 */
export interface AssessmentTargetSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTargetSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecPublishConnectionDetailsToConfigRef(obj: AssessmentTargetSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsToMetadata
 */
export interface AssessmentTargetSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'AssessmentTargetSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecPublishConnectionDetailsToMetadata(obj: AssessmentTargetSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnRefPolicy
 */
export interface AssessmentTargetSpecForProviderResourceGroupArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnRefPolicy#resolution
   */
  readonly resolution?: AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnRefPolicy#resolve
   */
  readonly resolve?: AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTargetSpecForProviderResourceGroupArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecForProviderResourceGroupArnRefPolicy(obj: AssessmentTargetSpecForProviderResourceGroupArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy
 */
export interface AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy#resolution
   */
  readonly resolution?: AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy#resolve
   */
  readonly resolve?: AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy(obj: AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTargetSpecProviderConfigRefPolicyResolution
 */
export enum AssessmentTargetSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTargetSpecProviderConfigRefPolicyResolve
 */
export enum AssessmentTargetSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy(obj: AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolution
 */
export enum AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolve
 */
export enum AssessmentTargetSpecForProviderResourceGroupArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolution
 */
export enum AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolve
 */
export enum AssessmentTargetSpecForProviderResourceGroupArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum AssessmentTargetSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * AssessmentTemplate is the Schema for the AssessmentTemplates API. Provides an Inspector Classic Assessment Template.
 *
 * @schema AssessmentTemplate
 */
export class AssessmentTemplate extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AssessmentTemplate"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'inspector.aws.upbound.io/v1beta1',
    kind: 'AssessmentTemplate',
  }

  /**
   * Renders a Kubernetes manifest for "AssessmentTemplate".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AssessmentTemplateProps): any {
    return {
      ...AssessmentTemplate.GVK,
      ...toJson_AssessmentTemplateProps(props),
    };
  }

  /**
   * Defines a "AssessmentTemplate" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AssessmentTemplateProps) {
    super(scope, id, {
      ...AssessmentTemplate.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AssessmentTemplate.GVK,
      ...toJson_AssessmentTemplateProps(resolved),
    };
  }
}

/**
 * AssessmentTemplate is the Schema for the AssessmentTemplates API. Provides an Inspector Classic Assessment Template.
 *
 * @schema AssessmentTemplate
 */
export interface AssessmentTemplateProps {
  /**
   * @schema AssessmentTemplate#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AssessmentTemplateSpec defines the desired state of AssessmentTemplate
   *
   * @schema AssessmentTemplate#spec
   */
  readonly spec: AssessmentTemplateSpec;

}

/**
 * Converts an object of type 'AssessmentTemplateProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateProps(obj: AssessmentTemplateProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AssessmentTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AssessmentTemplateSpec defines the desired state of AssessmentTemplate
 *
 * @schema AssessmentTemplateSpec
 */
export interface AssessmentTemplateSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema AssessmentTemplateSpec#deletionPolicy
   */
  readonly deletionPolicy?: AssessmentTemplateSpecDeletionPolicy;

  /**
   * @schema AssessmentTemplateSpec#forProvider
   */
  readonly forProvider: AssessmentTemplateSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema AssessmentTemplateSpec#initProvider
   */
  readonly initProvider?: AssessmentTemplateSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema AssessmentTemplateSpec#managementPolicies
   */
  readonly managementPolicies?: AssessmentTemplateSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AssessmentTemplateSpec#providerConfigRef
   */
  readonly providerConfigRef?: AssessmentTemplateSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AssessmentTemplateSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: AssessmentTemplateSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema AssessmentTemplateSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AssessmentTemplateSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'AssessmentTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpec(obj: AssessmentTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_AssessmentTemplateSpecForProvider(obj.forProvider),
    'initProvider': toJson_AssessmentTemplateSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_AssessmentTemplateSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_AssessmentTemplateSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_AssessmentTemplateSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema AssessmentTemplateSpecDeletionPolicy
 */
export enum AssessmentTemplateSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema AssessmentTemplateSpecForProvider
 */
export interface AssessmentTemplateSpecForProvider {
  /**
   * The duration of the inspector run.
   *
   * @schema AssessmentTemplateSpecForProvider#duration
   */
  readonly duration?: number;

  /**
   * A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
   *
   * @schema AssessmentTemplateSpecForProvider#eventSubscription
   */
  readonly eventSubscription?: AssessmentTemplateSpecForProviderEventSubscription[];

  /**
   * The name of the assessment template.
   *
   * @schema AssessmentTemplateSpecForProvider#name
   */
  readonly name?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema AssessmentTemplateSpecForProvider#region
   */
  readonly region: string;

  /**
   * The rules to be used during the run.
   *
   * @schema AssessmentTemplateSpecForProvider#rulesPackageArns
   */
  readonly rulesPackageArns?: string[];

  /**
   * Key-value map of resource tags.
   *
   * @schema AssessmentTemplateSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * The assessment target ARN to attach the template to.
   *
   * @schema AssessmentTemplateSpecForProvider#targetArn
   */
  readonly targetArn?: string;

  /**
   * Reference to a AssessmentTarget in inspector to populate targetArn.
   *
   * @schema AssessmentTemplateSpecForProvider#targetArnRef
   */
  readonly targetArnRef?: AssessmentTemplateSpecForProviderTargetArnRef;

  /**
   * Selector for a AssessmentTarget in inspector to populate targetArn.
   *
   * @schema AssessmentTemplateSpecForProvider#targetArnSelector
   */
  readonly targetArnSelector?: AssessmentTemplateSpecForProviderTargetArnSelector;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProvider(obj: AssessmentTemplateSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'eventSubscription': obj.eventSubscription?.map(y => toJson_AssessmentTemplateSpecForProviderEventSubscription(y)),
    'name': obj.name,
    'region': obj.region,
    'rulesPackageArns': obj.rulesPackageArns?.map(y => y),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'targetArn': obj.targetArn,
    'targetArnRef': toJson_AssessmentTemplateSpecForProviderTargetArnRef(obj.targetArnRef),
    'targetArnSelector': toJson_AssessmentTemplateSpecForProviderTargetArnSelector(obj.targetArnSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema AssessmentTemplateSpecInitProvider
 */
export interface AssessmentTemplateSpecInitProvider {
  /**
   * The duration of the inspector run.
   *
   * @schema AssessmentTemplateSpecInitProvider#duration
   */
  readonly duration?: number;

  /**
   * A block that enables sending notifications about a specified assessment template event to a designated SNS topic. See Event Subscriptions for details.
   *
   * @schema AssessmentTemplateSpecInitProvider#eventSubscription
   */
  readonly eventSubscription?: AssessmentTemplateSpecInitProviderEventSubscription[];

  /**
   * The name of the assessment template.
   *
   * @schema AssessmentTemplateSpecInitProvider#name
   */
  readonly name?: string;

  /**
   * The rules to be used during the run.
   *
   * @schema AssessmentTemplateSpecInitProvider#rulesPackageArns
   */
  readonly rulesPackageArns?: string[];

  /**
   * Key-value map of resource tags.
   *
   * @schema AssessmentTemplateSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'AssessmentTemplateSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecInitProvider(obj: AssessmentTemplateSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'eventSubscription': obj.eventSubscription?.map(y => toJson_AssessmentTemplateSpecInitProviderEventSubscription(y)),
    'name': obj.name,
    'rulesPackageArns': obj.rulesPackageArns?.map(y => y),
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema AssessmentTemplateSpecManagementPolicies
 */
export enum AssessmentTemplateSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AssessmentTemplateSpecProviderConfigRef
 */
export interface AssessmentTemplateSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTemplateSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTemplateSpecProviderConfigRef#policy
   */
  readonly policy?: AssessmentTemplateSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecProviderConfigRef(obj: AssessmentTemplateSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTemplateSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsTo
 */
export interface AssessmentTemplateSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: AssessmentTemplateSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: AssessmentTemplateSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecPublishConnectionDetailsTo(obj: AssessmentTemplateSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_AssessmentTemplateSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_AssessmentTemplateSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema AssessmentTemplateSpecWriteConnectionSecretToRef
 */
export interface AssessmentTemplateSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AssessmentTemplateSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AssessmentTemplateSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecWriteConnectionSecretToRef(obj: AssessmentTemplateSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AssessmentTemplateSpecForProviderEventSubscription
 */
export interface AssessmentTemplateSpecForProviderEventSubscription {
  /**
   * The event for which you want to receive SNS notifications. Valid values are ASSESSMENT_RUN_STARTED, ASSESSMENT_RUN_COMPLETED, ASSESSMENT_RUN_STATE_CHANGED, and FINDING_REPORTED.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscription#event
   */
  readonly event?: string;

  /**
   * The ARN of the SNS topic to which notifications are sent.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscription#topicArn
   */
  readonly topicArn?: string;

  /**
   * Reference to a Topic in sns to populate topicArn.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscription#topicArnRef
   */
  readonly topicArnRef?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef;

  /**
   * Selector for a Topic in sns to populate topicArn.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscription#topicArnSelector
   */
  readonly topicArnSelector?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderEventSubscription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderEventSubscription(obj: AssessmentTemplateSpecForProviderEventSubscription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'event': obj.event,
    'topicArn': obj.topicArn,
    'topicArnRef': toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef(obj.topicArnRef),
    'topicArnSelector': toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector(obj.topicArnSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a AssessmentTarget in inspector to populate targetArn.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnRef
 */
export interface AssessmentTemplateSpecForProviderTargetArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnRef#policy
   */
  readonly policy?: AssessmentTemplateSpecForProviderTargetArnRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderTargetArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderTargetArnRef(obj: AssessmentTemplateSpecForProviderTargetArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTemplateSpecForProviderTargetArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a AssessmentTarget in inspector to populate targetArn.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnSelector
 */
export interface AssessmentTemplateSpecForProviderTargetArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnSelector#policy
   */
  readonly policy?: AssessmentTemplateSpecForProviderTargetArnSelectorPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderTargetArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderTargetArnSelector(obj: AssessmentTemplateSpecForProviderTargetArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_AssessmentTemplateSpecForProviderTargetArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AssessmentTemplateSpecInitProviderEventSubscription
 */
export interface AssessmentTemplateSpecInitProviderEventSubscription {
  /**
   * The event for which you want to receive SNS notifications. Valid values are ASSESSMENT_RUN_STARTED, ASSESSMENT_RUN_COMPLETED, ASSESSMENT_RUN_STATE_CHANGED, and FINDING_REPORTED.
   *
   * @schema AssessmentTemplateSpecInitProviderEventSubscription#event
   */
  readonly event?: string;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecInitProviderEventSubscription' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecInitProviderEventSubscription(obj: AssessmentTemplateSpecInitProviderEventSubscription | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'event': obj.event,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AssessmentTemplateSpecProviderConfigRefPolicy
 */
export interface AssessmentTemplateSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecProviderConfigRefPolicy(obj: AssessmentTemplateSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRef
 */
export interface AssessmentTemplateSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecPublishConnectionDetailsToConfigRef(obj: AssessmentTemplateSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsToMetadata
 */
export interface AssessmentTemplateSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecPublishConnectionDetailsToMetadata(obj: AssessmentTemplateSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Topic in sns to populate topicArn.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef
 */
export interface AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef#policy
   */
  readonly policy?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef(obj: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Topic in sns to populate topicArn.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector
 */
export interface AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector#policy
   */
  readonly policy?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector(obj: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnRefPolicy
 */
export interface AssessmentTemplateSpecForProviderTargetArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnRefPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecForProviderTargetArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnRefPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecForProviderTargetArnRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderTargetArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderTargetArnRefPolicy(obj: AssessmentTemplateSpecForProviderTargetArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnSelectorPolicy
 */
export interface AssessmentTemplateSpecForProviderTargetArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnSelectorPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecForProviderTargetArnSelectorPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderTargetArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderTargetArnSelectorPolicy(obj: AssessmentTemplateSpecForProviderTargetArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecProviderConfigRefPolicyResolution
 */
export enum AssessmentTemplateSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecProviderConfigRefPolicyResolve
 */
export enum AssessmentTemplateSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy(obj: AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy
 */
export interface AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy(obj: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy
 */
export interface AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy#resolution
   */
  readonly resolution?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy#resolve
   */
  readonly resolve?: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolve;

}

/**
 * Converts an object of type 'AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy(obj: AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnRefPolicyResolution
 */
export enum AssessmentTemplateSpecForProviderTargetArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnRefPolicyResolve
 */
export enum AssessmentTemplateSpecForProviderTargetArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolution
 */
export enum AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolve
 */
export enum AssessmentTemplateSpecForProviderTargetArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum AssessmentTemplateSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolution
 */
export enum AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolve
 */
export enum AssessmentTemplateSpecForProviderEventSubscriptionTopicArnRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolution
 */
export enum AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolve
 */
export enum AssessmentTemplateSpecForProviderEventSubscriptionTopicArnSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * ResourceGroup is the Schema for the ResourceGroups API. Provides an Amazon Inspector Classic Resource Group.
 *
 * @schema ResourceGroup
 */
export class ResourceGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ResourceGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'inspector.aws.upbound.io/v1beta1',
    kind: 'ResourceGroup',
  }

  /**
   * Renders a Kubernetes manifest for "ResourceGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ResourceGroupProps): any {
    return {
      ...ResourceGroup.GVK,
      ...toJson_ResourceGroupProps(props),
    };
  }

  /**
   * Defines a "ResourceGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ResourceGroupProps) {
    super(scope, id, {
      ...ResourceGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ResourceGroup.GVK,
      ...toJson_ResourceGroupProps(resolved),
    };
  }
}

/**
 * ResourceGroup is the Schema for the ResourceGroups API. Provides an Amazon Inspector Classic Resource Group.
 *
 * @schema ResourceGroup
 */
export interface ResourceGroupProps {
  /**
   * @schema ResourceGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ResourceGroupSpec defines the desired state of ResourceGroup
   *
   * @schema ResourceGroup#spec
   */
  readonly spec: ResourceGroupSpec;

}

/**
 * Converts an object of type 'ResourceGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupProps(obj: ResourceGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ResourceGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceGroupSpec defines the desired state of ResourceGroup
 *
 * @schema ResourceGroupSpec
 */
export interface ResourceGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ResourceGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: ResourceGroupSpecDeletionPolicy;

  /**
   * @schema ResourceGroupSpec#forProvider
   */
  readonly forProvider: ResourceGroupSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ResourceGroupSpec#initProvider
   */
  readonly initProvider?: ResourceGroupSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ResourceGroupSpec#managementPolicies
   */
  readonly managementPolicies?: ResourceGroupSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ResourceGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: ResourceGroupSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ResourceGroupSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ResourceGroupSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ResourceGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ResourceGroupSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ResourceGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpec(obj: ResourceGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ResourceGroupSpecForProvider(obj.forProvider),
    'initProvider': toJson_ResourceGroupSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ResourceGroupSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ResourceGroupSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ResourceGroupSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ResourceGroupSpecDeletionPolicy
 */
export enum ResourceGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ResourceGroupSpecForProvider
 */
export interface ResourceGroupSpecForProvider {
  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema ResourceGroupSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ResourceGroupSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ResourceGroupSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecForProvider(obj: ResourceGroupSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ResourceGroupSpecInitProvider
 */
export interface ResourceGroupSpecInitProvider {
  /**
   * Key-value map of resource tags.
   *
   * @schema ResourceGroupSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ResourceGroupSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecInitProvider(obj: ResourceGroupSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ResourceGroupSpecManagementPolicies
 */
export enum ResourceGroupSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ResourceGroupSpecProviderConfigRef
 */
export interface ResourceGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResourceGroupSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResourceGroupSpecProviderConfigRef#policy
   */
  readonly policy?: ResourceGroupSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ResourceGroupSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecProviderConfigRef(obj: ResourceGroupSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResourceGroupSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsTo
 */
export interface ResourceGroupSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ResourceGroupSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ResourceGroupSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ResourceGroupSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecPublishConnectionDetailsTo(obj: ResourceGroupSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ResourceGroupSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ResourceGroupSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ResourceGroupSpecWriteConnectionSecretToRef
 */
export interface ResourceGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ResourceGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ResourceGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ResourceGroupSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecWriteConnectionSecretToRef(obj: ResourceGroupSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ResourceGroupSpecProviderConfigRefPolicy
 */
export interface ResourceGroupSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceGroupSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ResourceGroupSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceGroupSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ResourceGroupSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResourceGroupSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecProviderConfigRefPolicy(obj: ResourceGroupSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRef
 */
export interface ResourceGroupSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ResourceGroupSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecPublishConnectionDetailsToConfigRef(obj: ResourceGroupSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsToMetadata
 */
export interface ResourceGroupSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ResourceGroupSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecPublishConnectionDetailsToMetadata(obj: ResourceGroupSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceGroupSpecProviderConfigRefPolicyResolution
 */
export enum ResourceGroupSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceGroupSpecProviderConfigRefPolicyResolve
 */
export enum ResourceGroupSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy(obj: ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ResourceGroupSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

