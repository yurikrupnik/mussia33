// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Connector is the Schema for the Connectors API. Serverless VPC Access connector resource.
 *
 * @schema Connector
 */
export class Connector extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Connector"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'vpcaccess.gcp.upbound.io/v1beta1',
    kind: 'Connector',
  }

  /**
   * Renders a Kubernetes manifest for "Connector".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConnectorProps): any {
    return {
      ...Connector.GVK,
      ...toJson_ConnectorProps(props),
    };
  }

  /**
   * Defines a "Connector" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConnectorProps) {
    super(scope, id, {
      ...Connector.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Connector.GVK,
      ...toJson_ConnectorProps(resolved),
    };
  }
}

/**
 * Connector is the Schema for the Connectors API. Serverless VPC Access connector resource.
 *
 * @schema Connector
 */
export interface ConnectorProps {
  /**
   * @schema Connector#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ConnectorSpec defines the desired state of Connector
   *
   * @schema Connector#spec
   */
  readonly spec: ConnectorSpec;

}

/**
 * Converts an object of type 'ConnectorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorProps(obj: ConnectorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ConnectorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConnectorSpec defines the desired state of Connector
 *
 * @schema ConnectorSpec
 */
export interface ConnectorSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ConnectorSpec#deletionPolicy
   */
  readonly deletionPolicy?: ConnectorSpecDeletionPolicy;

  /**
   * @schema ConnectorSpec#forProvider
   */
  readonly forProvider: ConnectorSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ConnectorSpec#initProvider
   */
  readonly initProvider?: ConnectorSpecInitProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ConnectorSpec#managementPolicies
   */
  readonly managementPolicies?: ConnectorSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ConnectorSpec#providerConfigRef
   */
  readonly providerConfigRef?: ConnectorSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ConnectorSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ConnectorSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ConnectorSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ConnectorSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ConnectorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpec(obj: ConnectorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ConnectorSpecForProvider(obj.forProvider),
    'initProvider': toJson_ConnectorSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ConnectorSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ConnectorSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ConnectorSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ConnectorSpecDeletionPolicy
 */
export enum ConnectorSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ConnectorSpecForProvider
 */
export interface ConnectorSpecForProvider {
  /**
   * The range of internal addresses that follows RFC 4632 notation. Example: 10.132.0.0/28.
   *
   * @schema ConnectorSpecForProvider#ipCidrRange
   */
  readonly ipCidrRange?: string;

  /**
   * Machine type of VM Instance underlying connector. Default is e2-micro
   *
   * @default e2-micro
   * @schema ConnectorSpecForProvider#machineType
   */
  readonly machineType?: string;

  /**
   * Maximum value of instances in autoscaling group underlying the connector.
   *
   * @schema ConnectorSpecForProvider#maxInstances
   */
  readonly maxInstances?: number;

  /**
   * Maximum throughput of the connector in Mbps, must be greater than min_throughput. Default is 300.
   *
   * @default 300.
   * @schema ConnectorSpecForProvider#maxThroughput
   */
  readonly maxThroughput?: number;

  /**
   * Minimum value of instances in autoscaling group underlying the connector.
   *
   * @schema ConnectorSpecForProvider#minInstances
   */
  readonly minInstances?: number;

  /**
   * Minimum throughput of the connector in Mbps. Default and min is 200.
   *
   * @schema ConnectorSpecForProvider#minThroughput
   */
  readonly minThroughput?: number;

  /**
   * Name or self_link of the VPC network. Required if ip_cidr_range is set.
   *
   * @schema ConnectorSpecForProvider#network
   */
  readonly network?: string;

  /**
   * Reference to a Network in compute to populate network.
   *
   * @schema ConnectorSpecForProvider#networkRef
   */
  readonly networkRef?: ConnectorSpecForProviderNetworkRef;

  /**
   * Selector for a Network in compute to populate network.
   *
   * @schema ConnectorSpecForProvider#networkSelector
   */
  readonly networkSelector?: ConnectorSpecForProviderNetworkSelector;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema ConnectorSpecForProvider#project
   */
  readonly project?: string;

  /**
   * Region where the VPC Access connector resides. If it is not provided, the provider region is used.
   *
   * @schema ConnectorSpecForProvider#region
   */
  readonly region: string;

  /**
   * The subnet in which to house the connector Structure is documented below.
   *
   * @schema ConnectorSpecForProvider#subnet
   */
  readonly subnet?: ConnectorSpecForProviderSubnet[];

}

/**
 * Converts an object of type 'ConnectorSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProvider(obj: ConnectorSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipCidrRange': obj.ipCidrRange,
    'machineType': obj.machineType,
    'maxInstances': obj.maxInstances,
    'maxThroughput': obj.maxThroughput,
    'minInstances': obj.minInstances,
    'minThroughput': obj.minThroughput,
    'network': obj.network,
    'networkRef': toJson_ConnectorSpecForProviderNetworkRef(obj.networkRef),
    'networkSelector': toJson_ConnectorSpecForProviderNetworkSelector(obj.networkSelector),
    'project': obj.project,
    'region': obj.region,
    'subnet': obj.subnet?.map(y => toJson_ConnectorSpecForProviderSubnet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ConnectorSpecInitProvider
 */
export interface ConnectorSpecInitProvider {
  /**
   * The range of internal addresses that follows RFC 4632 notation. Example: 10.132.0.0/28.
   *
   * @schema ConnectorSpecInitProvider#ipCidrRange
   */
  readonly ipCidrRange?: string;

  /**
   * Machine type of VM Instance underlying connector. Default is e2-micro
   *
   * @default e2-micro
   * @schema ConnectorSpecInitProvider#machineType
   */
  readonly machineType?: string;

  /**
   * Maximum value of instances in autoscaling group underlying the connector.
   *
   * @schema ConnectorSpecInitProvider#maxInstances
   */
  readonly maxInstances?: number;

  /**
   * Maximum throughput of the connector in Mbps, must be greater than min_throughput. Default is 300.
   *
   * @default 300.
   * @schema ConnectorSpecInitProvider#maxThroughput
   */
  readonly maxThroughput?: number;

  /**
   * Minimum value of instances in autoscaling group underlying the connector.
   *
   * @schema ConnectorSpecInitProvider#minInstances
   */
  readonly minInstances?: number;

  /**
   * Minimum throughput of the connector in Mbps. Default and min is 200.
   *
   * @schema ConnectorSpecInitProvider#minThroughput
   */
  readonly minThroughput?: number;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema ConnectorSpecInitProvider#project
   */
  readonly project?: string;

  /**
   * The subnet in which to house the connector Structure is documented below.
   *
   * @schema ConnectorSpecInitProvider#subnet
   */
  readonly subnet?: ConnectorSpecInitProviderSubnet[];

}

/**
 * Converts an object of type 'ConnectorSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecInitProvider(obj: ConnectorSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipCidrRange': obj.ipCidrRange,
    'machineType': obj.machineType,
    'maxInstances': obj.maxInstances,
    'maxThroughput': obj.maxThroughput,
    'minInstances': obj.minInstances,
    'minThroughput': obj.minThroughput,
    'project': obj.project,
    'subnet': obj.subnet?.map(y => toJson_ConnectorSpecInitProviderSubnet(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ConnectorSpecManagementPolicies
 */
export enum ConnectorSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ConnectorSpecProviderConfigRef
 */
export interface ConnectorSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConnectorSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ConnectorSpecProviderConfigRef#policy
   */
  readonly policy?: ConnectorSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecProviderConfigRef(obj: ConnectorSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ConnectorSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ConnectorSpecPublishConnectionDetailsTo
 */
export interface ConnectorSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ConnectorSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ConnectorSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ConnectorSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ConnectorSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ConnectorSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ConnectorSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecPublishConnectionDetailsTo(obj: ConnectorSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ConnectorSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ConnectorSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ConnectorSpecWriteConnectionSecretToRef
 */
export interface ConnectorSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ConnectorSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ConnectorSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ConnectorSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecWriteConnectionSecretToRef(obj: ConnectorSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Network in compute to populate network.
 *
 * @schema ConnectorSpecForProviderNetworkRef
 */
export interface ConnectorSpecForProviderNetworkRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConnectorSpecForProviderNetworkRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ConnectorSpecForProviderNetworkRef#policy
   */
  readonly policy?: ConnectorSpecForProviderNetworkRefPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderNetworkRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderNetworkRef(obj: ConnectorSpecForProviderNetworkRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ConnectorSpecForProviderNetworkRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Network in compute to populate network.
 *
 * @schema ConnectorSpecForProviderNetworkSelector
 */
export interface ConnectorSpecForProviderNetworkSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ConnectorSpecForProviderNetworkSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ConnectorSpecForProviderNetworkSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ConnectorSpecForProviderNetworkSelector#policy
   */
  readonly policy?: ConnectorSpecForProviderNetworkSelectorPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderNetworkSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderNetworkSelector(obj: ConnectorSpecForProviderNetworkSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ConnectorSpecForProviderNetworkSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ConnectorSpecForProviderSubnet
 */
export interface ConnectorSpecForProviderSubnet {
  /**
   * Subnet name (relative, not fully qualified). E.g. if the full subnet selfLink is https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetName} the correct input for this field would be {subnetName}"
   *
   * @schema ConnectorSpecForProviderSubnet#name
   */
  readonly name?: string;

  /**
   * Reference to a Subnetwork in compute to populate name.
   *
   * @schema ConnectorSpecForProviderSubnet#nameRef
   */
  readonly nameRef?: ConnectorSpecForProviderSubnetNameRef;

  /**
   * Selector for a Subnetwork in compute to populate name.
   *
   * @schema ConnectorSpecForProviderSubnet#nameSelector
   */
  readonly nameSelector?: ConnectorSpecForProviderSubnetNameSelector;

  /**
   * Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.
   *
   * @schema ConnectorSpecForProviderSubnet#projectId
   */
  readonly projectId?: string;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderSubnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderSubnet(obj: ConnectorSpecForProviderSubnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'nameRef': toJson_ConnectorSpecForProviderSubnetNameRef(obj.nameRef),
    'nameSelector': toJson_ConnectorSpecForProviderSubnetNameSelector(obj.nameSelector),
    'projectId': obj.projectId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ConnectorSpecInitProviderSubnet
 */
export interface ConnectorSpecInitProviderSubnet {
  /**
   * Project in which the subnet exists. If not set, this project is assumed to be the project for which the connector create request was issued.
   *
   * @schema ConnectorSpecInitProviderSubnet#projectId
   */
  readonly projectId?: string;

}

/**
 * Converts an object of type 'ConnectorSpecInitProviderSubnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecInitProviderSubnet(obj: ConnectorSpecInitProviderSubnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'projectId': obj.projectId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ConnectorSpecProviderConfigRefPolicy
 */
export interface ConnectorSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ConnectorSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ConnectorSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecProviderConfigRefPolicy(obj: ConnectorSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ConnectorSpecPublishConnectionDetailsToConfigRef
 */
export interface ConnectorSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ConnectorSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecPublishConnectionDetailsToConfigRef(obj: ConnectorSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ConnectorSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ConnectorSpecPublishConnectionDetailsToMetadata
 */
export interface ConnectorSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ConnectorSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecPublishConnectionDetailsToMetadata(obj: ConnectorSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ConnectorSpecForProviderNetworkRefPolicy
 */
export interface ConnectorSpecForProviderNetworkRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecForProviderNetworkRefPolicy#resolution
   */
  readonly resolution?: ConnectorSpecForProviderNetworkRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecForProviderNetworkRefPolicy#resolve
   */
  readonly resolve?: ConnectorSpecForProviderNetworkRefPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderNetworkRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderNetworkRefPolicy(obj: ConnectorSpecForProviderNetworkRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ConnectorSpecForProviderNetworkSelectorPolicy
 */
export interface ConnectorSpecForProviderNetworkSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecForProviderNetworkSelectorPolicy#resolution
   */
  readonly resolution?: ConnectorSpecForProviderNetworkSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecForProviderNetworkSelectorPolicy#resolve
   */
  readonly resolve?: ConnectorSpecForProviderNetworkSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderNetworkSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderNetworkSelectorPolicy(obj: ConnectorSpecForProviderNetworkSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Subnetwork in compute to populate name.
 *
 * @schema ConnectorSpecForProviderSubnetNameRef
 */
export interface ConnectorSpecForProviderSubnetNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConnectorSpecForProviderSubnetNameRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ConnectorSpecForProviderSubnetNameRef#policy
   */
  readonly policy?: ConnectorSpecForProviderSubnetNameRefPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderSubnetNameRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderSubnetNameRef(obj: ConnectorSpecForProviderSubnetNameRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ConnectorSpecForProviderSubnetNameRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Subnetwork in compute to populate name.
 *
 * @schema ConnectorSpecForProviderSubnetNameSelector
 */
export interface ConnectorSpecForProviderSubnetNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ConnectorSpecForProviderSubnetNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ConnectorSpecForProviderSubnetNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ConnectorSpecForProviderSubnetNameSelector#policy
   */
  readonly policy?: ConnectorSpecForProviderSubnetNameSelectorPolicy;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderSubnetNameSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderSubnetNameSelector(obj: ConnectorSpecForProviderSubnetNameSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ConnectorSpecForProviderSubnetNameSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecProviderConfigRefPolicyResolution
 */
export enum ConnectorSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecProviderConfigRefPolicyResolve
 */
export enum ConnectorSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ConnectorSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ConnectorSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecPublishConnectionDetailsToConfigRefPolicy(obj: ConnectorSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecForProviderNetworkRefPolicyResolution
 */
export enum ConnectorSpecForProviderNetworkRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecForProviderNetworkRefPolicyResolve
 */
export enum ConnectorSpecForProviderNetworkRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecForProviderNetworkSelectorPolicyResolution
 */
export enum ConnectorSpecForProviderNetworkSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecForProviderNetworkSelectorPolicyResolve
 */
export enum ConnectorSpecForProviderNetworkSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ConnectorSpecForProviderSubnetNameRefPolicy
 */
export interface ConnectorSpecForProviderSubnetNameRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecForProviderSubnetNameRefPolicy#resolution
   */
  readonly resolution?: ConnectorSpecForProviderSubnetNameRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecForProviderSubnetNameRefPolicy#resolve
   */
  readonly resolve?: ConnectorSpecForProviderSubnetNameRefPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderSubnetNameRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderSubnetNameRefPolicy(obj: ConnectorSpecForProviderSubnetNameRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ConnectorSpecForProviderSubnetNameSelectorPolicy
 */
export interface ConnectorSpecForProviderSubnetNameSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ConnectorSpecForProviderSubnetNameSelectorPolicy#resolution
   */
  readonly resolution?: ConnectorSpecForProviderSubnetNameSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ConnectorSpecForProviderSubnetNameSelectorPolicy#resolve
   */
  readonly resolve?: ConnectorSpecForProviderSubnetNameSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ConnectorSpecForProviderSubnetNameSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConnectorSpecForProviderSubnetNameSelectorPolicy(obj: ConnectorSpecForProviderSubnetNameSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ConnectorSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecForProviderSubnetNameRefPolicyResolution
 */
export enum ConnectorSpecForProviderSubnetNameRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecForProviderSubnetNameRefPolicyResolve
 */
export enum ConnectorSpecForProviderSubnetNameRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ConnectorSpecForProviderSubnetNameSelectorPolicyResolution
 */
export enum ConnectorSpecForProviderSubnetNameSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ConnectorSpecForProviderSubnetNameSelectorPolicyResolve
 */
export enum ConnectorSpecForProviderSubnetNameSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

