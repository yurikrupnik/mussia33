// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema TrafficSplit
 */
export class TrafficSplit extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TrafficSplit"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'split.smi-spec.io/v1alpha4',
    kind: 'TrafficSplit',
  }

  /**
   * Renders a Kubernetes manifest for "TrafficSplit".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TrafficSplitProps = {}): any {
    return {
      ...TrafficSplit.GVK,
      ...toJson_TrafficSplitProps(props),
    };
  }

  /**
   * Defines a "TrafficSplit" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TrafficSplitProps = {}) {
    super(scope, id, {
      ...TrafficSplit.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TrafficSplit.GVK,
      ...toJson_TrafficSplitProps(resolved),
    };
  }
}

/**
 * @schema TrafficSplit
 */
export interface TrafficSplitProps {
  /**
   * @schema TrafficSplit#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema TrafficSplit#spec
   */
  readonly spec?: TrafficSplitSpec;

}

/**
 * Converts an object of type 'TrafficSplitProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitProps(obj: TrafficSplitProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TrafficSplitSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitSpec
 */
export interface TrafficSplitSpec {
  /**
   * The backend services of this split.
   *
   * @schema TrafficSplitSpec#backends
   */
  readonly backends: TrafficSplitSpecBackends[];

  /**
   * The HTTP route groups that this traffic split should match.
   *
   * @schema TrafficSplitSpec#matches
   */
  readonly matches?: TrafficSplitSpecMatches[];

  /**
   * The apex service of this split.
   *
   * @schema TrafficSplitSpec#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'TrafficSplitSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitSpec(obj: TrafficSplitSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backends': obj.backends?.map(y => toJson_TrafficSplitSpecBackends(y)),
    'matches': obj.matches?.map(y => toJson_TrafficSplitSpecMatches(y)),
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitSpecBackends
 */
export interface TrafficSplitSpecBackends {
  /**
   * Name of the Kubernetes service.
   *
   * @schema TrafficSplitSpecBackends#service
   */
  readonly service: string;

  /**
   * Traffic weight value of this backend.
   *
   * @schema TrafficSplitSpecBackends#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'TrafficSplitSpecBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitSpecBackends(obj: TrafficSplitSpecBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': obj.service,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitSpecMatches
 */
export interface TrafficSplitSpecMatches {
  /**
   * Kind of the matching group.
   *
   * @schema TrafficSplitSpecMatches#kind
   */
  readonly kind: TrafficSplitSpecMatchesKind;

  /**
   * Name of the matching group.
   *
   * @schema TrafficSplitSpecMatches#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'TrafficSplitSpecMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitSpecMatches(obj: TrafficSplitSpecMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kind of the matching group.
 *
 * @schema TrafficSplitSpecMatchesKind
 */
export enum TrafficSplitSpecMatchesKind {
  /** HTTPRouteGroup */
  HTTP_ROUTE_GROUP = "HTTPRouteGroup",
}


/**
 *
 *
 * @schema TrafficSplitV1Alpha3
 */
export class TrafficSplitV1Alpha3 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TrafficSplitV1Alpha3"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'split.smi-spec.io/v1alpha3',
    kind: 'TrafficSplit',
  }

  /**
   * Renders a Kubernetes manifest for "TrafficSplitV1Alpha3".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TrafficSplitV1Alpha3Props = {}): any {
    return {
      ...TrafficSplitV1Alpha3.GVK,
      ...toJson_TrafficSplitV1Alpha3Props(props),
    };
  }

  /**
   * Defines a "TrafficSplitV1Alpha3" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TrafficSplitV1Alpha3Props = {}) {
    super(scope, id, {
      ...TrafficSplitV1Alpha3.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TrafficSplitV1Alpha3.GVK,
      ...toJson_TrafficSplitV1Alpha3Props(resolved),
    };
  }
}

/**
 * @schema TrafficSplitV1Alpha3
 */
export interface TrafficSplitV1Alpha3Props {
  /**
   * @schema TrafficSplitV1Alpha3#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema TrafficSplitV1Alpha3#spec
   */
  readonly spec?: TrafficSplitV1Alpha3Spec;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha3Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha3Props(obj: TrafficSplitV1Alpha3Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TrafficSplitV1Alpha3Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitV1Alpha3Spec
 */
export interface TrafficSplitV1Alpha3Spec {
  /**
   * The backend services of this split.
   *
   * @schema TrafficSplitV1Alpha3Spec#backends
   */
  readonly backends: TrafficSplitV1Alpha3SpecBackends[];

  /**
   * The HTTP route groups that this traffic split should match.
   *
   * @schema TrafficSplitV1Alpha3Spec#matches
   */
  readonly matches?: TrafficSplitV1Alpha3SpecMatches[];

  /**
   * The apex service of this split.
   *
   * @schema TrafficSplitV1Alpha3Spec#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha3Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha3Spec(obj: TrafficSplitV1Alpha3Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backends': obj.backends?.map(y => toJson_TrafficSplitV1Alpha3SpecBackends(y)),
    'matches': obj.matches?.map(y => toJson_TrafficSplitV1Alpha3SpecMatches(y)),
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitV1Alpha3SpecBackends
 */
export interface TrafficSplitV1Alpha3SpecBackends {
  /**
   * Name of the Kubernetes service.
   *
   * @schema TrafficSplitV1Alpha3SpecBackends#service
   */
  readonly service: string;

  /**
   * Traffic weight value of this backend.
   *
   * @schema TrafficSplitV1Alpha3SpecBackends#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha3SpecBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha3SpecBackends(obj: TrafficSplitV1Alpha3SpecBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': obj.service,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitV1Alpha3SpecMatches
 */
export interface TrafficSplitV1Alpha3SpecMatches {
  /**
   * Kind of the matching group.
   *
   * @schema TrafficSplitV1Alpha3SpecMatches#kind
   */
  readonly kind: TrafficSplitV1Alpha3SpecMatchesKind;

  /**
   * Name of the matching group.
   *
   * @schema TrafficSplitV1Alpha3SpecMatches#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha3SpecMatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha3SpecMatches(obj: TrafficSplitV1Alpha3SpecMatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kind of the matching group.
 *
 * @schema TrafficSplitV1Alpha3SpecMatchesKind
 */
export enum TrafficSplitV1Alpha3SpecMatchesKind {
  /** HTTPRouteGroup */
  HTTP_ROUTE_GROUP = "HTTPRouteGroup",
}


/**
 *
 *
 * @schema TrafficSplitV1Alpha2
 */
export class TrafficSplitV1Alpha2 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "TrafficSplitV1Alpha2"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'split.smi-spec.io/v1alpha2',
    kind: 'TrafficSplit',
  }

  /**
   * Renders a Kubernetes manifest for "TrafficSplitV1Alpha2".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TrafficSplitV1Alpha2Props = {}): any {
    return {
      ...TrafficSplitV1Alpha2.GVK,
      ...toJson_TrafficSplitV1Alpha2Props(props),
    };
  }

  /**
   * Defines a "TrafficSplitV1Alpha2" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TrafficSplitV1Alpha2Props = {}) {
    super(scope, id, {
      ...TrafficSplitV1Alpha2.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...TrafficSplitV1Alpha2.GVK,
      ...toJson_TrafficSplitV1Alpha2Props(resolved),
    };
  }
}

/**
 * @schema TrafficSplitV1Alpha2
 */
export interface TrafficSplitV1Alpha2Props {
  /**
   * @schema TrafficSplitV1Alpha2#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema TrafficSplitV1Alpha2#spec
   */
  readonly spec?: TrafficSplitV1Alpha2Spec;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha2Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha2Props(obj: TrafficSplitV1Alpha2Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TrafficSplitV1Alpha2Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitV1Alpha2Spec
 */
export interface TrafficSplitV1Alpha2Spec {
  /**
   * The backend services of this split.
   *
   * @schema TrafficSplitV1Alpha2Spec#backends
   */
  readonly backends: TrafficSplitV1Alpha2SpecBackends[];

  /**
   * The apex service of this split.
   *
   * @schema TrafficSplitV1Alpha2Spec#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha2Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha2Spec(obj: TrafficSplitV1Alpha2Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backends': obj.backends?.map(y => toJson_TrafficSplitV1Alpha2SpecBackends(y)),
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TrafficSplitV1Alpha2SpecBackends
 */
export interface TrafficSplitV1Alpha2SpecBackends {
  /**
   * Name of the Kubernetes service.
   *
   * @schema TrafficSplitV1Alpha2SpecBackends#service
   */
  readonly service: string;

  /**
   * Traffic weight value of this backend.
   *
   * @schema TrafficSplitV1Alpha2SpecBackends#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'TrafficSplitV1Alpha2SpecBackends' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TrafficSplitV1Alpha2SpecBackends(obj: TrafficSplitV1Alpha2SpecBackends | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'service': obj.service,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

