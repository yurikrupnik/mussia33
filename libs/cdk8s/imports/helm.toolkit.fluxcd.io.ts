// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * HelmRelease is the Schema for the helmreleases API
 *
 * @schema HelmRelease
 */
export class HelmRelease extends ApiObject {
  /**
   * Returns the apiVersion and kind for "HelmRelease"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'helm.toolkit.fluxcd.io/v2beta1',
    kind: 'HelmRelease',
  }

  /**
   * Renders a Kubernetes manifest for "HelmRelease".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: HelmReleaseProps = {}): any {
    return {
      ...HelmRelease.GVK,
      ...toJson_HelmReleaseProps(props),
    };
  }

  /**
   * Defines a "HelmRelease" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: HelmReleaseProps = {}) {
    super(scope, id, {
      ...HelmRelease.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...HelmRelease.GVK,
      ...toJson_HelmReleaseProps(resolved),
    };
  }
}

/**
 * HelmRelease is the Schema for the helmreleases API
 *
 * @schema HelmRelease
 */
export interface HelmReleaseProps {
  /**
   * @schema HelmRelease#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * HelmReleaseSpec defines the desired state of a Helm release.
   *
   * @schema HelmRelease#spec
   */
  readonly spec?: HelmReleaseSpec;

}

/**
 * Converts an object of type 'HelmReleaseProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseProps(obj: HelmReleaseProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_HelmReleaseSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmReleaseSpec defines the desired state of a Helm release.
 *
 * @schema HelmReleaseSpec
 */
export interface HelmReleaseSpec {
  /**
   * Chart defines the template of the v1beta1.HelmChart that should be created for this HelmRelease.
   *
   * @schema HelmReleaseSpec#chart
   */
  readonly chart: HelmReleaseSpecChart;

  /**
   * DependsOn may contain a dependency.CrossNamespaceDependencyReference slice with references to HelmRelease resources that must be ready before this HelmRelease can be reconciled.
   *
   * @schema HelmReleaseSpec#dependsOn
   */
  readonly dependsOn?: HelmReleaseSpecDependsOn[];

  /**
   * Install holds the configuration for Helm install actions for this HelmRelease.
   *
   * @schema HelmReleaseSpec#install
   */
  readonly install?: HelmReleaseSpecInstall;

  /**
   * Interval at which to reconcile the Helm release.
   *
   * @schema HelmReleaseSpec#interval
   */
  readonly interval: string;

  /**
   * KubeConfig for reconciling the HelmRelease on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName.
   *
   * @schema HelmReleaseSpec#kubeConfig
   */
  readonly kubeConfig?: HelmReleaseSpecKubeConfig;

  /**
   * MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited number of revisions; defaults to '10'.
   *
   * @schema HelmReleaseSpec#maxHistory
   */
  readonly maxHistory?: number;

  /**
   * PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their definition.
   *
   * @schema HelmReleaseSpec#postRenderers
   */
  readonly postRenderers?: HelmReleaseSpecPostRenderers[];

  /**
   * ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
   *
   * @default a composition of '[TargetNamespace-]Name'.
   * @schema HelmReleaseSpec#releaseName
   */
  readonly releaseName?: string;

  /**
   * Rollback holds the configuration for Helm rollback actions for this HelmRelease.
   *
   * @schema HelmReleaseSpec#rollback
   */
  readonly rollback?: HelmReleaseSpecRollback;

  /**
   * The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
   *
   * @schema HelmReleaseSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
   *
   * @default the namespace of the HelmRelease.
   * @schema HelmReleaseSpec#storageNamespace
   */
  readonly storageNamespace?: string;

  /**
   * Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to already started reconciliations. Defaults to false.
   *
   * @default false.
   * @schema HelmReleaseSpec#suspend
   */
  readonly suspend?: boolean;

  /**
   * TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace of the HelmRelease.
   *
   * @default the namespace of the HelmRelease.
   * @schema HelmReleaseSpec#targetNamespace
   */
  readonly targetNamespace?: string;

  /**
   * Test holds the configuration for Helm test actions for this HelmRelease.
   *
   * @schema HelmReleaseSpec#test
   */
  readonly test?: HelmReleaseSpecTest;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm action. Defaults to '5m0s'.
   *
   * @default 5m0s'.
   * @schema HelmReleaseSpec#timeout
   */
  readonly timeout?: string;

  /**
   * Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
   *
   * @schema HelmReleaseSpec#uninstall
   */
  readonly uninstall?: HelmReleaseSpecUninstall;

  /**
   * Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
   *
   * @schema HelmReleaseSpec#upgrade
   */
  readonly upgrade?: HelmReleaseSpecUpgrade;

  /**
   * Values holds the values for this Helm release.
   *
   * @schema HelmReleaseSpec#values
   */
  readonly values?: any;

  /**
   * ValuesFrom holds references to resources containing Helm values for this HelmRelease, and information about how they should be merged.
   *
   * @schema HelmReleaseSpec#valuesFrom
   */
  readonly valuesFrom?: HelmReleaseSpecValuesFrom[];

}

/**
 * Converts an object of type 'HelmReleaseSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpec(obj: HelmReleaseSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': toJson_HelmReleaseSpecChart(obj.chart),
    'dependsOn': obj.dependsOn?.map(y => toJson_HelmReleaseSpecDependsOn(y)),
    'install': toJson_HelmReleaseSpecInstall(obj.install),
    'interval': obj.interval,
    'kubeConfig': toJson_HelmReleaseSpecKubeConfig(obj.kubeConfig),
    'maxHistory': obj.maxHistory,
    'postRenderers': obj.postRenderers?.map(y => toJson_HelmReleaseSpecPostRenderers(y)),
    'releaseName': obj.releaseName,
    'rollback': toJson_HelmReleaseSpecRollback(obj.rollback),
    'serviceAccountName': obj.serviceAccountName,
    'storageNamespace': obj.storageNamespace,
    'suspend': obj.suspend,
    'targetNamespace': obj.targetNamespace,
    'test': toJson_HelmReleaseSpecTest(obj.test),
    'timeout': obj.timeout,
    'uninstall': toJson_HelmReleaseSpecUninstall(obj.uninstall),
    'upgrade': toJson_HelmReleaseSpecUpgrade(obj.upgrade),
    'values': obj.values,
    'valuesFrom': obj.valuesFrom?.map(y => toJson_HelmReleaseSpecValuesFrom(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Chart defines the template of the v1beta1.HelmChart that should be created for this HelmRelease.
 *
 * @schema HelmReleaseSpecChart
 */
export interface HelmReleaseSpecChart {
  /**
   * Spec holds the template for the v1beta1.HelmChartSpec for this HelmRelease.
   *
   * @schema HelmReleaseSpecChart#spec
   */
  readonly spec: HelmReleaseSpecChartSpec;

}

/**
 * Converts an object of type 'HelmReleaseSpecChart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecChart(obj: HelmReleaseSpecChart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'spec': toJson_HelmReleaseSpecChartSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CrossNamespaceDependencyReference holds the reference to a dependency.
 *
 * @schema HelmReleaseSpecDependsOn
 */
export interface HelmReleaseSpecDependsOn {
  /**
   * Name holds the name reference of a dependency.
   *
   * @schema HelmReleaseSpecDependsOn#name
   */
  readonly name: string;

  /**
   * Namespace holds the namespace reference of a dependency.
   *
   * @schema HelmReleaseSpecDependsOn#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecDependsOn' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecDependsOn(obj: HelmReleaseSpecDependsOn | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Install holds the configuration for Helm install actions for this HelmRelease.
 *
 * @schema HelmReleaseSpecInstall
 */
export interface HelmReleaseSpecInstall {
  /**
   * CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
   * Skip: do neither install nor replace (update) any CRDs.
   * Create: new CRDs are created, existing CRDs are neither updated nor deleted.
   * CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
   * By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
   *
   * @default Create` and if omitted CRDs are installed but not updated.
   * @schema HelmReleaseSpecInstall#crds
   */
  readonly crds?: HelmReleaseSpecInstallCrds;

  /**
   * CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it does not exist yet. On uninstall, the namespace will not be garbage collected.
   *
   * @schema HelmReleaseSpecInstall#createNamespace
   */
  readonly createNamespace?: boolean;

  /**
   * DisableHooks prevents hooks from running during the Helm install action.
   *
   * @schema HelmReleaseSpecInstall#disableHooks
   */
  readonly disableHooks?: boolean;

  /**
   * DisableOpenAPIValidation prevents the Helm install action from validating rendered templates against the Kubernetes OpenAPI Schema.
   *
   * @schema HelmReleaseSpecInstall#disableOpenAPIValidation
   */
  readonly disableOpenApiValidation?: boolean;

  /**
   * DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
   *
   * @schema HelmReleaseSpecInstall#disableWait
   */
  readonly disableWait?: boolean;

  /**
   * DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
   *
   * @schema HelmReleaseSpecInstall#disableWaitForJobs
   */
  readonly disableWaitForJobs?: boolean;

  /**
   * Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
   *
   * @schema HelmReleaseSpecInstall#remediation
   */
  readonly remediation?: HelmReleaseSpecInstallRemediation;

  /**
   * Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a deleted release which remains in the history.
   *
   * @schema HelmReleaseSpecInstall#replace
   */
  readonly replace?: boolean;

  /**
   * SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if not already present.
   * Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
   *
   * @schema HelmReleaseSpecInstall#skipCRDs
   */
  readonly skipCrDs?: boolean;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
   *
   * @default HelmReleaseSpec.Timeout'.
   * @schema HelmReleaseSpecInstall#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecInstall' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecInstall(obj: HelmReleaseSpecInstall | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'crds': obj.crds,
    'createNamespace': obj.createNamespace,
    'disableHooks': obj.disableHooks,
    'disableOpenAPIValidation': obj.disableOpenApiValidation,
    'disableWait': obj.disableWait,
    'disableWaitForJobs': obj.disableWaitForJobs,
    'remediation': toJson_HelmReleaseSpecInstallRemediation(obj.remediation),
    'replace': obj.replace,
    'skipCRDs': obj.skipCrDs,
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KubeConfig for reconciling the HelmRelease on a remote cluster. When specified, KubeConfig takes precedence over ServiceAccountName.
 *
 * @schema HelmReleaseSpecKubeConfig
 */
export interface HelmReleaseSpecKubeConfig {
  /**
   * SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
   *
   * @schema HelmReleaseSpecKubeConfig#secretRef
   */
  readonly secretRef?: HelmReleaseSpecKubeConfigSecretRef;

}

/**
 * Converts an object of type 'HelmReleaseSpecKubeConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecKubeConfig(obj: HelmReleaseSpecKubeConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretRef': toJson_HelmReleaseSpecKubeConfigSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PostRenderer contains a Helm PostRenderer specification.
 *
 * @schema HelmReleaseSpecPostRenderers
 */
export interface HelmReleaseSpecPostRenderers {
  /**
   * Kustomization to apply as PostRenderer.
   *
   * @schema HelmReleaseSpecPostRenderers#kustomize
   */
  readonly kustomize?: HelmReleaseSpecPostRenderersKustomize;

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderers(obj: HelmReleaseSpecPostRenderers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kustomize': toJson_HelmReleaseSpecPostRenderersKustomize(obj.kustomize),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Rollback holds the configuration for Helm rollback actions for this HelmRelease.
 *
 * @schema HelmReleaseSpecRollback
 */
export interface HelmReleaseSpecRollback {
  /**
   * CleanupOnFail allows deletion of new resources created during the Helm rollback action when it fails.
   *
   * @schema HelmReleaseSpecRollback#cleanupOnFail
   */
  readonly cleanupOnFail?: boolean;

  /**
   * DisableHooks prevents hooks from running during the Helm rollback action.
   *
   * @schema HelmReleaseSpecRollback#disableHooks
   */
  readonly disableHooks?: boolean;

  /**
   * DisableWait disables the waiting for resources to be ready after a Helm rollback has been performed.
   *
   * @schema HelmReleaseSpecRollback#disableWait
   */
  readonly disableWait?: boolean;

  /**
   * DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
   *
   * @schema HelmReleaseSpecRollback#disableWaitForJobs
   */
  readonly disableWaitForJobs?: boolean;

  /**
   * Force forces resource updates through a replacement strategy.
   *
   * @schema HelmReleaseSpecRollback#force
   */
  readonly force?: boolean;

  /**
   * Recreate performs pod restarts for the resource if applicable.
   *
   * @schema HelmReleaseSpecRollback#recreate
   */
  readonly recreate?: boolean;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
   *
   * @default HelmReleaseSpec.Timeout'.
   * @schema HelmReleaseSpecRollback#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecRollback' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecRollback(obj: HelmReleaseSpecRollback | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cleanupOnFail': obj.cleanupOnFail,
    'disableHooks': obj.disableHooks,
    'disableWait': obj.disableWait,
    'disableWaitForJobs': obj.disableWaitForJobs,
    'force': obj.force,
    'recreate': obj.recreate,
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Test holds the configuration for Helm test actions for this HelmRelease.
 *
 * @schema HelmReleaseSpecTest
 */
export interface HelmReleaseSpecTest {
  /**
   * Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has been performed.
   *
   * @schema HelmReleaseSpecTest#enable
   */
  readonly enable?: boolean;

  /**
   * IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
   *
   * @schema HelmReleaseSpecTest#ignoreFailures
   */
  readonly ignoreFailures?: boolean;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation during the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
   *
   * @default HelmReleaseSpec.Timeout'.
   * @schema HelmReleaseSpecTest#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecTest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecTest(obj: HelmReleaseSpecTest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enable': obj.enable,
    'ignoreFailures': obj.ignoreFailures,
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
 *
 * @schema HelmReleaseSpecUninstall
 */
export interface HelmReleaseSpecUninstall {
  /**
   * DisableHooks prevents hooks from running during the Helm rollback action.
   *
   * @schema HelmReleaseSpecUninstall#disableHooks
   */
  readonly disableHooks?: boolean;

  /**
   * KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but retain the release history.
   *
   * @schema HelmReleaseSpecUninstall#keepHistory
   */
  readonly keepHistory?: boolean;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
   *
   * @default HelmReleaseSpec.Timeout'.
   * @schema HelmReleaseSpecUninstall#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecUninstall' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecUninstall(obj: HelmReleaseSpecUninstall | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'disableHooks': obj.disableHooks,
    'keepHistory': obj.keepHistory,
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
 *
 * @schema HelmReleaseSpecUpgrade
 */
export interface HelmReleaseSpecUpgrade {
  /**
   * CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it fails.
   *
   * @schema HelmReleaseSpecUpgrade#cleanupOnFail
   */
  readonly cleanupOnFail?: boolean;

  /**
   * CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
   * Skip: do neither install nor replace (update) any CRDs.
   * Create: new CRDs are created, existing CRDs are neither updated nor deleted.
   * CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
   * By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
   *
   * @default Skip` and if omitted CRDs are neither installed nor upgraded.
   * @schema HelmReleaseSpecUpgrade#crds
   */
  readonly crds?: HelmReleaseSpecUpgradeCrds;

  /**
   * DisableHooks prevents hooks from running during the Helm upgrade action.
   *
   * @schema HelmReleaseSpecUpgrade#disableHooks
   */
  readonly disableHooks?: boolean;

  /**
   * DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates against the Kubernetes OpenAPI Schema.
   *
   * @schema HelmReleaseSpecUpgrade#disableOpenAPIValidation
   */
  readonly disableOpenApiValidation?: boolean;

  /**
   * DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
   *
   * @schema HelmReleaseSpecUpgrade#disableWait
   */
  readonly disableWait?: boolean;

  /**
   * DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
   *
   * @schema HelmReleaseSpecUpgrade#disableWaitForJobs
   */
  readonly disableWaitForJobs?: boolean;

  /**
   * Force forces resource updates through a replacement strategy.
   *
   * @schema HelmReleaseSpecUpgrade#force
   */
  readonly force?: boolean;

  /**
   * PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'. Setting this flag makes the HelmRelease non-declarative.
   *
   * @schema HelmReleaseSpecUpgrade#preserveValues
   */
  readonly preserveValues?: boolean;

  /**
   * Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
   *
   * @schema HelmReleaseSpecUpgrade#remediation
   */
  readonly remediation?: HelmReleaseSpecUpgradeRemediation;

  /**
   * Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
   *
   * @default HelmReleaseSpec.Timeout'.
   * @schema HelmReleaseSpecUpgrade#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecUpgrade' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecUpgrade(obj: HelmReleaseSpecUpgrade | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cleanupOnFail': obj.cleanupOnFail,
    'crds': obj.crds,
    'disableHooks': obj.disableHooks,
    'disableOpenAPIValidation': obj.disableOpenApiValidation,
    'disableWait': obj.disableWait,
    'disableWaitForJobs': obj.disableWaitForJobs,
    'force': obj.force,
    'preserveValues': obj.preserveValues,
    'remediation': toJson_HelmReleaseSpecUpgradeRemediation(obj.remediation),
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ValuesReference contains a reference to a resource containing Helm values, and optionally the key they can be found at.
 *
 * @schema HelmReleaseSpecValuesFrom
 */
export interface HelmReleaseSpecValuesFrom {
  /**
   * Kind of the values referent, valid values are ('Secret', 'ConfigMap').
   *
   * @schema HelmReleaseSpecValuesFrom#kind
   */
  readonly kind: HelmReleaseSpecValuesFromKind;

  /**
   * Name of the values referent. Should reside in the same namespace as the referring resource.
   *
   * @schema HelmReleaseSpecValuesFrom#name
   */
  readonly name: string;

  /**
   * Optional marks this ValuesReference as optional. When set, a not found error for the values reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a reconciliation failure.
   *
   * @schema HelmReleaseSpecValuesFrom#optional
   */
  readonly optional?: boolean;

  /**
   * TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is expected to be a single flat value. Defaults to 'None', which results in the values getting merged at the root.
   *
   * @default None', which results in the values getting merged at the root.
   * @schema HelmReleaseSpecValuesFrom#targetPath
   */
  readonly targetPath?: string;

  /**
   * ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to 'values.yaml'.
   *
   * @default values.yaml'.
   * @schema HelmReleaseSpecValuesFrom#valuesKey
   */
  readonly valuesKey?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecValuesFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecValuesFrom(obj: HelmReleaseSpecValuesFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'kind': obj.kind,
    'name': obj.name,
    'optional': obj.optional,
    'targetPath': obj.targetPath,
    'valuesKey': obj.valuesKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec holds the template for the v1beta1.HelmChartSpec for this HelmRelease.
 *
 * @schema HelmReleaseSpecChartSpec
 */
export interface HelmReleaseSpecChartSpec {
  /**
   * The name or path the Helm chart is available at in the SourceRef.
   *
   * @schema HelmReleaseSpecChartSpec#chart
   */
  readonly chart: string;

  /**
   * Interval at which to check the v1beta1.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
   *
   * @default HelmReleaseSpec.Interval'.
   * @schema HelmReleaseSpecChartSpec#interval
   */
  readonly interval?: string;

  /**
   * The name and namespace of the v1beta1.Source the chart is available at.
   *
   * @schema HelmReleaseSpecChartSpec#sourceRef
   */
  readonly sourceRef: HelmReleaseSpecChartSpecSourceRef;

  /**
   * Alternative values file to use as the default chart values, expected to be a relative path in the SourceRef. Deprecated in favor of ValuesFiles, for backwards compatibility the file defined here is merged before the ValuesFiles items. Ignored when omitted.
   *
   * @schema HelmReleaseSpecChartSpec#valuesFile
   */
  readonly valuesFile?: string;

  /**
   * Alternative list of values files to use as the chart values (values.yaml is not included by default), expected to be a relative path in the SourceRef. Values files are merged in the order of this list with the last file overriding the first. Ignored when omitted.
   *
   * @schema HelmReleaseSpecChartSpec#valuesFiles
   */
  readonly valuesFiles?: string[];

  /**
   * Version semver expression, ignored for charts from v1beta1.GitRepository and v1beta1.Bucket sources. Defaults to latest when omitted.
   *
   * @default latest when omitted.
   * @schema HelmReleaseSpecChartSpec#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecChartSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecChartSpec(obj: HelmReleaseSpecChartSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'interval': obj.interval,
    'sourceRef': toJson_HelmReleaseSpecChartSpecSourceRef(obj.sourceRef),
    'valuesFile': obj.valuesFile,
    'valuesFiles': obj.valuesFiles?.map(y => y),
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs are installed but not updated.
 * Skip: do neither install nor replace (update) any CRDs.
 * Create: new CRDs are created, existing CRDs are neither updated nor deleted.
 * CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
 * By default, CRDs are applied (installed) during Helm install action. With this option users can opt-in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
 *
 * @default Create` and if omitted CRDs are installed but not updated.
 * @schema HelmReleaseSpecInstallCrds
 */
export enum HelmReleaseSpecInstallCrds {
  /** Skip */
  SKIP = "Skip",
  /** Create */
  CREATE = "Create",
  /** CreateReplace */
  CREATE_REPLACE = "CreateReplace",
}

/**
 * Remediation holds the remediation configuration for when the Helm install action for the HelmRelease fails. The default is to not perform any action.
 *
 * @schema HelmReleaseSpecInstallRemediation
 */
export interface HelmReleaseSpecInstallRemediation {
  /**
   * IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an install action but fail. Defaults to 'Test.IgnoreFailures'.
   *
   * @default Test.IgnoreFailures'.
   * @schema HelmReleaseSpecInstallRemediation#ignoreTestFailures
   */
  readonly ignoreTestFailures?: boolean;

  /**
   * RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false'.
   *
   * @default false'.
   * @schema HelmReleaseSpecInstallRemediation#remediateLastFailure
   */
  readonly remediateLastFailure?: boolean;

  /**
   * Retries is the number of retries that should be attempted on failures before bailing. Remediation, using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
   *
   * @default 0', a negative integer equals to unlimited retries.
   * @schema HelmReleaseSpecInstallRemediation#retries
   */
  readonly retries?: number;

}

/**
 * Converts an object of type 'HelmReleaseSpecInstallRemediation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecInstallRemediation(obj: HelmReleaseSpecInstallRemediation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ignoreTestFailures': obj.ignoreTestFailures,
    'remediateLastFailure': obj.remediateLastFailure,
    'retries': obj.retries,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretRef holds the name to a secret that contains a 'value' key with the kubeconfig file as the value. It must be in the same namespace as the HelmRelease. It is recommended that the kubeconfig is self-contained, and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod that is responsible for reconciling the HelmRelease.
 *
 * @schema HelmReleaseSpecKubeConfigSecretRef
 */
export interface HelmReleaseSpecKubeConfigSecretRef {
  /**
   * Name of the referent
   *
   * @schema HelmReleaseSpecKubeConfigSecretRef#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecKubeConfigSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecKubeConfigSecretRef(obj: HelmReleaseSpecKubeConfigSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kustomization to apply as PostRenderer.
 *
 * @schema HelmReleaseSpecPostRenderersKustomize
 */
export interface HelmReleaseSpecPostRenderersKustomize {
  /**
   * Images is a list of (image name, new name, new tag or digest) for changing image names, tags or digests. This can also be achieved with a patch, but this operator is simpler to specify.
   *
   * @schema HelmReleaseSpecPostRenderersKustomize#images
   */
  readonly images?: HelmReleaseSpecPostRenderersKustomizeImages[];

  /**
   * JSON 6902 patches, defined as inline YAML objects.
   *
   * @schema HelmReleaseSpecPostRenderersKustomize#patchesJson6902
   */
  readonly patchesJson6902?: HelmReleaseSpecPostRenderersKustomizePatchesJson6902[];

  /**
   * Strategic merge patches, defined as inline YAML objects.
   *
   * @schema HelmReleaseSpecPostRenderersKustomize#patchesStrategicMerge
   */
  readonly patchesStrategicMerge?: any[];

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderersKustomize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderersKustomize(obj: HelmReleaseSpecPostRenderersKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'images': obj.images?.map(y => toJson_HelmReleaseSpecPostRenderersKustomizeImages(y)),
    'patchesJson6902': obj.patchesJson6902?.map(y => toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902(y)),
    'patchesStrategicMerge': obj.patchesStrategicMerge?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs are neither installed nor upgraded.
 * Skip: do neither install nor replace (update) any CRDs.
 * Create: new CRDs are created, existing CRDs are neither updated nor deleted.
 * CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
 * By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
 *
 * @default Skip` and if omitted CRDs are neither installed nor upgraded.
 * @schema HelmReleaseSpecUpgradeCrds
 */
export enum HelmReleaseSpecUpgradeCrds {
  /** Skip */
  SKIP = "Skip",
  /** Create */
  CREATE = "Create",
  /** CreateReplace */
  CREATE_REPLACE = "CreateReplace",
}

/**
 * Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease fails. The default is to not perform any action.
 *
 * @schema HelmReleaseSpecUpgradeRemediation
 */
export interface HelmReleaseSpecUpgradeRemediation {
  /**
   * IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
   *
   * @default Test.IgnoreFailures'.
   * @schema HelmReleaseSpecUpgradeRemediation#ignoreTestFailures
   */
  readonly ignoreTestFailures?: boolean;

  /**
   * RemediateLastFailure tells the controller to remediate the last failure, when no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
   *
   * @default false' unless 'Retries' is greater than 0.
   * @schema HelmReleaseSpecUpgradeRemediation#remediateLastFailure
   */
  readonly remediateLastFailure?: boolean;

  /**
   * Retries is the number of retries that should be attempted on failures before bailing. Remediation, using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to unlimited retries.
   *
   * @default 0', a negative integer equals to unlimited retries.
   * @schema HelmReleaseSpecUpgradeRemediation#retries
   */
  readonly retries?: number;

  /**
   * Strategy to use for failure remediation. Defaults to 'rollback'.
   *
   * @default rollback'.
   * @schema HelmReleaseSpecUpgradeRemediation#strategy
   */
  readonly strategy?: HelmReleaseSpecUpgradeRemediationStrategy;

}

/**
 * Converts an object of type 'HelmReleaseSpecUpgradeRemediation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecUpgradeRemediation(obj: HelmReleaseSpecUpgradeRemediation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ignoreTestFailures': obj.ignoreTestFailures,
    'remediateLastFailure': obj.remediateLastFailure,
    'retries': obj.retries,
    'strategy': obj.strategy,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kind of the values referent, valid values are ('Secret', 'ConfigMap').
 *
 * @schema HelmReleaseSpecValuesFromKind
 */
export enum HelmReleaseSpecValuesFromKind {
  /** Secret */
  SECRET = "Secret",
  /** ConfigMap */
  CONFIG_MAP = "ConfigMap",
}

/**
 * The name and namespace of the v1beta1.Source the chart is available at.
 *
 * @schema HelmReleaseSpecChartSpecSourceRef
 */
export interface HelmReleaseSpecChartSpecSourceRef {
  /**
   * APIVersion of the referent.
   *
   * @schema HelmReleaseSpecChartSpecSourceRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind of the referent.
   *
   * @schema HelmReleaseSpecChartSpecSourceRef#kind
   */
  readonly kind?: HelmReleaseSpecChartSpecSourceRefKind;

  /**
   * Name of the referent.
   *
   * @schema HelmReleaseSpecChartSpecSourceRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referent.
   *
   * @schema HelmReleaseSpecChartSpecSourceRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecChartSpecSourceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecChartSpecSourceRef(obj: HelmReleaseSpecChartSpecSourceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
 *
 * @schema HelmReleaseSpecPostRenderersKustomizeImages
 */
export interface HelmReleaseSpecPostRenderersKustomizeImages {
  /**
   * Digest is the value used to replace the original image tag. If digest is present NewTag value is ignored.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizeImages#digest
   */
  readonly digest?: string;

  /**
   * Name is a tag-less image name.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizeImages#name
   */
  readonly name: string;

  /**
   * NewName is the value used to replace the original name.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizeImages#newName
   */
  readonly newName?: string;

  /**
   * NewTag is the value used to replace the original tag.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizeImages#newTag
   */
  readonly newTag?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderersKustomizeImages' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderersKustomizeImages(obj: HelmReleaseSpecPostRenderersKustomizeImages | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'digest': obj.digest,
    'name': obj.name,
    'newName': obj.newName,
    'newTag': obj.newTag,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
 *
 * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902
 */
export interface HelmReleaseSpecPostRenderersKustomizePatchesJson6902 {
  /**
   * Patch contains the JSON6902 patch document with an array of operation objects.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902#patch
   */
  readonly patch: HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch[];

  /**
   * Target points to the resources that the patch document should be applied to.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902#target
   */
  readonly target: HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target;

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderersKustomizePatchesJson6902' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902(obj: HelmReleaseSpecPostRenderersKustomizePatchesJson6902 | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'patch': obj.patch?.map(y => toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch(y)),
    'target': toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target(obj.target),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Strategy to use for failure remediation. Defaults to 'rollback'.
 *
 * @default rollback'.
 * @schema HelmReleaseSpecUpgradeRemediationStrategy
 */
export enum HelmReleaseSpecUpgradeRemediationStrategy {
  /** rollback */
  ROLLBACK = "rollback",
  /** uninstall */
  UNINSTALL = "uninstall",
}

/**
 * Kind of the referent.
 *
 * @schema HelmReleaseSpecChartSpecSourceRefKind
 */
export enum HelmReleaseSpecChartSpecSourceRefKind {
  /** HelmRepository */
  HELM_REPOSITORY = "HelmRepository",
  /** GitRepository */
  GIT_REPOSITORY = "GitRepository",
  /** Bucket */
  BUCKET = "Bucket",
}

/**
 * JSON6902 is a JSON6902 operation object. https://tools.ietf.org/html/rfc6902#section-4
 *
 * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch
 */
export interface HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch {
  /**
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch#from
   */
  readonly from?: string;

  /**
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch#op
   */
  readonly op: HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOp;

  /**
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch#path
   */
  readonly path: string;

  /**
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch#value
   */
  readonly value?: any;

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch(obj: HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'op': obj.op,
    'path': obj.path,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Target points to the resources that the patch document should be applied to.
 *
 * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target
 */
export interface HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target {
  /**
   * AnnotationSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource annotations.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#annotationSelector
   */
  readonly annotationSelector?: string;

  /**
   * Group is the API group to select resources from. Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#group
   */
  readonly group?: string;

  /**
   * Kind of the API Group to select resources from. Together with Group and Version it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#kind
   */
  readonly kind?: string;

  /**
   * LabelSelector is a string that follows the label selection expression https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the resource labels.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#labelSelector
   */
  readonly labelSelector?: string;

  /**
   * Name to match resources with.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#name
   */
  readonly name?: string;

  /**
   * Namespace to select resources from.
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#namespace
   */
  readonly namespace?: string;

  /**
   * Version of the API Group to select resources from. Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources. https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
   *
   * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target(obj: HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotationSelector': obj.annotationSelector,
    'group': obj.group,
    'kind': obj.kind,
    'labelSelector': obj.labelSelector,
    'name': obj.name,
    'namespace': obj.namespace,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOp
 */
export enum HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOp {
  /** test */
  TEST = "test",
  /** remove */
  REMOVE = "remove",
  /** add */
  ADD = "add",
  /** replace */
  REPLACE = "replace",
  /** move */
  MOVE = "move",
  /** copy */
  COPY = "copy",
}

