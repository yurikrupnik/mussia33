// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * ManagedCluster represents the desired state and current status of managed cluster. ManagedCluster is a cluster scoped resource. The name is the cluster UID. 
 The cluster join process follows a double opt-in process: 
 1. Agent on managed cluster creates CSR on hub with cluster UID and agent name. 2. Agent on managed cluster creates ManagedCluster on hub. 3. Cluster admin on hub approves the CSR for UID and agent name of the ManagedCluster. 4. Cluster admin sets spec.acceptClient of ManagedCluster to true. 5. Cluster admin on managed cluster creates credential of kubeconfig to hub. 
 Once the hub creates the cluster namespace, the Klusterlet agent on the ManagedCluster pushes the credential to the hub to use against the kube-apiserver of the ManagedCluster.
 *
 * @schema ManagedCluster
 */
export class ManagedCluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ManagedCluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'cluster.open-cluster-management.io/v1',
    kind: 'ManagedCluster',
  }

  /**
   * Renders a Kubernetes manifest for "ManagedCluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ManagedClusterProps = {}): any {
    return {
      ...ManagedCluster.GVK,
      ...toJson_ManagedClusterProps(props),
    };
  }

  /**
   * Defines a "ManagedCluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ManagedClusterProps = {}) {
    super(scope, id, {
      ...ManagedCluster.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ManagedCluster.GVK,
      ...toJson_ManagedClusterProps(resolved),
    };
  }
}

/**
 * ManagedCluster represents the desired state and current status of managed cluster. ManagedCluster is a cluster scoped resource. The name is the cluster UID.
 * The cluster join process follows a double opt-in process:
 * 1. Agent on managed cluster creates CSR on hub with cluster UID and agent name. 2. Agent on managed cluster creates ManagedCluster on hub. 3. Cluster admin on hub approves the CSR for UID and agent name of the ManagedCluster. 4. Cluster admin sets spec.acceptClient of ManagedCluster to true. 5. Cluster admin on managed cluster creates credential of kubeconfig to hub.
 * Once the hub creates the cluster namespace, the Klusterlet agent on the ManagedCluster pushes the credential to the hub to use against the kube-apiserver of the ManagedCluster.
 *
 * @schema ManagedCluster
 */
export interface ManagedClusterProps {
  /**
   * @schema ManagedCluster#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Spec represents a desired configuration for the agent on the managed cluster.
   *
   * @schema ManagedCluster#spec
   */
  readonly spec?: ManagedClusterSpec;

}

/**
 * Converts an object of type 'ManagedClusterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ManagedClusterProps(obj: ManagedClusterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ManagedClusterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Spec represents a desired configuration for the agent on the managed cluster.
 *
 * @schema ManagedClusterSpec
 */
export interface ManagedClusterSpec {
  /**
   * hubAcceptsClient represents that hub accepts the joining of Klusterlet agent on the managed cluster with the hub. The default value is false, and can only be set true when the user on hub has an RBAC rule to UPDATE on the virtual subresource of managedclusters/accept. When the value is set true, a namespace whose name is the same as the name of ManagedCluster is created on the hub. This namespace represents the managed cluster, also role/rolebinding is created on the namespace to grant the permision of access from the agent on the managed cluster. When the value is set to false, the namespace representing the managed cluster is deleted.
   *
   * @schema ManagedClusterSpec#hubAcceptsClient
   */
  readonly hubAcceptsClient?: boolean;

  /**
   * LeaseDurationSeconds is used to coordinate the lease update time of Klusterlet agents on the managed cluster. If its value is zero, the Klusterlet agent will update its lease every 60 seconds by default
   *
   * @schema ManagedClusterSpec#leaseDurationSeconds
   */
  readonly leaseDurationSeconds?: number;

  /**
   * ManagedClusterClientConfigs represents a list of the apiserver address of the managed cluster. If it is empty, the managed cluster has no accessible address for the hub to connect with it.
   *
   * @schema ManagedClusterSpec#managedClusterClientConfigs
   */
  readonly managedClusterClientConfigs?: ManagedClusterSpecManagedClusterClientConfigs[];

  /**
   * Taints is a property of managed cluster that allow the cluster to be repelled when scheduling. Taints, including 'ManagedClusterUnavailable' and 'ManagedClusterUnreachable', can not be added/removed by agent running on the managed cluster; while it's fine to add/remove other taints from either hub cluser or managed cluster.
   *
   * @schema ManagedClusterSpec#taints
   */
  readonly taints?: ManagedClusterSpecTaints[];

}

/**
 * Converts an object of type 'ManagedClusterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ManagedClusterSpec(obj: ManagedClusterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hubAcceptsClient': obj.hubAcceptsClient,
    'leaseDurationSeconds': obj.leaseDurationSeconds,
    'managedClusterClientConfigs': obj.managedClusterClientConfigs?.map(y => toJson_ManagedClusterSpecManagedClusterClientConfigs(y)),
    'taints': obj.taints?.map(y => toJson_ManagedClusterSpecTaints(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ClientConfig represents the apiserver address of the managed cluster. TODO include credential to connect to managed cluster kube-apiserver
 *
 * @schema ManagedClusterSpecManagedClusterClientConfigs
 */
export interface ManagedClusterSpecManagedClusterClientConfigs {
  /**
   * CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
   *
   * @schema ManagedClusterSpecManagedClusterClientConfigs#caBundle
   */
  readonly caBundle?: string;

  /**
   * URL is the URL of apiserver endpoint of the managed cluster.
   *
   * @schema ManagedClusterSpecManagedClusterClientConfigs#url
   */
  readonly url?: string;

}

/**
 * Converts an object of type 'ManagedClusterSpecManagedClusterClientConfigs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ManagedClusterSpecManagedClusterClientConfigs(obj: ManagedClusterSpecManagedClusterClientConfigs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caBundle': obj.caBundle,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The managed cluster this Taint is attached to has the "effect" on any placement that does not tolerate the Taint.
 *
 * @schema ManagedClusterSpecTaints
 */
export interface ManagedClusterSpecTaints {
  /**
   * Effect indicates the effect of the taint on placements that do not tolerate the taint. Valid effects are NoSelect, PreferNoSelect and NoSelectIfNew.
   *
   * @schema ManagedClusterSpecTaints#effect
   */
  readonly effect: ManagedClusterSpecTaintsEffect;

  /**
   * Key is the taint key applied to a cluster. e.g. bar or foo.example.com/bar. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
   *
   * @schema ManagedClusterSpecTaints#key
   */
  readonly key: string;

  /**
   * TimeAdded represents the time at which the taint was added.
   *
   * @schema ManagedClusterSpecTaints#timeAdded
   */
  readonly timeAdded?: Date;

  /**
   * Value is the taint value corresponding to the taint key.
   *
   * @schema ManagedClusterSpecTaints#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ManagedClusterSpecTaints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ManagedClusterSpecTaints(obj: ManagedClusterSpecTaints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'timeAdded': obj.timeAdded?.toISOString(),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Effect indicates the effect of the taint on placements that do not tolerate the taint. Valid effects are NoSelect, PreferNoSelect and NoSelectIfNew.
 *
 * @schema ManagedClusterSpecTaintsEffect
 */
export enum ManagedClusterSpecTaintsEffect {
  /** NoSelect */
  NO_SELECT = "NoSelect",
  /** PreferNoSelect */
  PREFER_NO_SELECT = "PreferNoSelect",
  /** NoSelectIfNew */
  NO_SELECT_IF_NEW = "NoSelectIfNew",
}

