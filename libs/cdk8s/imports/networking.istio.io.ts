// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema DestinationRule
 */
export class DestinationRule extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DestinationRule"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'DestinationRule',
  }

  /**
   * Renders a Kubernetes manifest for "DestinationRule".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DestinationRuleProps = {}): any {
    return {
      ...DestinationRule.GVK,
      ...toJson_DestinationRuleProps(props),
    };
  }

  /**
   * Defines a "DestinationRule" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DestinationRuleProps = {}) {
    super(scope, id, {
      ...DestinationRule.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DestinationRule.GVK,
      ...toJson_DestinationRuleProps(resolved),
    };
  }
}

/**
 * @schema DestinationRule
 */
export interface DestinationRuleProps {
  /**
   * @schema DestinationRule#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
   *
   * @schema DestinationRule#spec
   */
  readonly spec?: DestinationRuleSpec;

}

/**
 * Converts an object of type 'DestinationRuleProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleProps(obj: DestinationRuleProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DestinationRuleSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
 *
 * @schema DestinationRuleSpec
 */
export interface DestinationRuleSpec {
  /**
   * A list of namespaces to which this destination rule is exported.
   *
   * @schema DestinationRuleSpec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The name of a service from the service registry.
   *
   * @schema DestinationRuleSpec#host
   */
  readonly host?: string;

  /**
   * @schema DestinationRuleSpec#subsets
   */
  readonly subsets?: DestinationRuleSpecSubsets[];

  /**
   * @schema DestinationRuleSpec#trafficPolicy
   */
  readonly trafficPolicy?: DestinationRuleSpecTrafficPolicy;

  /**
   * @schema DestinationRuleSpec#workloadSelector
   */
  readonly workloadSelector?: DestinationRuleSpecWorkloadSelector;

}

/**
 * Converts an object of type 'DestinationRuleSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpec(obj: DestinationRuleSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exportTo': obj.exportTo?.map(y => y),
    'host': obj.host,
    'subsets': obj.subsets?.map(y => toJson_DestinationRuleSpecSubsets(y)),
    'trafficPolicy': toJson_DestinationRuleSpecTrafficPolicy(obj.trafficPolicy),
    'workloadSelector': toJson_DestinationRuleSpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsets
 */
export interface DestinationRuleSpecSubsets {
  /**
   * @schema DestinationRuleSpecSubsets#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name of the subset.
   *
   * @schema DestinationRuleSpecSubsets#name
   */
  readonly name?: string;

  /**
   * Traffic policies that apply to this subset.
   *
   * @schema DestinationRuleSpecSubsets#trafficPolicy
   */
  readonly trafficPolicy?: DestinationRuleSpecSubsetsTrafficPolicy;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsets(obj: DestinationRuleSpecSubsets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'trafficPolicy': toJson_DestinationRuleSpecSubsetsTrafficPolicy(obj.trafficPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicy
 */
export interface DestinationRuleSpecTrafficPolicy {
  /**
   * @schema DestinationRuleSpecTrafficPolicy#connectionPool
   */
  readonly connectionPool?: DestinationRuleSpecTrafficPolicyConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleSpecTrafficPolicy#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleSpecTrafficPolicyLoadBalancer;

  /**
   * @schema DestinationRuleSpecTrafficPolicy#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleSpecTrafficPolicyOutlierDetection;

  /**
   * Traffic policies specific to individual ports.
   *
   * @schema DestinationRuleSpecTrafficPolicy#portLevelSettings
   */
  readonly portLevelSettings?: DestinationRuleSpecTrafficPolicyPortLevelSettings[];

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleSpecTrafficPolicy#tls
   */
  readonly tls?: DestinationRuleSpecTrafficPolicyTls;

  /**
   * @schema DestinationRuleSpecTrafficPolicy#tunnel
   */
  readonly tunnel?: DestinationRuleSpecTrafficPolicyTunnel;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicy(obj: DestinationRuleSpecTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleSpecTrafficPolicyConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleSpecTrafficPolicyLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleSpecTrafficPolicyOutlierDetection(obj.outlierDetection),
    'portLevelSettings': obj.portLevelSettings?.map(y => toJson_DestinationRuleSpecTrafficPolicyPortLevelSettings(y)),
    'tls': toJson_DestinationRuleSpecTrafficPolicyTls(obj.tls),
    'tunnel': toJson_DestinationRuleSpecTrafficPolicyTunnel(obj.tunnel),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecWorkloadSelector
 */
export interface DestinationRuleSpecWorkloadSelector {
  /**
   * @schema DestinationRuleSpecWorkloadSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'DestinationRuleSpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecWorkloadSelector(obj: DestinationRuleSpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Traffic policies that apply to this subset.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicy
 */
export interface DestinationRuleSpecSubsetsTrafficPolicy {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#connectionPool
   */
  readonly connectionPool?: DestinationRuleSpecSubsetsTrafficPolicyConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection;

  /**
   * Traffic policies specific to individual ports.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#portLevelSettings
   */
  readonly portLevelSettings?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings[];

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#tls
   */
  readonly tls?: DestinationRuleSpecSubsetsTrafficPolicyTls;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicy#tunnel
   */
  readonly tunnel?: DestinationRuleSpecSubsetsTrafficPolicyTunnel;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicy(obj: DestinationRuleSpecSubsetsTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection(obj.outlierDetection),
    'portLevelSettings': obj.portLevelSettings?.map(y => toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings(y)),
    'tls': toJson_DestinationRuleSpecSubsetsTrafficPolicyTls(obj.tls),
    'tunnel': toJson_DestinationRuleSpecSubsetsTrafficPolicyTunnel(obj.tunnel),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyConnectionPool
 */
export interface DestinationRuleSpecTrafficPolicyConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPool#http
   */
  readonly http?: DestinationRuleSpecTrafficPolicyConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleSpecTrafficPolicyConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyConnectionPool(obj: DestinationRuleSpecTrafficPolicyConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleSpecTrafficPolicyConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleSpecTrafficPolicyConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancer
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancer {
  /**
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancer#simple
   */
  readonly simple?: DestinationRuleSpecTrafficPolicyLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancer(obj: DestinationRuleSpecTrafficPolicyLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyOutlierDetection
 */
export interface DestinationRuleSpecTrafficPolicyOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleSpecTrafficPolicyOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyOutlierDetection(obj: DestinationRuleSpecTrafficPolicyOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettings {
  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings#connectionPool
   */
  readonly connectionPool?: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings#port
   */
  readonly port?: DestinationRuleSpecTrafficPolicyPortLevelSettingsPort;

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettings#tls
   */
  readonly tls?: DestinationRuleSpecTrafficPolicyPortLevelSettingsTls;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettings(obj: DestinationRuleSpecTrafficPolicyPortLevelSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection(obj.outlierDetection),
    'port': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsPort(obj.port),
    'tls': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleSpecTrafficPolicyTls
 */
export interface DestinationRuleSpecTrafficPolicyTls {
  /**
   * @schema DestinationRuleSpecTrafficPolicyTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecTrafficPolicyTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleSpecTrafficPolicyTls#mode
   */
  readonly mode?: DestinationRuleSpecTrafficPolicyTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecTrafficPolicyTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleSpecTrafficPolicyTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyTls(obj: DestinationRuleSpecTrafficPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyTunnel
 */
export interface DestinationRuleSpecTrafficPolicyTunnel {
  /**
   * Specifies which protocol to use for tunneling the downstream connection.
   *
   * @schema DestinationRuleSpecTrafficPolicyTunnel#protocol
   */
  readonly protocol?: string;

  /**
   * Specifies a host to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleSpecTrafficPolicyTunnel#targetHost
   */
  readonly targetHost?: string;

  /**
   * Specifies a port to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleSpecTrafficPolicyTunnel#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyTunnel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyTunnel(obj: DestinationRuleSpecTrafficPolicyTunnel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'protocol': obj.protocol,
    'targetHost': obj.targetHost,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPool
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPool#http
   */
  readonly http?: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPool(obj: DestinationRuleSpecSubsetsTrafficPolicyConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer#simple
   */
  readonly simple?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection(obj: DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings#connectionPool
   */
  readonly connectionPool?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings#port
   */
  readonly port?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort;

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings#tls
   */
  readonly tls?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection(obj.outlierDetection),
    'port': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort(obj.port),
    'tls': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyTls
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyTls {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#mode
   */
  readonly mode?: DestinationRuleSpecSubsetsTrafficPolicyTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyTls(obj: DestinationRuleSpecSubsetsTrafficPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyTunnel
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyTunnel {
  /**
   * Specifies which protocol to use for tunneling the downstream connection.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTunnel#protocol
   */
  readonly protocol?: string;

  /**
   * Specifies a host to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTunnel#targetHost
   */
  readonly targetHost?: string;

  /**
   * Specifies a port to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyTunnel#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyTunnel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyTunnel(obj: DestinationRuleSpecSubsetsTrafficPolicyTunnel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'protocol': obj.protocol,
    'targetHost': obj.targetHost,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp
 */
export interface DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleSpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyConnectionPoolHttp(obj: DestinationRuleSpecTrafficPolicyConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcp
 */
export interface DestinationRuleSpecTrafficPolicyConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyConnectionPoolTcp(obj: DestinationRuleSpecTrafficPolicyConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash(obj: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting(obj: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerSimple
 */
export enum DestinationRuleSpecTrafficPolicyLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool#http
   */
  readonly http?: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer {
  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer#simple
   */
  readonly simple?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsPort
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsPort {
  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsPort(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsTls {
  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#mode
   */
  readonly mode?: DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsTls(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyTlsMode
 */
export enum DestinationRuleSpecTrafficPolicyTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp(obj: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp(obj: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerSimple
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool#http
   */
  readonly http?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#simple
   */
  readonly simple?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#mode
   */
  readonly mode?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyTlsMode
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleSpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleSpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive(obj: DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev(obj: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash(obj: DestinationRuleSpecTrafficPolicyLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleSpecTrafficPolicyLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerSimple
 */
export enum DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsMode
 */
export enum DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive(obj: DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleSpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsMode
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleSpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema DestinationRuleV1Beta1
 */
export class DestinationRuleV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "DestinationRuleV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'DestinationRule',
  }

  /**
   * Renders a Kubernetes manifest for "DestinationRuleV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: DestinationRuleV1Beta1Props = {}): any {
    return {
      ...DestinationRuleV1Beta1.GVK,
      ...toJson_DestinationRuleV1Beta1Props(props),
    };
  }

  /**
   * Defines a "DestinationRuleV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: DestinationRuleV1Beta1Props = {}) {
    super(scope, id, {
      ...DestinationRuleV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...DestinationRuleV1Beta1.GVK,
      ...toJson_DestinationRuleV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema DestinationRuleV1Beta1
 */
export interface DestinationRuleV1Beta1Props {
  /**
   * @schema DestinationRuleV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
   *
   * @schema DestinationRuleV1Beta1#spec
   */
  readonly spec?: DestinationRuleV1Beta1Spec;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1Props(obj: DestinationRuleV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_DestinationRuleV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
 *
 * @schema DestinationRuleV1Beta1Spec
 */
export interface DestinationRuleV1Beta1Spec {
  /**
   * A list of namespaces to which this destination rule is exported.
   *
   * @schema DestinationRuleV1Beta1Spec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The name of a service from the service registry.
   *
   * @schema DestinationRuleV1Beta1Spec#host
   */
  readonly host?: string;

  /**
   * @schema DestinationRuleV1Beta1Spec#subsets
   */
  readonly subsets?: DestinationRuleV1Beta1SpecSubsets[];

  /**
   * @schema DestinationRuleV1Beta1Spec#trafficPolicy
   */
  readonly trafficPolicy?: DestinationRuleV1Beta1SpecTrafficPolicy;

  /**
   * @schema DestinationRuleV1Beta1Spec#workloadSelector
   */
  readonly workloadSelector?: DestinationRuleV1Beta1SpecWorkloadSelector;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1Spec(obj: DestinationRuleV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exportTo': obj.exportTo?.map(y => y),
    'host': obj.host,
    'subsets': obj.subsets?.map(y => toJson_DestinationRuleV1Beta1SpecSubsets(y)),
    'trafficPolicy': toJson_DestinationRuleV1Beta1SpecTrafficPolicy(obj.trafficPolicy),
    'workloadSelector': toJson_DestinationRuleV1Beta1SpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsets
 */
export interface DestinationRuleV1Beta1SpecSubsets {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsets#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Name of the subset.
   *
   * @schema DestinationRuleV1Beta1SpecSubsets#name
   */
  readonly name?: string;

  /**
   * Traffic policies that apply to this subset.
   *
   * @schema DestinationRuleV1Beta1SpecSubsets#trafficPolicy
   */
  readonly trafficPolicy?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicy;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsets(obj: DestinationRuleV1Beta1SpecSubsets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'trafficPolicy': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicy(obj.trafficPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicy
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicy {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#connectionPool
   */
  readonly connectionPool?: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection;

  /**
   * Traffic policies specific to individual ports.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#portLevelSettings
   */
  readonly portLevelSettings?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings[];

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#tls
   */
  readonly tls?: DestinationRuleV1Beta1SpecTrafficPolicyTls;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicy#tunnel
   */
  readonly tunnel?: DestinationRuleV1Beta1SpecTrafficPolicyTunnel;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicy(obj: DestinationRuleV1Beta1SpecTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection(obj.outlierDetection),
    'portLevelSettings': obj.portLevelSettings?.map(y => toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings(y)),
    'tls': toJson_DestinationRuleV1Beta1SpecTrafficPolicyTls(obj.tls),
    'tunnel': toJson_DestinationRuleV1Beta1SpecTrafficPolicyTunnel(obj.tunnel),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecWorkloadSelector
 */
export interface DestinationRuleV1Beta1SpecWorkloadSelector {
  /**
   * @schema DestinationRuleV1Beta1SpecWorkloadSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecWorkloadSelector(obj: DestinationRuleV1Beta1SpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Traffic policies that apply to this subset.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicy {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#connectionPool
   */
  readonly connectionPool?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection;

  /**
   * Traffic policies specific to individual ports.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#portLevelSettings
   */
  readonly portLevelSettings?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings[];

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#tls
   */
  readonly tls?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicy#tunnel
   */
  readonly tunnel?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicy(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection(obj.outlierDetection),
    'portLevelSettings': obj.portLevelSettings?.map(y => toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings(y)),
    'tls': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls(obj.tls),
    'tunnel': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel(obj.tunnel),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool#http
   */
  readonly http?: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool(obj: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer#simple
   */
  readonly simple?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection(obj: DestinationRuleV1Beta1SpecTrafficPolicyOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings#connectionPool
   */
  readonly connectionPool?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings#port
   */
  readonly port?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort;

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings#tls
   */
  readonly tls?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection(obj.outlierDetection),
    'port': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort(obj.port),
    'tls': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyTls {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#mode
   */
  readonly mode?: DestinationRuleV1Beta1SpecTrafficPolicyTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyTls(obj: DestinationRuleV1Beta1SpecTrafficPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyTunnel
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyTunnel {
  /**
   * Specifies which protocol to use for tunneling the downstream connection.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTunnel#protocol
   */
  readonly protocol?: string;

  /**
   * Specifies a host to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTunnel#targetHost
   */
  readonly targetHost?: string;

  /**
   * Specifies a port to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyTunnel#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyTunnel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyTunnel(obj: DestinationRuleV1Beta1SpecTrafficPolicyTunnel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'protocol': obj.protocol,
    'targetHost': obj.targetHost,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool#http
   */
  readonly http?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer#simple
   */
  readonly simple?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings#connectionPool
   */
  readonly connectionPool?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool;

  /**
   * Settings controlling the load balancer algorithms.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings#loadBalancer
   */
  readonly loadBalancer?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings#outlierDetection
   */
  readonly outlierDetection?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings#port
   */
  readonly port?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort;

  /**
   * TLS related settings for connections to the upstream service.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings#tls
   */
  readonly tls?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettings | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectionPool': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool(obj.connectionPool),
    'loadBalancer': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer(obj.loadBalancer),
    'outlierDetection': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection(obj.outlierDetection),
    'port': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort(obj.port),
    'tls': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#mode
   */
  readonly mode?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel {
  /**
   * Specifies which protocol to use for tunneling the downstream connection.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel#protocol
   */
  readonly protocol?: string;

  /**
   * Specifies a host to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel#targetHost
   */
  readonly targetHost?: string;

  /**
   * Specifies a port to which the downstream connection is tunneled.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTunnel | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'protocol': obj.protocol,
    'targetHost': obj.targetHost,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp(obj: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp(obj: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerSimple
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool#http
   */
  readonly http?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer#simple
   */
  readonly simple?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#mode
   */
  readonly mode?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyTlsMode
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerSimple
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool {
  /**
   * HTTP connection pool settings.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool#http
   */
  readonly http?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp;

  /**
   * Settings common to both HTTP and TCP upstream connections.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool#tcp
   */
  readonly tcp?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'http': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj.http),
    'tcp': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj.tcp),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings controlling the load balancer algorithms.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#consistentHash
   */
  readonly consistentHash?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#localityLbSetting
   */
  readonly localityLbSetting?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#simple
   */
  readonly simple?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple;

  /**
   * Represents the warmup duration of Service.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer#warmupDurationSecs
   */
  readonly warmupDurationSecs?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consistentHash': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj.consistentHash),
    'localityLbSetting': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj.localityLbSetting),
    'simple': obj.simple,
    'warmupDurationSecs': obj.warmupDurationSecs,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection {
  /**
   * Minimum ejection duration.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#baseEjectionTime
   */
  readonly baseEjectionTime?: string;

  /**
   * Number of 5xx errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutive5xxErrors
   */
  readonly consecutive5XxErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveErrors
   */
  readonly consecutiveErrors?: number;

  /**
   * Number of gateway errors before a host is ejected from the connection pool.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveGatewayErrors
   */
  readonly consecutiveGatewayErrors?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#consecutiveLocalOriginFailures
   */
  readonly consecutiveLocalOriginFailures?: number;

  /**
   * Time interval between ejection sweep analysis.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#maxEjectionPercent
   */
  readonly maxEjectionPercent?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#minHealthPercent
   */
  readonly minHealthPercent?: number;

  /**
   * Determines whether to distinguish local origin failures from external errors.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection#splitExternalLocalOriginErrors
   */
  readonly splitExternalLocalOriginErrors?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'baseEjectionTime': obj.baseEjectionTime,
    'consecutive5xxErrors': obj.consecutive5XxErrors,
    'consecutiveErrors': obj.consecutiveErrors,
    'consecutiveGatewayErrors': obj.consecutiveGatewayErrors,
    'consecutiveLocalOriginFailures': obj.consecutiveLocalOriginFailures,
    'interval': obj.interval,
    'maxEjectionPercent': obj.maxEjectionPercent,
    'minHealthPercent': obj.minHealthPercent,
    'splitExternalLocalOriginErrors': obj.splitExternalLocalOriginErrors,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TLS related settings for connections to the upstream service.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#clientCertificate
   */
  readonly clientCertificate?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#insecureSkipVerify
   */
  readonly insecureSkipVerify?: boolean;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#mode
   */
  readonly mode?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTlsMode;

  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * SNI string to present to the server during TLS handshake.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#sni
   */
  readonly sni?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'clientCertificate': obj.clientCertificate,
    'credentialName': obj.credentialName,
    'insecureSkipVerify': obj.insecureSkipVerify,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'sni': obj.sni,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTlsMode
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive(obj: DestinationRuleV1Beta1SpecTrafficPolicyConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleV1Beta1SpecTrafficPolicyLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerSimple
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTlsMode
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTP connection pool settings.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#h2UpgradePolicy
   */
  readonly h2UpgradePolicy?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#http1MaxPendingRequests
   */
  readonly http1MaxPendingRequests?: number;

  /**
   * Maximum number of active requests to a destination.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#http2MaxRequests
   */
  readonly http2MaxRequests?: number;

  /**
   * The idle timeout for upstream connection pool connections.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#idleTimeout
   */
  readonly idleTimeout?: string;

  /**
   * Maximum number of requests per connection to a backend.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRequestsPerConnection
   */
  readonly maxRequestsPerConnection?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#maxRetries
   */
  readonly maxRetries?: number;

  /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp#useClientProtocol
   */
  readonly useClientProtocol?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'h2UpgradePolicy': obj.h2UpgradePolicy,
    'http1MaxPendingRequests': obj.http1MaxPendingRequests,
    'http2MaxRequests': obj.http2MaxRequests,
    'idleTimeout': obj.idleTimeout,
    'maxRequestsPerConnection': obj.maxRequestsPerConnection,
    'maxRetries': obj.maxRetries,
    'useClientProtocol': obj.useClientProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Settings common to both HTTP and TCP upstream connections.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
  /**
   * TCP connection timeout.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#connectTimeout
   */
  readonly connectTimeout?: string;

  /**
   * The maximum duration of a connection.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnectionDuration
   */
  readonly maxConnectionDuration?: string;

  /**
   * Maximum number of HTTP1 /TCP connections to a destination host.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#maxConnections
   */
  readonly maxConnections?: number;

  /**
   * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp#tcpKeepalive
   */
  readonly tcpKeepalive?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connectTimeout': obj.connectTimeout,
    'maxConnectionDuration': obj.maxConnectionDuration,
    'maxConnections': obj.maxConnections,
    'tcpKeepalive': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj.tcpKeepalive),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash {
  /**
   * Hash based on HTTP cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpCookie
   */
  readonly httpCookie?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie;

  /**
   * Hash based on a specific HTTP header.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpHeaderName
   */
  readonly httpHeaderName?: string;

  /**
   * Hash based on a specific HTTP query parameter.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#httpQueryParameterName
   */
  readonly httpQueryParameterName?: string;

  /**
   * The Maglev load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#maglev
   */
  readonly maglev?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev;

  /**
   * Deprecated.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

  /**
   * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#ringHash
   */
  readonly ringHash?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash;

  /**
   * Hash based on the source IP address.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash#useSourceIp
   */
  readonly useSourceIp?: boolean;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'httpCookie': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj.httpCookie),
    'httpHeaderName': obj.httpHeaderName,
    'httpQueryParameterName': obj.httpQueryParameterName,
    'maglev': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj.maglev),
    'minimumRingSize': obj.minimumRingSize,
    'ringHash': toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj.ringHash),
    'useSourceIp': obj.useSourceIp,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting {
  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#distribute
   */
  readonly distribute?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute[];

  /**
   * enable locality load balancing, this is DestinationRule-level and will override mesh wide settings in entirety.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#enabled
   */
  readonly enabled?: boolean;

  /**
   * Optional: only one of distribute, failover or failoverPriority can be set.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failover
   */
  readonly failover?: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover[];

  /**
   * failoverPriority is an ordered list of labels used to sort endpoints to do priority based load balancing.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting#failoverPriority
   */
  readonly failoverPriority?: string[];

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSetting | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'distribute': obj.distribute?.map(y => toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(y)),
    'enabled': obj.enabled,
    'failover': obj.failover?.map(y => toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(y)),
    'failoverPriority': obj.failoverPriority?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerSimple {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** LEAST_CONN */
  LEAST_CONN = "LEAST_CONN",
  /** RANDOM */
  RANDOM = "RANDOM",
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** ROUND_ROBIN */
  ROUND_ROBIN = "ROUND_ROBIN",
  /** LEAST_REQUEST */
  LEAST_REQUEST = "LEAST_REQUEST",
}

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTlsMode
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsTlsMode {
  /** DISABLE */
  DISABLE = "DISABLE",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleV1Beta1SpecTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy
 */
export enum DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpH2UpgradePolicy {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** DO_NOT_UPGRADE */
  DO_NOT_UPGRADE = "DO_NOT_UPGRADE",
  /** UPGRADE */
  UPGRADE = "UPGRADE",
}

/**
 * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
  /**
   * The time duration between keep-alive probes.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#interval
   */
  readonly interval?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#probes
   */
  readonly probes?: number;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive#time
   */
  readonly time?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'probes': obj.probes,
    'time': obj.time,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hash based on HTTP cookie.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie {
  /**
   * Name of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#name
   */
  readonly name?: string;

  /**
   * Path to set for the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#path
   */
  readonly path?: string;

  /**
   * Lifetime of the cookie.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie#ttl
   */
  readonly ttl?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashHttpCookie | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
    'ttl': obj.ttl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Maglev load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev {
  /**
   * The table size for Maglev hashing.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev#tableSize
   */
  readonly tableSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashMaglev | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'tableSize': obj.tableSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ring/modulo hash load balancer implements consistent hashing to backend hosts.
 *
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash {
  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash#minimumRingSize
   */
  readonly minimumRingSize?: number;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerConsistentHashRingHash | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minimumRingSize': obj.minimumRingSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute {
  /**
   * Originating locality, '/' separated, e.g.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#from
   */
  readonly from?: string;

  /**
   * Map of upstream localities to traffic distribution weights.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute#to
   */
  readonly to?: { [key: string]: number };

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingDistribute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': ((obj.to) === undefined) ? undefined : (Object.entries(obj.to).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover
 */
export interface DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover {
  /**
   * Originating region.
   *
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#from
   */
  readonly from?: string;

  /**
   * @schema DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover#to
   */
  readonly to?: string;

}

/**
 * Converts an object of type 'DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover(obj: DestinationRuleV1Beta1SpecSubsetsTrafficPolicyPortLevelSettingsLoadBalancerLocalityLbSettingFailover | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from,
    'to': obj.to,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema EnvoyFilter
 */
export class EnvoyFilter extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EnvoyFilter"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'EnvoyFilter',
  }

  /**
   * Renders a Kubernetes manifest for "EnvoyFilter".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EnvoyFilterProps = {}): any {
    return {
      ...EnvoyFilter.GVK,
      ...toJson_EnvoyFilterProps(props),
    };
  }

  /**
   * Defines a "EnvoyFilter" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EnvoyFilterProps = {}) {
    super(scope, id, {
      ...EnvoyFilter.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EnvoyFilter.GVK,
      ...toJson_EnvoyFilterProps(resolved),
    };
  }
}

/**
 * @schema EnvoyFilter
 */
export interface EnvoyFilterProps {
  /**
   * @schema EnvoyFilter#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Customizing Envoy configuration generated by Istio. See more details at: https://istio.io/docs/reference/config/networking/envoy-filter.html
   *
   * @schema EnvoyFilter#spec
   */
  readonly spec?: EnvoyFilterSpec;

}

/**
 * Converts an object of type 'EnvoyFilterProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterProps(obj: EnvoyFilterProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EnvoyFilterSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Customizing Envoy configuration generated by Istio. See more details at: https://istio.io/docs/reference/config/networking/envoy-filter.html
 *
 * @schema EnvoyFilterSpec
 */
export interface EnvoyFilterSpec {
  /**
   * One or more patches with match conditions.
   *
   * @schema EnvoyFilterSpec#configPatches
   */
  readonly configPatches?: EnvoyFilterSpecConfigPatches[];

  /**
   * Priority defines the order in which patch sets are applied within a context.
   *
   * @schema EnvoyFilterSpec#priority
   */
  readonly priority?: number;

  /**
   * @schema EnvoyFilterSpec#workloadSelector
   */
  readonly workloadSelector?: EnvoyFilterSpecWorkloadSelector;

}

/**
 * Converts an object of type 'EnvoyFilterSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpec(obj: EnvoyFilterSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configPatches': obj.configPatches?.map(y => toJson_EnvoyFilterSpecConfigPatches(y)),
    'priority': obj.priority,
    'workloadSelector': toJson_EnvoyFilterSpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvoyFilterSpecConfigPatches
 */
export interface EnvoyFilterSpecConfigPatches {
  /**
   * @schema EnvoyFilterSpecConfigPatches#applyTo
   */
  readonly applyTo?: EnvoyFilterSpecConfigPatchesApplyTo;

  /**
   * Match on listener/route configuration/cluster.
   *
   * @schema EnvoyFilterSpecConfigPatches#match
   */
  readonly match?: EnvoyFilterSpecConfigPatchesMatch;

  /**
   * The patch to apply along with the operation.
   *
   * @schema EnvoyFilterSpecConfigPatches#patch
   */
  readonly patch?: EnvoyFilterSpecConfigPatchesPatch;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatches(obj: EnvoyFilterSpecConfigPatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applyTo': obj.applyTo,
    'match': toJson_EnvoyFilterSpecConfigPatchesMatch(obj.match),
    'patch': toJson_EnvoyFilterSpecConfigPatchesPatch(obj.patch),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvoyFilterSpecWorkloadSelector
 */
export interface EnvoyFilterSpecWorkloadSelector {
  /**
   * @schema EnvoyFilterSpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'EnvoyFilterSpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecWorkloadSelector(obj: EnvoyFilterSpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvoyFilterSpecConfigPatchesApplyTo
 */
export enum EnvoyFilterSpecConfigPatchesApplyTo {
  /** INVALID */
  INVALID = "INVALID",
  /** LISTENER */
  LISTENER = "LISTENER",
  /** FILTER_CHAIN */
  FILTER_CHAIN = "FILTER_CHAIN",
  /** NETWORK_FILTER */
  NETWORK_FILTER = "NETWORK_FILTER",
  /** HTTP_FILTER */
  HTTP_FILTER = "HTTP_FILTER",
  /** ROUTE_CONFIGURATION */
  ROUTE_CONFIGURATION = "ROUTE_CONFIGURATION",
  /** VIRTUAL_HOST */
  VIRTUAL_HOST = "VIRTUAL_HOST",
  /** HTTP_ROUTE */
  HTTP_ROUTE = "HTTP_ROUTE",
  /** CLUSTER */
  CLUSTER = "CLUSTER",
  /** EXTENSION_CONFIG */
  EXTENSION_CONFIG = "EXTENSION_CONFIG",
  /** BOOTSTRAP */
  BOOTSTRAP = "BOOTSTRAP",
  /** LISTENER_FILTER */
  LISTENER_FILTER = "LISTENER_FILTER",
}

/**
 * Match on listener/route configuration/cluster.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatch
 */
export interface EnvoyFilterSpecConfigPatchesMatch {
  /**
   * Match on envoy cluster attributes.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatch#cluster
   */
  readonly cluster?: EnvoyFilterSpecConfigPatchesMatchCluster;

  /**
   * The specific config generation context to match on.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatch#context
   */
  readonly context?: EnvoyFilterSpecConfigPatchesMatchContext;

  /**
   * Match on envoy listener attributes.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatch#listener
   */
  readonly listener?: EnvoyFilterSpecConfigPatchesMatchListener;

  /**
   * Match on properties associated with a proxy.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatch#proxy
   */
  readonly proxy?: EnvoyFilterSpecConfigPatchesMatchProxy;

  /**
   * Match on envoy HTTP route configuration attributes.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatch#routeConfiguration
   */
  readonly routeConfiguration?: EnvoyFilterSpecConfigPatchesMatchRouteConfiguration;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatch(obj: EnvoyFilterSpecConfigPatchesMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cluster': toJson_EnvoyFilterSpecConfigPatchesMatchCluster(obj.cluster),
    'context': obj.context,
    'listener': toJson_EnvoyFilterSpecConfigPatchesMatchListener(obj.listener),
    'proxy': toJson_EnvoyFilterSpecConfigPatchesMatchProxy(obj.proxy),
    'routeConfiguration': toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfiguration(obj.routeConfiguration),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The patch to apply along with the operation.
 *
 * @schema EnvoyFilterSpecConfigPatchesPatch
 */
export interface EnvoyFilterSpecConfigPatchesPatch {
  /**
   * Determines the filter insertion order.
   *
   * @schema EnvoyFilterSpecConfigPatchesPatch#filterClass
   */
  readonly filterClass?: EnvoyFilterSpecConfigPatchesPatchFilterClass;

  /**
   * Determines how the patch should be applied.
   *
   * @schema EnvoyFilterSpecConfigPatchesPatch#operation
   */
  readonly operation?: EnvoyFilterSpecConfigPatchesPatchOperation;

  /**
   * The JSON config of the object being patched.
   *
   * @schema EnvoyFilterSpecConfigPatchesPatch#value
   */
  readonly value?: any;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesPatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesPatch(obj: EnvoyFilterSpecConfigPatchesPatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filterClass': obj.filterClass,
    'operation': obj.operation,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match on envoy cluster attributes.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchCluster
 */
export interface EnvoyFilterSpecConfigPatchesMatchCluster {
  /**
   * The exact name of the cluster to match.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchCluster#name
   */
  readonly name?: string;

  /**
   * The service port for which this cluster was generated.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchCluster#portNumber
   */
  readonly portNumber?: number;

  /**
   * The fully qualified service name for this cluster.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchCluster#service
   */
  readonly service?: string;

  /**
   * The subset associated with the service.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchCluster#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchCluster' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchCluster(obj: EnvoyFilterSpecConfigPatchesMatchCluster | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'portNumber': obj.portNumber,
    'service': obj.service,
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The specific config generation context to match on.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchContext
 */
export enum EnvoyFilterSpecConfigPatchesMatchContext {
  /** ANY */
  ANY = "ANY",
  /** SIDECAR_INBOUND */
  SIDECAR_INBOUND = "SIDECAR_INBOUND",
  /** SIDECAR_OUTBOUND */
  SIDECAR_OUTBOUND = "SIDECAR_OUTBOUND",
  /** GATEWAY */
  GATEWAY = "GATEWAY",
}

/**
 * Match on envoy listener attributes.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchListener
 */
export interface EnvoyFilterSpecConfigPatchesMatchListener {
  /**
   * Match a specific filter chain in a listener.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListener#filterChain
   */
  readonly filterChain?: EnvoyFilterSpecConfigPatchesMatchListenerFilterChain;

  /**
   * Match a specific listener filter.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListener#listenerFilter
   */
  readonly listenerFilter?: string;

  /**
   * Match a specific listener by its name.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListener#name
   */
  readonly name?: string;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchListener#portName
   */
  readonly portName?: string;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchListener#portNumber
   */
  readonly portNumber?: number;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchListener' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchListener(obj: EnvoyFilterSpecConfigPatchesMatchListener | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'filterChain': toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChain(obj.filterChain),
    'listenerFilter': obj.listenerFilter,
    'name': obj.name,
    'portName': obj.portName,
    'portNumber': obj.portNumber,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match on properties associated with a proxy.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchProxy
 */
export interface EnvoyFilterSpecConfigPatchesMatchProxy {
  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchProxy#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchProxy#proxyVersion
   */
  readonly proxyVersion?: string;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchProxy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchProxy(obj: EnvoyFilterSpecConfigPatchesMatchProxy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'proxyVersion': obj.proxyVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match on envoy HTTP route configuration attributes.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration
 */
export interface EnvoyFilterSpecConfigPatchesMatchRouteConfiguration {
  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration#gateway
   */
  readonly gateway?: string;

  /**
   * Route configuration name to match on.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration#name
   */
  readonly name?: string;

  /**
   * Applicable only for GATEWAY context.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration#portName
   */
  readonly portName?: string;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration#portNumber
   */
  readonly portNumber?: number;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfiguration#vhost
   */
  readonly vhost?: EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchRouteConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfiguration(obj: EnvoyFilterSpecConfigPatchesMatchRouteConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gateway': obj.gateway,
    'name': obj.name,
    'portName': obj.portName,
    'portNumber': obj.portNumber,
    'vhost': toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost(obj.vhost),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Determines the filter insertion order.
 *
 * @schema EnvoyFilterSpecConfigPatchesPatchFilterClass
 */
export enum EnvoyFilterSpecConfigPatchesPatchFilterClass {
  /** UNSPECIFIED */
  UNSPECIFIED = "UNSPECIFIED",
  /** AUTHN */
  AUTHN = "AUTHN",
  /** AUTHZ */
  AUTHZ = "AUTHZ",
  /** STATS */
  STATS = "STATS",
}

/**
 * Determines how the patch should be applied.
 *
 * @schema EnvoyFilterSpecConfigPatchesPatchOperation
 */
export enum EnvoyFilterSpecConfigPatchesPatchOperation {
  /** INVALID */
  INVALID = "INVALID",
  /** MERGE */
  MERGE = "MERGE",
  /** ADD */
  ADD = "ADD",
  /** REMOVE */
  REMOVE = "REMOVE",
  /** INSERT_BEFORE */
  INSERT_BEFORE = "INSERT_BEFORE",
  /** INSERT_AFTER */
  INSERT_AFTER = "INSERT_AFTER",
  /** INSERT_FIRST */
  INSERT_FIRST = "INSERT_FIRST",
  /** REPLACE */
  REPLACE = "REPLACE",
}

/**
 * Match a specific filter chain in a listener.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain
 */
export interface EnvoyFilterSpecConfigPatchesMatchListenerFilterChain {
  /**
   * Applies only to sidecars.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#applicationProtocols
   */
  readonly applicationProtocols?: string;

  /**
   * The destination_port value used by a filter chain's match condition.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#destinationPort
   */
  readonly destinationPort?: number;

  /**
   * The name of a specific filter to apply the patch to.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#filter
   */
  readonly filter?: EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter;

  /**
   * The name assigned to the filter chain.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#name
   */
  readonly name?: string;

  /**
   * The SNI value used by a filter chain's match condition.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#sni
   */
  readonly sni?: string;

  /**
   * Applies only to `SIDECAR_INBOUND` context.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChain#transportProtocol
   */
  readonly transportProtocol?: string;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchListenerFilterChain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChain(obj: EnvoyFilterSpecConfigPatchesMatchListenerFilterChain | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'applicationProtocols': obj.applicationProtocols,
    'destinationPort': obj.destinationPort,
    'filter': toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter(obj.filter),
    'name': obj.name,
    'sni': obj.sni,
    'transportProtocol': obj.transportProtocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost
 */
export interface EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost {
  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost#name
   */
  readonly name?: string;

  /**
   * Match a specific route within the virtual host.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost#route
   */
  readonly route?: EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost(obj: EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhost | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'route': toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute(obj.route),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The name of a specific filter to apply the patch to.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter
 */
export interface EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter {
  /**
   * The filter name to match on.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter#name
   */
  readonly name?: string;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter#subFilter
   */
  readonly subFilter?: EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter(obj: EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'subFilter': toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter(obj.subFilter),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match a specific route within the virtual host.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute
 */
export interface EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute {
  /**
   * Match a route with specific action type.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute#action
   */
  readonly action?: EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRouteAction;

  /**
   * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute(obj: EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter
 */
export interface EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter {
  /**
   * The filter name to match on.
   *
   * @schema EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter(obj: EnvoyFilterSpecConfigPatchesMatchListenerFilterChainFilterSubFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Match a route with specific action type.
 *
 * @schema EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRouteAction
 */
export enum EnvoyFilterSpecConfigPatchesMatchRouteConfigurationVhostRouteAction {
  /** ANY */
  ANY = "ANY",
  /** ROUTE */
  ROUTE = "ROUTE",
  /** REDIRECT */
  REDIRECT = "REDIRECT",
  /** DIRECT_RESPONSE */
  DIRECT_RESPONSE = "DIRECT_RESPONSE",
}


/**
 *
 *
 * @schema Gateway
 */
export class Gateway extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Gateway"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'Gateway',
  }

  /**
   * Renders a Kubernetes manifest for "Gateway".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayProps = {}): any {
    return {
      ...Gateway.GVK,
      ...toJson_GatewayProps(props),
    };
  }

  /**
   * Defines a "Gateway" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayProps = {}) {
    super(scope, id, {
      ...Gateway.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Gateway.GVK,
      ...toJson_GatewayProps(resolved),
    };
  }
}

/**
 * @schema Gateway
 */
export interface GatewayProps {
  /**
   * @schema Gateway#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
   *
   * @schema Gateway#spec
   */
  readonly spec?: GatewaySpec;

}

/**
 * Converts an object of type 'GatewayProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayProps(obj: GatewayProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewaySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
 *
 * @schema GatewaySpec
 */
export interface GatewaySpec {
  /**
   * @schema GatewaySpec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * A list of server specifications.
   *
   * @schema GatewaySpec#servers
   */
  readonly servers?: GatewaySpecServers[];

}

/**
 * Converts an object of type 'GatewaySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpec(obj: GatewaySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'servers': obj.servers?.map(y => toJson_GatewaySpecServers(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewaySpecServers
 */
export interface GatewaySpecServers {
  /**
   * @schema GatewaySpecServers#bind
   */
  readonly bind?: string;

  /**
   * @schema GatewaySpecServers#defaultEndpoint
   */
  readonly defaultEndpoint?: string;

  /**
   * One or more hosts exposed by this gateway.
   *
   * @schema GatewaySpecServers#hosts
   */
  readonly hosts?: string[];

  /**
   * An optional name of the server, when set must be unique across all servers.
   *
   * @schema GatewaySpecServers#name
   */
  readonly name?: string;

  /**
   * @schema GatewaySpecServers#port
   */
  readonly port?: GatewaySpecServersPort;

  /**
   * Set of TLS related options that govern the server's behavior.
   *
   * @schema GatewaySpecServers#tls
   */
  readonly tls?: GatewaySpecServersTls;

}

/**
 * Converts an object of type 'GatewaySpecServers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecServers(obj: GatewaySpecServers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'defaultEndpoint': obj.defaultEndpoint,
    'hosts': obj.hosts?.map(y => y),
    'name': obj.name,
    'port': toJson_GatewaySpecServersPort(obj.port),
    'tls': toJson_GatewaySpecServersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewaySpecServersPort
 */
export interface GatewaySpecServersPort {
  /**
   * Label assigned to the port.
   *
   * @schema GatewaySpecServersPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema GatewaySpecServersPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema GatewaySpecServersPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema GatewaySpecServersPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'GatewaySpecServersPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecServersPort(obj: GatewaySpecServersPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set of TLS related options that govern the server's behavior.
 *
 * @schema GatewaySpecServersTls
 */
export interface GatewaySpecServersTls {
  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema GatewaySpecServersTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * Optional: If specified, only support the specified cipher list.
   *
   * @schema GatewaySpecServersTls#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * @schema GatewaySpecServersTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema GatewaySpecServersTls#httpsRedirect
   */
  readonly httpsRedirect?: boolean;

  /**
   * Optional: Maximum TLS protocol version.
   *
   * @schema GatewaySpecServersTls#maxProtocolVersion
   */
  readonly maxProtocolVersion?: GatewaySpecServersTlsMaxProtocolVersion;

  /**
   * Optional: Minimum TLS protocol version.
   *
   * @schema GatewaySpecServersTls#minProtocolVersion
   */
  readonly minProtocolVersion?: GatewaySpecServersTlsMinProtocolVersion;

  /**
   * @schema GatewaySpecServersTls#mode
   */
  readonly mode?: GatewaySpecServersTlsMode;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema GatewaySpecServersTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema GatewaySpecServersTls#serverCertificate
   */
  readonly serverCertificate?: string;

  /**
   * @schema GatewaySpecServersTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * @schema GatewaySpecServersTls#verifyCertificateHash
   */
  readonly verifyCertificateHash?: string[];

  /**
   * @schema GatewaySpecServersTls#verifyCertificateSpki
   */
  readonly verifyCertificateSpki?: string[];

}

/**
 * Converts an object of type 'GatewaySpecServersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewaySpecServersTls(obj: GatewaySpecServersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'cipherSuites': obj.cipherSuites?.map(y => y),
    'credentialName': obj.credentialName,
    'httpsRedirect': obj.httpsRedirect,
    'maxProtocolVersion': obj.maxProtocolVersion,
    'minProtocolVersion': obj.minProtocolVersion,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'serverCertificate': obj.serverCertificate,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'verifyCertificateHash': obj.verifyCertificateHash?.map(y => y),
    'verifyCertificateSpki': obj.verifyCertificateSpki?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional: Maximum TLS protocol version.
 *
 * @schema GatewaySpecServersTlsMaxProtocolVersion
 */
export enum GatewaySpecServersTlsMaxProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * Optional: Minimum TLS protocol version.
 *
 * @schema GatewaySpecServersTlsMinProtocolVersion
 */
export enum GatewaySpecServersTlsMinProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * @schema GatewaySpecServersTlsMode
 */
export enum GatewaySpecServersTlsMode {
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** AUTO_PASSTHROUGH */
  AUTO_PASSTHROUGH = "AUTO_PASSTHROUGH",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}


/**
 *
 *
 * @schema GatewayV1Beta1
 */
export class GatewayV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GatewayV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'Gateway',
  }

  /**
   * Renders a Kubernetes manifest for "GatewayV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GatewayV1Beta1Props = {}): any {
    return {
      ...GatewayV1Beta1.GVK,
      ...toJson_GatewayV1Beta1Props(props),
    };
  }

  /**
   * Defines a "GatewayV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GatewayV1Beta1Props = {}) {
    super(scope, id, {
      ...GatewayV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GatewayV1Beta1.GVK,
      ...toJson_GatewayV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema GatewayV1Beta1
 */
export interface GatewayV1Beta1Props {
  /**
   * @schema GatewayV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
   *
   * @schema GatewayV1Beta1#spec
   */
  readonly spec?: GatewayV1Beta1Spec;

}

/**
 * Converts an object of type 'GatewayV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1Props(obj: GatewayV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GatewayV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
 *
 * @schema GatewayV1Beta1Spec
 */
export interface GatewayV1Beta1Spec {
  /**
   * @schema GatewayV1Beta1Spec#selector
   */
  readonly selector?: { [key: string]: string };

  /**
   * A list of server specifications.
   *
   * @schema GatewayV1Beta1Spec#servers
   */
  readonly servers?: GatewayV1Beta1SpecServers[];

}

/**
 * Converts an object of type 'GatewayV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1Spec(obj: GatewayV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'selector': ((obj.selector) === undefined) ? undefined : (Object.entries(obj.selector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'servers': obj.servers?.map(y => toJson_GatewayV1Beta1SpecServers(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewayV1Beta1SpecServers
 */
export interface GatewayV1Beta1SpecServers {
  /**
   * @schema GatewayV1Beta1SpecServers#bind
   */
  readonly bind?: string;

  /**
   * @schema GatewayV1Beta1SpecServers#defaultEndpoint
   */
  readonly defaultEndpoint?: string;

  /**
   * One or more hosts exposed by this gateway.
   *
   * @schema GatewayV1Beta1SpecServers#hosts
   */
  readonly hosts?: string[];

  /**
   * An optional name of the server, when set must be unique across all servers.
   *
   * @schema GatewayV1Beta1SpecServers#name
   */
  readonly name?: string;

  /**
   * @schema GatewayV1Beta1SpecServers#port
   */
  readonly port?: GatewayV1Beta1SpecServersPort;

  /**
   * Set of TLS related options that govern the server's behavior.
   *
   * @schema GatewayV1Beta1SpecServers#tls
   */
  readonly tls?: GatewayV1Beta1SpecServersTls;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecServers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecServers(obj: GatewayV1Beta1SpecServers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'defaultEndpoint': obj.defaultEndpoint,
    'hosts': obj.hosts?.map(y => y),
    'name': obj.name,
    'port': toJson_GatewayV1Beta1SpecServersPort(obj.port),
    'tls': toJson_GatewayV1Beta1SpecServersTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema GatewayV1Beta1SpecServersPort
 */
export interface GatewayV1Beta1SpecServersPort {
  /**
   * Label assigned to the port.
   *
   * @schema GatewayV1Beta1SpecServersPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema GatewayV1Beta1SpecServersPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema GatewayV1Beta1SpecServersPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema GatewayV1Beta1SpecServersPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecServersPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecServersPort(obj: GatewayV1Beta1SpecServersPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Set of TLS related options that govern the server's behavior.
 *
 * @schema GatewayV1Beta1SpecServersTls
 */
export interface GatewayV1Beta1SpecServersTls {
  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema GatewayV1Beta1SpecServersTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * Optional: If specified, only support the specified cipher list.
   *
   * @schema GatewayV1Beta1SpecServersTls#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * @schema GatewayV1Beta1SpecServersTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema GatewayV1Beta1SpecServersTls#httpsRedirect
   */
  readonly httpsRedirect?: boolean;

  /**
   * Optional: Maximum TLS protocol version.
   *
   * @schema GatewayV1Beta1SpecServersTls#maxProtocolVersion
   */
  readonly maxProtocolVersion?: GatewayV1Beta1SpecServersTlsMaxProtocolVersion;

  /**
   * Optional: Minimum TLS protocol version.
   *
   * @schema GatewayV1Beta1SpecServersTls#minProtocolVersion
   */
  readonly minProtocolVersion?: GatewayV1Beta1SpecServersTlsMinProtocolVersion;

  /**
   * @schema GatewayV1Beta1SpecServersTls#mode
   */
  readonly mode?: GatewayV1Beta1SpecServersTlsMode;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema GatewayV1Beta1SpecServersTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema GatewayV1Beta1SpecServersTls#serverCertificate
   */
  readonly serverCertificate?: string;

  /**
   * @schema GatewayV1Beta1SpecServersTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * @schema GatewayV1Beta1SpecServersTls#verifyCertificateHash
   */
  readonly verifyCertificateHash?: string[];

  /**
   * @schema GatewayV1Beta1SpecServersTls#verifyCertificateSpki
   */
  readonly verifyCertificateSpki?: string[];

}

/**
 * Converts an object of type 'GatewayV1Beta1SpecServersTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GatewayV1Beta1SpecServersTls(obj: GatewayV1Beta1SpecServersTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'cipherSuites': obj.cipherSuites?.map(y => y),
    'credentialName': obj.credentialName,
    'httpsRedirect': obj.httpsRedirect,
    'maxProtocolVersion': obj.maxProtocolVersion,
    'minProtocolVersion': obj.minProtocolVersion,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'serverCertificate': obj.serverCertificate,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'verifyCertificateHash': obj.verifyCertificateHash?.map(y => y),
    'verifyCertificateSpki': obj.verifyCertificateSpki?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional: Maximum TLS protocol version.
 *
 * @schema GatewayV1Beta1SpecServersTlsMaxProtocolVersion
 */
export enum GatewayV1Beta1SpecServersTlsMaxProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * Optional: Minimum TLS protocol version.
 *
 * @schema GatewayV1Beta1SpecServersTlsMinProtocolVersion
 */
export enum GatewayV1Beta1SpecServersTlsMinProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * @schema GatewayV1Beta1SpecServersTlsMode
 */
export enum GatewayV1Beta1SpecServersTlsMode {
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** AUTO_PASSTHROUGH */
  AUTO_PASSTHROUGH = "AUTO_PASSTHROUGH",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}


/**
 *
 *
 * @schema ProxyConfig
 */
export class ProxyConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProxyConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'ProxyConfig',
  }

  /**
   * Renders a Kubernetes manifest for "ProxyConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProxyConfigProps = {}): any {
    return {
      ...ProxyConfig.GVK,
      ...toJson_ProxyConfigProps(props),
    };
  }

  /**
   * Defines a "ProxyConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProxyConfigProps = {}) {
    super(scope, id, {
      ...ProxyConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ProxyConfig.GVK,
      ...toJson_ProxyConfigProps(resolved),
    };
  }
}

/**
 * @schema ProxyConfig
 */
export interface ProxyConfigProps {
  /**
   * @schema ProxyConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
   *
   * @schema ProxyConfig#spec
   */
  readonly spec?: ProxyConfigSpec;

}

/**
 * Converts an object of type 'ProxyConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigProps(obj: ProxyConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProxyConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
 *
 * @schema ProxyConfigSpec
 */
export interface ProxyConfigSpec {
  /**
   * The number of worker threads to run.
   *
   * @schema ProxyConfigSpec#concurrency
   */
  readonly concurrency?: number;

  /**
   * Additional environment variables for the proxy.
   *
   * @schema ProxyConfigSpec#environmentVariables
   */
  readonly environmentVariables?: { [key: string]: string };

  /**
   * Specifies the details of the proxy image.
   *
   * @schema ProxyConfigSpec#image
   */
  readonly image?: ProxyConfigSpecImage;

  /**
   * Optional.
   *
   * @schema ProxyConfigSpec#selector
   */
  readonly selector?: ProxyConfigSpecSelector;

}

/**
 * Converts an object of type 'ProxyConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpec(obj: ProxyConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'concurrency': obj.concurrency,
    'environmentVariables': ((obj.environmentVariables) === undefined) ? undefined : (Object.entries(obj.environmentVariables).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'image': toJson_ProxyConfigSpecImage(obj.image),
    'selector': toJson_ProxyConfigSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the details of the proxy image.
 *
 * @schema ProxyConfigSpecImage
 */
export interface ProxyConfigSpecImage {
  /**
   * The image type of the image.
   *
   * @schema ProxyConfigSpecImage#imageType
   */
  readonly imageType?: string;

}

/**
 * Converts an object of type 'ProxyConfigSpecImage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpecImage(obj: ProxyConfigSpecImage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'imageType': obj.imageType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema ProxyConfigSpecSelector
 */
export interface ProxyConfigSpecSelector {
  /**
   * @schema ProxyConfigSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ProxyConfigSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProxyConfigSpecSelector(obj: ProxyConfigSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ServiceEntry
 */
export class ServiceEntry extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServiceEntry"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'ServiceEntry',
  }

  /**
   * Renders a Kubernetes manifest for "ServiceEntry".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServiceEntryProps = {}): any {
    return {
      ...ServiceEntry.GVK,
      ...toJson_ServiceEntryProps(props),
    };
  }

  /**
   * Defines a "ServiceEntry" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServiceEntryProps = {}) {
    super(scope, id, {
      ...ServiceEntry.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServiceEntry.GVK,
      ...toJson_ServiceEntryProps(resolved),
    };
  }
}

/**
 * @schema ServiceEntry
 */
export interface ServiceEntryProps {
  /**
   * @schema ServiceEntry#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
   *
   * @schema ServiceEntry#spec
   */
  readonly spec?: ServiceEntrySpec;

}

/**
 * Converts an object of type 'ServiceEntryProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryProps(obj: ServiceEntryProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ServiceEntrySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
 *
 * @schema ServiceEntrySpec
 */
export interface ServiceEntrySpec {
  /**
   * The virtual IP addresses associated with the service.
   *
   * @schema ServiceEntrySpec#addresses
   */
  readonly addresses?: string[];

  /**
   * One or more endpoints associated with the service.
   *
   * @schema ServiceEntrySpec#endpoints
   */
  readonly endpoints?: ServiceEntrySpecEndpoints[];

  /**
   * A list of namespaces to which this service is exported.
   *
   * @schema ServiceEntrySpec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The hosts associated with the ServiceEntry.
   *
   * @schema ServiceEntrySpec#hosts
   */
  readonly hosts?: string[];

  /**
   * @schema ServiceEntrySpec#location
   */
  readonly location?: ServiceEntrySpecLocation;

  /**
   * The ports associated with the external service.
   *
   * @schema ServiceEntrySpec#ports
   */
  readonly ports?: ServiceEntrySpecPorts[];

  /**
   * Service resolution mode for the hosts.
   *
   * @schema ServiceEntrySpec#resolution
   */
  readonly resolution?: ServiceEntrySpecResolution;

  /**
   * @schema ServiceEntrySpec#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * Applicable only for MESH_INTERNAL services.
   *
   * @schema ServiceEntrySpec#workloadSelector
   */
  readonly workloadSelector?: ServiceEntrySpecWorkloadSelector;

}

/**
 * Converts an object of type 'ServiceEntrySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpec(obj: ServiceEntrySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => y),
    'endpoints': obj.endpoints?.map(y => toJson_ServiceEntrySpecEndpoints(y)),
    'exportTo': obj.exportTo?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'location': obj.location,
    'ports': obj.ports?.map(y => toJson_ServiceEntrySpecPorts(y)),
    'resolution': obj.resolution,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'workloadSelector': toJson_ServiceEntrySpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntrySpecEndpoints
 */
export interface ServiceEntrySpecEndpoints {
  /**
   * @schema ServiceEntrySpecEndpoints#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#locality
   */
  readonly locality?: string;

  /**
   * @schema ServiceEntrySpecEndpoints#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema ServiceEntrySpecEndpoints#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema ServiceEntrySpecEndpoints#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ServiceEntrySpecEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecEndpoints(obj: ServiceEntrySpecEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntrySpecLocation
 */
export enum ServiceEntrySpecLocation {
  /** MESH_EXTERNAL */
  MESH_EXTERNAL = "MESH_EXTERNAL",
  /** MESH_INTERNAL */
  MESH_INTERNAL = "MESH_INTERNAL",
}

/**
 * @schema ServiceEntrySpecPorts
 */
export interface ServiceEntrySpecPorts {
  /**
   * Label assigned to the port.
   *
   * @schema ServiceEntrySpecPorts#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema ServiceEntrySpecPorts#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema ServiceEntrySpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * @schema ServiceEntrySpecPorts#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'ServiceEntrySpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecPorts(obj: ServiceEntrySpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service resolution mode for the hosts.
 *
 * @schema ServiceEntrySpecResolution
 */
export enum ServiceEntrySpecResolution {
  /** NONE */
  NONE = "NONE",
  /** STATIC */
  STATIC = "STATIC",
  /** DNS */
  DNS = "DNS",
  /** DNS_ROUND_ROBIN */
  DNS_ROUND_ROBIN = "DNS_ROUND_ROBIN",
}

/**
 * Applicable only for MESH_INTERNAL services.
 *
 * @schema ServiceEntrySpecWorkloadSelector
 */
export interface ServiceEntrySpecWorkloadSelector {
  /**
   * @schema ServiceEntrySpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ServiceEntrySpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntrySpecWorkloadSelector(obj: ServiceEntrySpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema ServiceEntryV1Beta1
 */
export class ServiceEntryV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ServiceEntryV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'ServiceEntry',
  }

  /**
   * Renders a Kubernetes manifest for "ServiceEntryV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ServiceEntryV1Beta1Props = {}): any {
    return {
      ...ServiceEntryV1Beta1.GVK,
      ...toJson_ServiceEntryV1Beta1Props(props),
    };
  }

  /**
   * Defines a "ServiceEntryV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ServiceEntryV1Beta1Props = {}) {
    super(scope, id, {
      ...ServiceEntryV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ServiceEntryV1Beta1.GVK,
      ...toJson_ServiceEntryV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema ServiceEntryV1Beta1
 */
export interface ServiceEntryV1Beta1Props {
  /**
   * @schema ServiceEntryV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
   *
   * @schema ServiceEntryV1Beta1#spec
   */
  readonly spec?: ServiceEntryV1Beta1Spec;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1Props(obj: ServiceEntryV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ServiceEntryV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
 *
 * @schema ServiceEntryV1Beta1Spec
 */
export interface ServiceEntryV1Beta1Spec {
  /**
   * The virtual IP addresses associated with the service.
   *
   * @schema ServiceEntryV1Beta1Spec#addresses
   */
  readonly addresses?: string[];

  /**
   * One or more endpoints associated with the service.
   *
   * @schema ServiceEntryV1Beta1Spec#endpoints
   */
  readonly endpoints?: ServiceEntryV1Beta1SpecEndpoints[];

  /**
   * A list of namespaces to which this service is exported.
   *
   * @schema ServiceEntryV1Beta1Spec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The hosts associated with the ServiceEntry.
   *
   * @schema ServiceEntryV1Beta1Spec#hosts
   */
  readonly hosts?: string[];

  /**
   * @schema ServiceEntryV1Beta1Spec#location
   */
  readonly location?: ServiceEntryV1Beta1SpecLocation;

  /**
   * The ports associated with the external service.
   *
   * @schema ServiceEntryV1Beta1Spec#ports
   */
  readonly ports?: ServiceEntryV1Beta1SpecPorts[];

  /**
   * Service resolution mode for the hosts.
   *
   * @schema ServiceEntryV1Beta1Spec#resolution
   */
  readonly resolution?: ServiceEntryV1Beta1SpecResolution;

  /**
   * @schema ServiceEntryV1Beta1Spec#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * Applicable only for MESH_INTERNAL services.
   *
   * @schema ServiceEntryV1Beta1Spec#workloadSelector
   */
  readonly workloadSelector?: ServiceEntryV1Beta1SpecWorkloadSelector;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1Spec(obj: ServiceEntryV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'addresses': obj.addresses?.map(y => y),
    'endpoints': obj.endpoints?.map(y => toJson_ServiceEntryV1Beta1SpecEndpoints(y)),
    'exportTo': obj.exportTo?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'location': obj.location,
    'ports': obj.ports?.map(y => toJson_ServiceEntryV1Beta1SpecPorts(y)),
    'resolution': obj.resolution,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'workloadSelector': toJson_ServiceEntryV1Beta1SpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntryV1Beta1SpecEndpoints
 */
export interface ServiceEntryV1Beta1SpecEndpoints {
  /**
   * @schema ServiceEntryV1Beta1SpecEndpoints#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#locality
   */
  readonly locality?: string;

  /**
   * @schema ServiceEntryV1Beta1SpecEndpoints#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema ServiceEntryV1Beta1SpecEndpoints#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema ServiceEntryV1Beta1SpecEndpoints#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecEndpoints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecEndpoints(obj: ServiceEntryV1Beta1SpecEndpoints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ServiceEntryV1Beta1SpecLocation
 */
export enum ServiceEntryV1Beta1SpecLocation {
  /** MESH_EXTERNAL */
  MESH_EXTERNAL = "MESH_EXTERNAL",
  /** MESH_INTERNAL */
  MESH_INTERNAL = "MESH_INTERNAL",
}

/**
 * @schema ServiceEntryV1Beta1SpecPorts
 */
export interface ServiceEntryV1Beta1SpecPorts {
  /**
   * Label assigned to the port.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema ServiceEntryV1Beta1SpecPorts#protocol
   */
  readonly protocol?: string;

  /**
   * @schema ServiceEntryV1Beta1SpecPorts#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecPorts(obj: ServiceEntryV1Beta1SpecPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Service resolution mode for the hosts.
 *
 * @schema ServiceEntryV1Beta1SpecResolution
 */
export enum ServiceEntryV1Beta1SpecResolution {
  /** NONE */
  NONE = "NONE",
  /** STATIC */
  STATIC = "STATIC",
  /** DNS */
  DNS = "DNS",
  /** DNS_ROUND_ROBIN */
  DNS_ROUND_ROBIN = "DNS_ROUND_ROBIN",
}

/**
 * Applicable only for MESH_INTERNAL services.
 *
 * @schema ServiceEntryV1Beta1SpecWorkloadSelector
 */
export interface ServiceEntryV1Beta1SpecWorkloadSelector {
  /**
   * @schema ServiceEntryV1Beta1SpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'ServiceEntryV1Beta1SpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ServiceEntryV1Beta1SpecWorkloadSelector(obj: ServiceEntryV1Beta1SpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema Sidecar
 */
export class Sidecar extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Sidecar"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'Sidecar',
  }

  /**
   * Renders a Kubernetes manifest for "Sidecar".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SidecarProps = {}): any {
    return {
      ...Sidecar.GVK,
      ...toJson_SidecarProps(props),
    };
  }

  /**
   * Defines a "Sidecar" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SidecarProps = {}) {
    super(scope, id, {
      ...Sidecar.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Sidecar.GVK,
      ...toJson_SidecarProps(resolved),
    };
  }
}

/**
 * @schema Sidecar
 */
export interface SidecarProps {
  /**
   * @schema Sidecar#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
   *
   * @schema Sidecar#spec
   */
  readonly spec?: SidecarSpec;

}

/**
 * Converts an object of type 'SidecarProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarProps(obj: SidecarProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SidecarSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
 *
 * @schema SidecarSpec
 */
export interface SidecarSpec {
  /**
   * @schema SidecarSpec#egress
   */
  readonly egress?: SidecarSpecEgress[];

  /**
   * @schema SidecarSpec#ingress
   */
  readonly ingress?: SidecarSpecIngress[];

  /**
   * Configuration for the outbound traffic policy.
   *
   * @schema SidecarSpec#outboundTrafficPolicy
   */
  readonly outboundTrafficPolicy?: SidecarSpecOutboundTrafficPolicy;

  /**
   * @schema SidecarSpec#workloadSelector
   */
  readonly workloadSelector?: SidecarSpecWorkloadSelector;

}

/**
 * Converts an object of type 'SidecarSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpec(obj: SidecarSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'egress': obj.egress?.map(y => toJson_SidecarSpecEgress(y)),
    'ingress': obj.ingress?.map(y => toJson_SidecarSpecIngress(y)),
    'outboundTrafficPolicy': toJson_SidecarSpecOutboundTrafficPolicy(obj.outboundTrafficPolicy),
    'workloadSelector': toJson_SidecarSpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecEgress
 */
export interface SidecarSpecEgress {
  /**
   * @schema SidecarSpecEgress#bind
   */
  readonly bind?: string;

  /**
   * @schema SidecarSpecEgress#captureMode
   */
  readonly captureMode?: SidecarSpecEgressCaptureMode;

  /**
   * @schema SidecarSpecEgress#hosts
   */
  readonly hosts?: string[];

  /**
   * The port associated with the listener.
   *
   * @schema SidecarSpecEgress#port
   */
  readonly port?: SidecarSpecEgressPort;

}

/**
 * Converts an object of type 'SidecarSpecEgress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecEgress(obj: SidecarSpecEgress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'captureMode': obj.captureMode,
    'hosts': obj.hosts?.map(y => y),
    'port': toJson_SidecarSpecEgressPort(obj.port),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecIngress
 */
export interface SidecarSpecIngress {
  /**
   * The IP(IPv4 or IPv6) to which the listener should be bound.
   *
   * @schema SidecarSpecIngress#bind
   */
  readonly bind?: string;

  /**
   * @schema SidecarSpecIngress#captureMode
   */
  readonly captureMode?: SidecarSpecIngressCaptureMode;

  /**
   * @schema SidecarSpecIngress#defaultEndpoint
   */
  readonly defaultEndpoint?: string;

  /**
   * The port associated with the listener.
   *
   * @schema SidecarSpecIngress#port
   */
  readonly port?: SidecarSpecIngressPort;

  /**
   * @schema SidecarSpecIngress#tls
   */
  readonly tls?: SidecarSpecIngressTls;

}

/**
 * Converts an object of type 'SidecarSpecIngress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecIngress(obj: SidecarSpecIngress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'captureMode': obj.captureMode,
    'defaultEndpoint': obj.defaultEndpoint,
    'port': toJson_SidecarSpecIngressPort(obj.port),
    'tls': toJson_SidecarSpecIngressTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the outbound traffic policy.
 *
 * @schema SidecarSpecOutboundTrafficPolicy
 */
export interface SidecarSpecOutboundTrafficPolicy {
  /**
   * @schema SidecarSpecOutboundTrafficPolicy#egressProxy
   */
  readonly egressProxy?: SidecarSpecOutboundTrafficPolicyEgressProxy;

  /**
   * @schema SidecarSpecOutboundTrafficPolicy#mode
   */
  readonly mode?: SidecarSpecOutboundTrafficPolicyMode;

}

/**
 * Converts an object of type 'SidecarSpecOutboundTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecOutboundTrafficPolicy(obj: SidecarSpecOutboundTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'egressProxy': toJson_SidecarSpecOutboundTrafficPolicyEgressProxy(obj.egressProxy),
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecWorkloadSelector
 */
export interface SidecarSpecWorkloadSelector {
  /**
   * @schema SidecarSpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'SidecarSpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecWorkloadSelector(obj: SidecarSpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecEgressCaptureMode
 */
export enum SidecarSpecEgressCaptureMode {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** IPTABLES */
  IPTABLES = "IPTABLES",
  /** NONE */
  NONE = "NONE",
}

/**
 * The port associated with the listener.
 *
 * @schema SidecarSpecEgressPort
 */
export interface SidecarSpecEgressPort {
  /**
   * Label assigned to the port.
   *
   * @schema SidecarSpecEgressPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema SidecarSpecEgressPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema SidecarSpecEgressPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema SidecarSpecEgressPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'SidecarSpecEgressPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecEgressPort(obj: SidecarSpecEgressPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecIngressCaptureMode
 */
export enum SidecarSpecIngressCaptureMode {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** IPTABLES */
  IPTABLES = "IPTABLES",
  /** NONE */
  NONE = "NONE",
}

/**
 * The port associated with the listener.
 *
 * @schema SidecarSpecIngressPort
 */
export interface SidecarSpecIngressPort {
  /**
   * Label assigned to the port.
   *
   * @schema SidecarSpecIngressPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema SidecarSpecIngressPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema SidecarSpecIngressPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema SidecarSpecIngressPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'SidecarSpecIngressPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecIngressPort(obj: SidecarSpecIngressPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecIngressTls
 */
export interface SidecarSpecIngressTls {
  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema SidecarSpecIngressTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * Optional: If specified, only support the specified cipher list.
   *
   * @schema SidecarSpecIngressTls#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * @schema SidecarSpecIngressTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema SidecarSpecIngressTls#httpsRedirect
   */
  readonly httpsRedirect?: boolean;

  /**
   * Optional: Maximum TLS protocol version.
   *
   * @schema SidecarSpecIngressTls#maxProtocolVersion
   */
  readonly maxProtocolVersion?: SidecarSpecIngressTlsMaxProtocolVersion;

  /**
   * Optional: Minimum TLS protocol version.
   *
   * @schema SidecarSpecIngressTls#minProtocolVersion
   */
  readonly minProtocolVersion?: SidecarSpecIngressTlsMinProtocolVersion;

  /**
   * @schema SidecarSpecIngressTls#mode
   */
  readonly mode?: SidecarSpecIngressTlsMode;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema SidecarSpecIngressTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema SidecarSpecIngressTls#serverCertificate
   */
  readonly serverCertificate?: string;

  /**
   * @schema SidecarSpecIngressTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * @schema SidecarSpecIngressTls#verifyCertificateHash
   */
  readonly verifyCertificateHash?: string[];

  /**
   * @schema SidecarSpecIngressTls#verifyCertificateSpki
   */
  readonly verifyCertificateSpki?: string[];

}

/**
 * Converts an object of type 'SidecarSpecIngressTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecIngressTls(obj: SidecarSpecIngressTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'cipherSuites': obj.cipherSuites?.map(y => y),
    'credentialName': obj.credentialName,
    'httpsRedirect': obj.httpsRedirect,
    'maxProtocolVersion': obj.maxProtocolVersion,
    'minProtocolVersion': obj.minProtocolVersion,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'serverCertificate': obj.serverCertificate,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'verifyCertificateHash': obj.verifyCertificateHash?.map(y => y),
    'verifyCertificateSpki': obj.verifyCertificateSpki?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecOutboundTrafficPolicyEgressProxy
 */
export interface SidecarSpecOutboundTrafficPolicyEgressProxy {
  /**
   * The name of a service from the service registry.
   *
   * @schema SidecarSpecOutboundTrafficPolicyEgressProxy#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema SidecarSpecOutboundTrafficPolicyEgressProxy#port
   */
  readonly port?: SidecarSpecOutboundTrafficPolicyEgressProxyPort;

  /**
   * The name of a subset within the service.
   *
   * @schema SidecarSpecOutboundTrafficPolicyEgressProxy#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'SidecarSpecOutboundTrafficPolicyEgressProxy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecOutboundTrafficPolicyEgressProxy(obj: SidecarSpecOutboundTrafficPolicyEgressProxy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_SidecarSpecOutboundTrafficPolicyEgressProxyPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarSpecOutboundTrafficPolicyMode
 */
export enum SidecarSpecOutboundTrafficPolicyMode {
  /** REGISTRY_ONLY */
  REGISTRY_ONLY = "REGISTRY_ONLY",
  /** ALLOW_ANY */
  ALLOW_ANY = "ALLOW_ANY",
}

/**
 * Optional: Maximum TLS protocol version.
 *
 * @schema SidecarSpecIngressTlsMaxProtocolVersion
 */
export enum SidecarSpecIngressTlsMaxProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * Optional: Minimum TLS protocol version.
 *
 * @schema SidecarSpecIngressTlsMinProtocolVersion
 */
export enum SidecarSpecIngressTlsMinProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * @schema SidecarSpecIngressTlsMode
 */
export enum SidecarSpecIngressTlsMode {
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** AUTO_PASSTHROUGH */
  AUTO_PASSTHROUGH = "AUTO_PASSTHROUGH",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema SidecarSpecOutboundTrafficPolicyEgressProxyPort
 */
export interface SidecarSpecOutboundTrafficPolicyEgressProxyPort {
  /**
   * @schema SidecarSpecOutboundTrafficPolicyEgressProxyPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'SidecarSpecOutboundTrafficPolicyEgressProxyPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarSpecOutboundTrafficPolicyEgressProxyPort(obj: SidecarSpecOutboundTrafficPolicyEgressProxyPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema SidecarV1Beta1
 */
export class SidecarV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SidecarV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'Sidecar',
  }

  /**
   * Renders a Kubernetes manifest for "SidecarV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SidecarV1Beta1Props = {}): any {
    return {
      ...SidecarV1Beta1.GVK,
      ...toJson_SidecarV1Beta1Props(props),
    };
  }

  /**
   * Defines a "SidecarV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SidecarV1Beta1Props = {}) {
    super(scope, id, {
      ...SidecarV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SidecarV1Beta1.GVK,
      ...toJson_SidecarV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema SidecarV1Beta1
 */
export interface SidecarV1Beta1Props {
  /**
   * @schema SidecarV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
   *
   * @schema SidecarV1Beta1#spec
   */
  readonly spec?: SidecarV1Beta1Spec;

}

/**
 * Converts an object of type 'SidecarV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1Props(obj: SidecarV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SidecarV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
 *
 * @schema SidecarV1Beta1Spec
 */
export interface SidecarV1Beta1Spec {
  /**
   * @schema SidecarV1Beta1Spec#egress
   */
  readonly egress?: SidecarV1Beta1SpecEgress[];

  /**
   * @schema SidecarV1Beta1Spec#ingress
   */
  readonly ingress?: SidecarV1Beta1SpecIngress[];

  /**
   * Configuration for the outbound traffic policy.
   *
   * @schema SidecarV1Beta1Spec#outboundTrafficPolicy
   */
  readonly outboundTrafficPolicy?: SidecarV1Beta1SpecOutboundTrafficPolicy;

  /**
   * @schema SidecarV1Beta1Spec#workloadSelector
   */
  readonly workloadSelector?: SidecarV1Beta1SpecWorkloadSelector;

}

/**
 * Converts an object of type 'SidecarV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1Spec(obj: SidecarV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'egress': obj.egress?.map(y => toJson_SidecarV1Beta1SpecEgress(y)),
    'ingress': obj.ingress?.map(y => toJson_SidecarV1Beta1SpecIngress(y)),
    'outboundTrafficPolicy': toJson_SidecarV1Beta1SpecOutboundTrafficPolicy(obj.outboundTrafficPolicy),
    'workloadSelector': toJson_SidecarV1Beta1SpecWorkloadSelector(obj.workloadSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecEgress
 */
export interface SidecarV1Beta1SpecEgress {
  /**
   * @schema SidecarV1Beta1SpecEgress#bind
   */
  readonly bind?: string;

  /**
   * @schema SidecarV1Beta1SpecEgress#captureMode
   */
  readonly captureMode?: SidecarV1Beta1SpecEgressCaptureMode;

  /**
   * @schema SidecarV1Beta1SpecEgress#hosts
   */
  readonly hosts?: string[];

  /**
   * The port associated with the listener.
   *
   * @schema SidecarV1Beta1SpecEgress#port
   */
  readonly port?: SidecarV1Beta1SpecEgressPort;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecEgress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecEgress(obj: SidecarV1Beta1SpecEgress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'captureMode': obj.captureMode,
    'hosts': obj.hosts?.map(y => y),
    'port': toJson_SidecarV1Beta1SpecEgressPort(obj.port),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecIngress
 */
export interface SidecarV1Beta1SpecIngress {
  /**
   * The IP(IPv4 or IPv6) to which the listener should be bound.
   *
   * @schema SidecarV1Beta1SpecIngress#bind
   */
  readonly bind?: string;

  /**
   * @schema SidecarV1Beta1SpecIngress#captureMode
   */
  readonly captureMode?: SidecarV1Beta1SpecIngressCaptureMode;

  /**
   * @schema SidecarV1Beta1SpecIngress#defaultEndpoint
   */
  readonly defaultEndpoint?: string;

  /**
   * The port associated with the listener.
   *
   * @schema SidecarV1Beta1SpecIngress#port
   */
  readonly port?: SidecarV1Beta1SpecIngressPort;

  /**
   * @schema SidecarV1Beta1SpecIngress#tls
   */
  readonly tls?: SidecarV1Beta1SpecIngressTls;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecIngress' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecIngress(obj: SidecarV1Beta1SpecIngress | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bind': obj.bind,
    'captureMode': obj.captureMode,
    'defaultEndpoint': obj.defaultEndpoint,
    'port': toJson_SidecarV1Beta1SpecIngressPort(obj.port),
    'tls': toJson_SidecarV1Beta1SpecIngressTls(obj.tls),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for the outbound traffic policy.
 *
 * @schema SidecarV1Beta1SpecOutboundTrafficPolicy
 */
export interface SidecarV1Beta1SpecOutboundTrafficPolicy {
  /**
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicy#egressProxy
   */
  readonly egressProxy?: SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy;

  /**
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicy#mode
   */
  readonly mode?: SidecarV1Beta1SpecOutboundTrafficPolicyMode;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecOutboundTrafficPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecOutboundTrafficPolicy(obj: SidecarV1Beta1SpecOutboundTrafficPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'egressProxy': toJson_SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy(obj.egressProxy),
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecWorkloadSelector
 */
export interface SidecarV1Beta1SpecWorkloadSelector {
  /**
   * @schema SidecarV1Beta1SpecWorkloadSelector#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecWorkloadSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecWorkloadSelector(obj: SidecarV1Beta1SpecWorkloadSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecEgressCaptureMode
 */
export enum SidecarV1Beta1SpecEgressCaptureMode {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** IPTABLES */
  IPTABLES = "IPTABLES",
  /** NONE */
  NONE = "NONE",
}

/**
 * The port associated with the listener.
 *
 * @schema SidecarV1Beta1SpecEgressPort
 */
export interface SidecarV1Beta1SpecEgressPort {
  /**
   * Label assigned to the port.
   *
   * @schema SidecarV1Beta1SpecEgressPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema SidecarV1Beta1SpecEgressPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema SidecarV1Beta1SpecEgressPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema SidecarV1Beta1SpecEgressPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecEgressPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecEgressPort(obj: SidecarV1Beta1SpecEgressPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecIngressCaptureMode
 */
export enum SidecarV1Beta1SpecIngressCaptureMode {
  /** DEFAULT */
  DEFAULT = "DEFAULT",
  /** IPTABLES */
  IPTABLES = "IPTABLES",
  /** NONE */
  NONE = "NONE",
}

/**
 * The port associated with the listener.
 *
 * @schema SidecarV1Beta1SpecIngressPort
 */
export interface SidecarV1Beta1SpecIngressPort {
  /**
   * Label assigned to the port.
   *
   * @schema SidecarV1Beta1SpecIngressPort#name
   */
  readonly name?: string;

  /**
   * A valid non-negative integer port number.
   *
   * @schema SidecarV1Beta1SpecIngressPort#number
   */
  readonly number?: number;

  /**
   * The protocol exposed on the port.
   *
   * @schema SidecarV1Beta1SpecIngressPort#protocol
   */
  readonly protocol?: string;

  /**
   * @schema SidecarV1Beta1SpecIngressPort#targetPort
   */
  readonly targetPort?: number;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecIngressPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecIngressPort(obj: SidecarV1Beta1SpecIngressPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'number': obj.number,
    'protocol': obj.protocol,
    'targetPort': obj.targetPort,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecIngressTls
 */
export interface SidecarV1Beta1SpecIngressTls {
  /**
   * REQUIRED if mode is `MUTUAL`.
   *
   * @schema SidecarV1Beta1SpecIngressTls#caCertificates
   */
  readonly caCertificates?: string;

  /**
   * Optional: If specified, only support the specified cipher list.
   *
   * @schema SidecarV1Beta1SpecIngressTls#cipherSuites
   */
  readonly cipherSuites?: string[];

  /**
   * @schema SidecarV1Beta1SpecIngressTls#credentialName
   */
  readonly credentialName?: string;

  /**
   * @schema SidecarV1Beta1SpecIngressTls#httpsRedirect
   */
  readonly httpsRedirect?: boolean;

  /**
   * Optional: Maximum TLS protocol version.
   *
   * @schema SidecarV1Beta1SpecIngressTls#maxProtocolVersion
   */
  readonly maxProtocolVersion?: SidecarV1Beta1SpecIngressTlsMaxProtocolVersion;

  /**
   * Optional: Minimum TLS protocol version.
   *
   * @schema SidecarV1Beta1SpecIngressTls#minProtocolVersion
   */
  readonly minProtocolVersion?: SidecarV1Beta1SpecIngressTlsMinProtocolVersion;

  /**
   * @schema SidecarV1Beta1SpecIngressTls#mode
   */
  readonly mode?: SidecarV1Beta1SpecIngressTlsMode;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema SidecarV1Beta1SpecIngressTls#privateKey
   */
  readonly privateKey?: string;

  /**
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`.
   *
   * @schema SidecarV1Beta1SpecIngressTls#serverCertificate
   */
  readonly serverCertificate?: string;

  /**
   * @schema SidecarV1Beta1SpecIngressTls#subjectAltNames
   */
  readonly subjectAltNames?: string[];

  /**
   * @schema SidecarV1Beta1SpecIngressTls#verifyCertificateHash
   */
  readonly verifyCertificateHash?: string[];

  /**
   * @schema SidecarV1Beta1SpecIngressTls#verifyCertificateSpki
   */
  readonly verifyCertificateSpki?: string[];

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecIngressTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecIngressTls(obj: SidecarV1Beta1SpecIngressTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'caCertificates': obj.caCertificates,
    'cipherSuites': obj.cipherSuites?.map(y => y),
    'credentialName': obj.credentialName,
    'httpsRedirect': obj.httpsRedirect,
    'maxProtocolVersion': obj.maxProtocolVersion,
    'minProtocolVersion': obj.minProtocolVersion,
    'mode': obj.mode,
    'privateKey': obj.privateKey,
    'serverCertificate': obj.serverCertificate,
    'subjectAltNames': obj.subjectAltNames?.map(y => y),
    'verifyCertificateHash': obj.verifyCertificateHash?.map(y => y),
    'verifyCertificateSpki': obj.verifyCertificateSpki?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy
 */
export interface SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy {
  /**
   * The name of a service from the service registry.
   *
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy#port
   */
  readonly port?: SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort;

  /**
   * The name of a subset within the service.
   *
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy(obj: SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SidecarV1Beta1SpecOutboundTrafficPolicyMode
 */
export enum SidecarV1Beta1SpecOutboundTrafficPolicyMode {
  /** REGISTRY_ONLY */
  REGISTRY_ONLY = "REGISTRY_ONLY",
  /** ALLOW_ANY */
  ALLOW_ANY = "ALLOW_ANY",
}

/**
 * Optional: Maximum TLS protocol version.
 *
 * @schema SidecarV1Beta1SpecIngressTlsMaxProtocolVersion
 */
export enum SidecarV1Beta1SpecIngressTlsMaxProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * Optional: Minimum TLS protocol version.
 *
 * @schema SidecarV1Beta1SpecIngressTlsMinProtocolVersion
 */
export enum SidecarV1Beta1SpecIngressTlsMinProtocolVersion {
  /** TLS_AUTO */
  TLS_AUTO = "TLS_AUTO",
  /** TLSV1_0 */
  TLSV1_0 = "TLSV1_0",
  /** TLSV1_1 */
  TLSV1_1 = "TLSV1_1",
  /** TLSV1_2 */
  TLSV1_2 = "TLSV1_2",
  /** TLSV1_3 */
  TLSV1_3 = "TLSV1_3",
}

/**
 * @schema SidecarV1Beta1SpecIngressTlsMode
 */
export enum SidecarV1Beta1SpecIngressTlsMode {
  /** PASSTHROUGH */
  PASSTHROUGH = "PASSTHROUGH",
  /** SIMPLE */
  SIMPLE = "SIMPLE",
  /** MUTUAL */
  MUTUAL = "MUTUAL",
  /** AUTO_PASSTHROUGH */
  AUTO_PASSTHROUGH = "AUTO_PASSTHROUGH",
  /** ISTIO_MUTUAL */
  ISTIO_MUTUAL = "ISTIO_MUTUAL",
}

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort
 */
export interface SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort {
  /**
   * @schema SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort(obj: SidecarV1Beta1SpecOutboundTrafficPolicyEgressProxyPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema VirtualService
 */
export class VirtualService extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualService"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'VirtualService',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualService".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualServiceProps = {}): any {
    return {
      ...VirtualService.GVK,
      ...toJson_VirtualServiceProps(props),
    };
  }

  /**
   * Defines a "VirtualService" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualServiceProps = {}) {
    super(scope, id, {
      ...VirtualService.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualService.GVK,
      ...toJson_VirtualServiceProps(resolved),
    };
  }
}

/**
 * @schema VirtualService
 */
export interface VirtualServiceProps {
  /**
   * @schema VirtualService#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
   *
   * @schema VirtualService#spec
   */
  readonly spec?: VirtualServiceSpec;

}

/**
 * Converts an object of type 'VirtualServiceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceProps(obj: VirtualServiceProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualServiceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
 *
 * @schema VirtualServiceSpec
 */
export interface VirtualServiceSpec {
  /**
   * A list of namespaces to which this virtual service is exported.
   *
   * @schema VirtualServiceSpec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The names of gateways and sidecars that should apply these routes.
   *
   * @schema VirtualServiceSpec#gateways
   */
  readonly gateways?: string[];

  /**
   * The destination hosts to which traffic is being sent.
   *
   * @schema VirtualServiceSpec#hosts
   */
  readonly hosts?: string[];

  /**
   * An ordered list of route rules for HTTP traffic.
   *
   * @schema VirtualServiceSpec#http
   */
  readonly http?: VirtualServiceSpecHttp[];

  /**
   * An ordered list of route rules for opaque TCP traffic.
   *
   * @schema VirtualServiceSpec#tcp
   */
  readonly tcp?: VirtualServiceSpecTcp[];

  /**
   * @schema VirtualServiceSpec#tls
   */
  readonly tls?: VirtualServiceSpecTls[];

}

/**
 * Converts an object of type 'VirtualServiceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpec(obj: VirtualServiceSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exportTo': obj.exportTo?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'http': obj.http?.map(y => toJson_VirtualServiceSpecHttp(y)),
    'tcp': obj.tcp?.map(y => toJson_VirtualServiceSpecTcp(y)),
    'tls': obj.tls?.map(y => toJson_VirtualServiceSpecTls(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttp
 */
export interface VirtualServiceSpecHttp {
  /**
   * Cross-Origin Resource Sharing policy (CORS).
   *
   * @schema VirtualServiceSpecHttp#corsPolicy
   */
  readonly corsPolicy?: VirtualServiceSpecHttpCorsPolicy;

  /**
   * @schema VirtualServiceSpecHttp#delegate
   */
  readonly delegate?: VirtualServiceSpecHttpDelegate;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceSpecHttp#directResponse
   */
  readonly directResponse?: VirtualServiceSpecHttpDirectResponse;

  /**
   * Fault injection policy to apply on HTTP traffic at the client side.
   *
   * @schema VirtualServiceSpecHttp#fault
   */
  readonly fault?: VirtualServiceSpecHttpFault;

  /**
   * @schema VirtualServiceSpecHttp#headers
   */
  readonly headers?: VirtualServiceSpecHttpHeaders;

  /**
   * @schema VirtualServiceSpecHttp#match
   */
  readonly match?: VirtualServiceSpecHttpMatch[];

  /**
   * @schema VirtualServiceSpecHttp#mirror
   */
  readonly mirror?: VirtualServiceSpecHttpMirror;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceSpecHttp#mirror_percent
   */
  readonly mirrorPercent?: number;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceSpecHttp#mirrorPercent
   */
  readonly mirrorPercent?: number;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceSpecHttp#mirrorPercentage
   */
  readonly mirrorPercentage?: VirtualServiceSpecHttpMirrorPercentage;

  /**
   * The name assigned to the route for debugging purposes.
   *
   * @schema VirtualServiceSpecHttp#name
   */
  readonly name?: string;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceSpecHttp#redirect
   */
  readonly redirect?: VirtualServiceSpecHttpRedirect;

  /**
   * Retry policy for HTTP requests.
   *
   * @schema VirtualServiceSpecHttp#retries
   */
  readonly retries?: VirtualServiceSpecHttpRetries;

  /**
   * Rewrite HTTP URIs and Authority headers.
   *
   * @schema VirtualServiceSpecHttp#rewrite
   */
  readonly rewrite?: VirtualServiceSpecHttpRewrite;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceSpecHttp#route
   */
  readonly route?: VirtualServiceSpecHttpRoute[];

  /**
   * Timeout for HTTP requests, default is disabled.
   *
   * @schema VirtualServiceSpecHttp#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttp(obj: VirtualServiceSpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'corsPolicy': toJson_VirtualServiceSpecHttpCorsPolicy(obj.corsPolicy),
    'delegate': toJson_VirtualServiceSpecHttpDelegate(obj.delegate),
    'directResponse': toJson_VirtualServiceSpecHttpDirectResponse(obj.directResponse),
    'fault': toJson_VirtualServiceSpecHttpFault(obj.fault),
    'headers': toJson_VirtualServiceSpecHttpHeaders(obj.headers),
    'match': obj.match?.map(y => toJson_VirtualServiceSpecHttpMatch(y)),
    'mirror': toJson_VirtualServiceSpecHttpMirror(obj.mirror),
    'mirror_percent': obj.mirrorPercent,
    'mirrorPercent': obj.mirrorPercent,
    'mirrorPercentage': toJson_VirtualServiceSpecHttpMirrorPercentage(obj.mirrorPercentage),
    'name': obj.name,
    'redirect': toJson_VirtualServiceSpecHttpRedirect(obj.redirect),
    'retries': toJson_VirtualServiceSpecHttpRetries(obj.retries),
    'rewrite': toJson_VirtualServiceSpecHttpRewrite(obj.rewrite),
    'route': obj.route?.map(y => toJson_VirtualServiceSpecHttpRoute(y)),
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTcp
 */
export interface VirtualServiceSpecTcp {
  /**
   * @schema VirtualServiceSpecTcp#match
   */
  readonly match?: VirtualServiceSpecTcpMatch[];

  /**
   * The destination to which the connection should be forwarded to.
   *
   * @schema VirtualServiceSpecTcp#route
   */
  readonly route?: VirtualServiceSpecTcpRoute[];

}

/**
 * Converts an object of type 'VirtualServiceSpecTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTcp(obj: VirtualServiceSpecTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match?.map(y => toJson_VirtualServiceSpecTcpMatch(y)),
    'route': obj.route?.map(y => toJson_VirtualServiceSpecTcpRoute(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTls
 */
export interface VirtualServiceSpecTls {
  /**
   * @schema VirtualServiceSpecTls#match
   */
  readonly match?: VirtualServiceSpecTlsMatch[];

  /**
   * The destination to which the connection should be forwarded to.
   *
   * @schema VirtualServiceSpecTls#route
   */
  readonly route?: VirtualServiceSpecTlsRoute[];

}

/**
 * Converts an object of type 'VirtualServiceSpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTls(obj: VirtualServiceSpecTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match?.map(y => toJson_VirtualServiceSpecTlsMatch(y)),
    'route': obj.route?.map(y => toJson_VirtualServiceSpecTlsRoute(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cross-Origin Resource Sharing policy (CORS).
 *
 * @schema VirtualServiceSpecHttpCorsPolicy
 */
export interface VirtualServiceSpecHttpCorsPolicy {
  /**
   * @schema VirtualServiceSpecHttpCorsPolicy#allowCredentials
   */
  readonly allowCredentials?: boolean;

  /**
   * @schema VirtualServiceSpecHttpCorsPolicy#allowHeaders
   */
  readonly allowHeaders?: string[];

  /**
   * List of HTTP methods allowed to access the resource.
   *
   * @schema VirtualServiceSpecHttpCorsPolicy#allowMethods
   */
  readonly allowMethods?: string[];

  /**
   * The list of origins that are allowed to perform CORS requests.
   *
   * @schema VirtualServiceSpecHttpCorsPolicy#allowOrigin
   */
  readonly allowOrigin?: string[];

  /**
   * String patterns that match allowed origins.
   *
   * @schema VirtualServiceSpecHttpCorsPolicy#allowOrigins
   */
  readonly allowOrigins?: VirtualServiceSpecHttpCorsPolicyAllowOrigins[];

  /**
   * @schema VirtualServiceSpecHttpCorsPolicy#exposeHeaders
   */
  readonly exposeHeaders?: string[];

  /**
   * @schema VirtualServiceSpecHttpCorsPolicy#maxAge
   */
  readonly maxAge?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpCorsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpCorsPolicy(obj: VirtualServiceSpecHttpCorsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowCredentials': obj.allowCredentials,
    'allowHeaders': obj.allowHeaders?.map(y => y),
    'allowMethods': obj.allowMethods?.map(y => y),
    'allowOrigin': obj.allowOrigin?.map(y => y),
    'allowOrigins': obj.allowOrigins?.map(y => toJson_VirtualServiceSpecHttpCorsPolicyAllowOrigins(y)),
    'exposeHeaders': obj.exposeHeaders?.map(y => y),
    'maxAge': obj.maxAge,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpDelegate
 */
export interface VirtualServiceSpecHttpDelegate {
  /**
   * Name specifies the name of the delegate VirtualService.
   *
   * @schema VirtualServiceSpecHttpDelegate#name
   */
  readonly name?: string;

  /**
   * Namespace specifies the namespace where the delegate VirtualService resides.
   *
   * @schema VirtualServiceSpecHttpDelegate#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpDelegate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpDelegate(obj: VirtualServiceSpecHttpDelegate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
 *
 * @schema VirtualServiceSpecHttpDirectResponse
 */
export interface VirtualServiceSpecHttpDirectResponse {
  /**
   * Specifies the content of the response body.
   *
   * @schema VirtualServiceSpecHttpDirectResponse#body
   */
  readonly body?: VirtualServiceSpecHttpDirectResponseBody;

  /**
   * Specifies the HTTP response status to be returned.
   *
   * @schema VirtualServiceSpecHttpDirectResponse#status
   */
  readonly status?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpDirectResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpDirectResponse(obj: VirtualServiceSpecHttpDirectResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': toJson_VirtualServiceSpecHttpDirectResponseBody(obj.body),
    'status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fault injection policy to apply on HTTP traffic at the client side.
 *
 * @schema VirtualServiceSpecHttpFault
 */
export interface VirtualServiceSpecHttpFault {
  /**
   * @schema VirtualServiceSpecHttpFault#abort
   */
  readonly abort?: VirtualServiceSpecHttpFaultAbort;

  /**
   * @schema VirtualServiceSpecHttpFault#delay
   */
  readonly delay?: VirtualServiceSpecHttpFaultDelay;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpFault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpFault(obj: VirtualServiceSpecHttpFault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'abort': toJson_VirtualServiceSpecHttpFaultAbort(obj.abort),
    'delay': toJson_VirtualServiceSpecHttpFaultDelay(obj.delay),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpHeaders
 */
export interface VirtualServiceSpecHttpHeaders {
  /**
   * @schema VirtualServiceSpecHttpHeaders#request
   */
  readonly request?: VirtualServiceSpecHttpHeadersRequest;

  /**
   * @schema VirtualServiceSpecHttpHeaders#response
   */
  readonly response?: VirtualServiceSpecHttpHeadersResponse;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpHeaders(obj: VirtualServiceSpecHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'request': toJson_VirtualServiceSpecHttpHeadersRequest(obj.request),
    'response': toJson_VirtualServiceSpecHttpHeadersResponse(obj.response),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatch
 */
export interface VirtualServiceSpecHttpMatch {
  /**
   * @schema VirtualServiceSpecHttpMatch#authority
   */
  readonly authority?: VirtualServiceSpecHttpMatchAuthority;

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceSpecHttpMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * @schema VirtualServiceSpecHttpMatch#headers
   */
  readonly headers?: { [key: string]: VirtualServiceSpecHttpMatchHeaders };

  /**
   * Flag to specify whether the URI matching should be case-insensitive.
   *
   * @schema VirtualServiceSpecHttpMatch#ignoreUriCase
   */
  readonly ignoreUriCase?: boolean;

  /**
   * @schema VirtualServiceSpecHttpMatch#method
   */
  readonly method?: VirtualServiceSpecHttpMatchMethod;

  /**
   * The name assigned to a match.
   *
   * @schema VirtualServiceSpecHttpMatch#name
   */
  readonly name?: string;

  /**
   * Specifies the ports on the host that is being addressed.
   *
   * @schema VirtualServiceSpecHttpMatch#port
   */
  readonly port?: number;

  /**
   * Query parameters for matching.
   *
   * @schema VirtualServiceSpecHttpMatch#queryParams
   */
  readonly queryParams?: { [key: string]: VirtualServiceSpecHttpMatchQueryParams };

  /**
   * @schema VirtualServiceSpecHttpMatch#scheme
   */
  readonly scheme?: VirtualServiceSpecHttpMatchScheme;

  /**
   * @schema VirtualServiceSpecHttpMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceSpecHttpMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

  /**
   * The human readable prefix to use when emitting statistics for this route.
   *
   * @schema VirtualServiceSpecHttpMatch#statPrefix
   */
  readonly statPrefix?: string;

  /**
   * @schema VirtualServiceSpecHttpMatch#uri
   */
  readonly uri?: VirtualServiceSpecHttpMatchUri;

  /**
   * withoutHeader has the same syntax with the header, but has opposite meaning.
   *
   * @schema VirtualServiceSpecHttpMatch#withoutHeaders
   */
  readonly withoutHeaders?: { [key: string]: VirtualServiceSpecHttpMatchWithoutHeaders };

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatch(obj: VirtualServiceSpecHttpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': toJson_VirtualServiceSpecHttpMatchAuthority(obj.authority),
    'gateways': obj.gateways?.map(y => y),
    'headers': ((obj.headers) === undefined) ? undefined : (Object.entries(obj.headers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceSpecHttpMatchHeaders(i[1]) }), {})),
    'ignoreUriCase': obj.ignoreUriCase,
    'method': toJson_VirtualServiceSpecHttpMatchMethod(obj.method),
    'name': obj.name,
    'port': obj.port,
    'queryParams': ((obj.queryParams) === undefined) ? undefined : (Object.entries(obj.queryParams).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceSpecHttpMatchQueryParams(i[1]) }), {})),
    'scheme': toJson_VirtualServiceSpecHttpMatchScheme(obj.scheme),
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
    'statPrefix': obj.statPrefix,
    'uri': toJson_VirtualServiceSpecHttpMatchUri(obj.uri),
    'withoutHeaders': ((obj.withoutHeaders) === undefined) ? undefined : (Object.entries(obj.withoutHeaders).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceSpecHttpMatchWithoutHeaders(i[1]) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMirror
 */
export interface VirtualServiceSpecHttpMirror {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceSpecHttpMirror#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecHttpMirror#port
   */
  readonly port?: VirtualServiceSpecHttpMirrorPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceSpecHttpMirror#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMirror(obj: VirtualServiceSpecHttpMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceSpecHttpMirrorPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of the traffic to be mirrored by the `mirror` field.
 *
 * @schema VirtualServiceSpecHttpMirrorPercentage
 */
export interface VirtualServiceSpecHttpMirrorPercentage {
  /**
   * @schema VirtualServiceSpecHttpMirrorPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMirrorPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMirrorPercentage(obj: VirtualServiceSpecHttpMirrorPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
 *
 * @schema VirtualServiceSpecHttpRedirect
 */
export interface VirtualServiceSpecHttpRedirect {
  /**
   * @schema VirtualServiceSpecHttpRedirect#authority
   */
  readonly authority?: string;

  /**
   * @schema VirtualServiceSpecHttpRedirect#derivePort
   */
  readonly derivePort?: VirtualServiceSpecHttpRedirectDerivePort;

  /**
   * On a redirect, overwrite the port portion of the URL with this value.
   *
   * @schema VirtualServiceSpecHttpRedirect#port
   */
  readonly port?: number;

  /**
   * @schema VirtualServiceSpecHttpRedirect#redirectCode
   */
  readonly redirectCode?: number;

  /**
   * On a redirect, overwrite the scheme portion of the URL with this value.
   *
   * @schema VirtualServiceSpecHttpRedirect#scheme
   */
  readonly scheme?: string;

  /**
   * @schema VirtualServiceSpecHttpRedirect#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRedirect(obj: VirtualServiceSpecHttpRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': obj.authority,
    'derivePort': obj.derivePort,
    'port': obj.port,
    'redirectCode': obj.redirectCode,
    'scheme': obj.scheme,
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Retry policy for HTTP requests.
 *
 * @schema VirtualServiceSpecHttpRetries
 */
export interface VirtualServiceSpecHttpRetries {
  /**
   * Number of retries to be allowed for a given request.
   *
   * @schema VirtualServiceSpecHttpRetries#attempts
   */
  readonly attempts?: number;

  /**
   * Timeout per attempt for a given request, including the initial call and any retries.
   *
   * @schema VirtualServiceSpecHttpRetries#perTryTimeout
   */
  readonly perTryTimeout?: string;

  /**
   * Specifies the conditions under which retry takes place.
   *
   * @schema VirtualServiceSpecHttpRetries#retryOn
   */
  readonly retryOn?: string;

  /**
   * Flag to specify whether the retries should retry to other localities.
   *
   * @schema VirtualServiceSpecHttpRetries#retryRemoteLocalities
   */
  readonly retryRemoteLocalities?: boolean;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRetries' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRetries(obj: VirtualServiceSpecHttpRetries | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attempts': obj.attempts,
    'perTryTimeout': obj.perTryTimeout,
    'retryOn': obj.retryOn,
    'retryRemoteLocalities': obj.retryRemoteLocalities,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Rewrite HTTP URIs and Authority headers.
 *
 * @schema VirtualServiceSpecHttpRewrite
 */
export interface VirtualServiceSpecHttpRewrite {
  /**
   * rewrite the Authority/Host header with this value.
   *
   * @schema VirtualServiceSpecHttpRewrite#authority
   */
  readonly authority?: string;

  /**
   * @schema VirtualServiceSpecHttpRewrite#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRewrite(obj: VirtualServiceSpecHttpRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': obj.authority,
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpRoute
 */
export interface VirtualServiceSpecHttpRoute {
  /**
   * @schema VirtualServiceSpecHttpRoute#destination
   */
  readonly destination?: VirtualServiceSpecHttpRouteDestination;

  /**
   * @schema VirtualServiceSpecHttpRoute#headers
   */
  readonly headers?: VirtualServiceSpecHttpRouteHeaders;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceSpecHttpRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRoute(obj: VirtualServiceSpecHttpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceSpecHttpRouteDestination(obj.destination),
    'headers': toJson_VirtualServiceSpecHttpRouteHeaders(obj.headers),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTcpMatch
 */
export interface VirtualServiceSpecTcpMatch {
  /**
   * IPv4 or IPv6 ip addresses of destination with optional subnet.
   *
   * @schema VirtualServiceSpecTcpMatch#destinationSubnets
   */
  readonly destinationSubnets?: string[];

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceSpecTcpMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecTcpMatch#port
   */
  readonly port?: number;

  /**
   * @schema VirtualServiceSpecTcpMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceSpecTcpMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

  /**
   * IPv4 or IPv6 ip address of source with optional subnet.
   *
   * @schema VirtualServiceSpecTcpMatch#sourceSubnet
   */
  readonly sourceSubnet?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecTcpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTcpMatch(obj: VirtualServiceSpecTcpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationSubnets': obj.destinationSubnets?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'port': obj.port,
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
    'sourceSubnet': obj.sourceSubnet,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTcpRoute
 */
export interface VirtualServiceSpecTcpRoute {
  /**
   * @schema VirtualServiceSpecTcpRoute#destination
   */
  readonly destination?: VirtualServiceSpecTcpRouteDestination;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceSpecTcpRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecTcpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTcpRoute(obj: VirtualServiceSpecTcpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceSpecTcpRouteDestination(obj.destination),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTlsMatch
 */
export interface VirtualServiceSpecTlsMatch {
  /**
   * IPv4 or IPv6 ip addresses of destination with optional subnet.
   *
   * @schema VirtualServiceSpecTlsMatch#destinationSubnets
   */
  readonly destinationSubnets?: string[];

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceSpecTlsMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecTlsMatch#port
   */
  readonly port?: number;

  /**
   * SNI (server name indicator) to match on.
   *
   * @schema VirtualServiceSpecTlsMatch#sniHosts
   */
  readonly sniHosts?: string[];

  /**
   * @schema VirtualServiceSpecTlsMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceSpecTlsMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecTlsMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTlsMatch(obj: VirtualServiceSpecTlsMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationSubnets': obj.destinationSubnets?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'port': obj.port,
    'sniHosts': obj.sniHosts?.map(y => y),
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTlsRoute
 */
export interface VirtualServiceSpecTlsRoute {
  /**
   * @schema VirtualServiceSpecTlsRoute#destination
   */
  readonly destination?: VirtualServiceSpecTlsRouteDestination;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceSpecTlsRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecTlsRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTlsRoute(obj: VirtualServiceSpecTlsRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceSpecTlsRouteDestination(obj.destination),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpCorsPolicyAllowOrigins
 */
export interface VirtualServiceSpecHttpCorsPolicyAllowOrigins {
  /**
   * @schema VirtualServiceSpecHttpCorsPolicyAllowOrigins#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpCorsPolicyAllowOrigins#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpCorsPolicyAllowOrigins#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpCorsPolicyAllowOrigins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpCorsPolicyAllowOrigins(obj: VirtualServiceSpecHttpCorsPolicyAllowOrigins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the content of the response body.
 *
 * @schema VirtualServiceSpecHttpDirectResponseBody
 */
export interface VirtualServiceSpecHttpDirectResponseBody {
  /**
   * response body as base64 encoded bytes.
   *
   * @schema VirtualServiceSpecHttpDirectResponseBody#bytes
   */
  readonly bytes?: string;

  /**
   * @schema VirtualServiceSpecHttpDirectResponseBody#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpDirectResponseBody' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpDirectResponseBody(obj: VirtualServiceSpecHttpDirectResponseBody | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bytes': obj.bytes,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpFaultAbort
 */
export interface VirtualServiceSpecHttpFaultAbort {
  /**
   * GRPC status code to use to abort the request.
   *
   * @schema VirtualServiceSpecHttpFaultAbort#grpcStatus
   */
  readonly grpcStatus?: string;

  /**
   * @schema VirtualServiceSpecHttpFaultAbort#http2Error
   */
  readonly http2Error?: string;

  /**
   * HTTP status code to use to abort the Http request.
   *
   * @schema VirtualServiceSpecHttpFaultAbort#httpStatus
   */
  readonly httpStatus?: number;

  /**
   * Percentage of requests to be aborted with the error code provided.
   *
   * @schema VirtualServiceSpecHttpFaultAbort#percentage
   */
  readonly percentage?: VirtualServiceSpecHttpFaultAbortPercentage;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpFaultAbort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpFaultAbort(obj: VirtualServiceSpecHttpFaultAbort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpcStatus': obj.grpcStatus,
    'http2Error': obj.http2Error,
    'httpStatus': obj.httpStatus,
    'percentage': toJson_VirtualServiceSpecHttpFaultAbortPercentage(obj.percentage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpFaultDelay
 */
export interface VirtualServiceSpecHttpFaultDelay {
  /**
   * @schema VirtualServiceSpecHttpFaultDelay#exponentialDelay
   */
  readonly exponentialDelay?: string;

  /**
   * Add a fixed delay before forwarding the request.
   *
   * @schema VirtualServiceSpecHttpFaultDelay#fixedDelay
   */
  readonly fixedDelay?: string;

  /**
   * Percentage of requests on which the delay will be injected (0-100).
   *
   * @schema VirtualServiceSpecHttpFaultDelay#percent
   */
  readonly percent?: number;

  /**
   * Percentage of requests on which the delay will be injected.
   *
   * @schema VirtualServiceSpecHttpFaultDelay#percentage
   */
  readonly percentage?: VirtualServiceSpecHttpFaultDelayPercentage;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpFaultDelay' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpFaultDelay(obj: VirtualServiceSpecHttpFaultDelay | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exponentialDelay': obj.exponentialDelay,
    'fixedDelay': obj.fixedDelay,
    'percent': obj.percent,
    'percentage': toJson_VirtualServiceSpecHttpFaultDelayPercentage(obj.percentage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpHeadersRequest
 */
export interface VirtualServiceSpecHttpHeadersRequest {
  /**
   * @schema VirtualServiceSpecHttpHeadersRequest#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceSpecHttpHeadersRequest#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceSpecHttpHeadersRequest#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpHeadersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpHeadersRequest(obj: VirtualServiceSpecHttpHeadersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpHeadersResponse
 */
export interface VirtualServiceSpecHttpHeadersResponse {
  /**
   * @schema VirtualServiceSpecHttpHeadersResponse#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceSpecHttpHeadersResponse#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceSpecHttpHeadersResponse#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpHeadersResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpHeadersResponse(obj: VirtualServiceSpecHttpHeadersResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchAuthority
 */
export interface VirtualServiceSpecHttpMatchAuthority {
  /**
   * @schema VirtualServiceSpecHttpMatchAuthority#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchAuthority#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchAuthority#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchAuthority' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchAuthority(obj: VirtualServiceSpecHttpMatchAuthority | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchHeaders
 */
export interface VirtualServiceSpecHttpMatchHeaders {
  /**
   * @schema VirtualServiceSpecHttpMatchHeaders#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchHeaders#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchHeaders#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchHeaders(obj: VirtualServiceSpecHttpMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchMethod
 */
export interface VirtualServiceSpecHttpMatchMethod {
  /**
   * @schema VirtualServiceSpecHttpMatchMethod#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchMethod#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchMethod#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchMethod' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchMethod(obj: VirtualServiceSpecHttpMatchMethod | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchQueryParams
 */
export interface VirtualServiceSpecHttpMatchQueryParams {
  /**
   * @schema VirtualServiceSpecHttpMatchQueryParams#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchQueryParams#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchQueryParams#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchQueryParams(obj: VirtualServiceSpecHttpMatchQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchScheme
 */
export interface VirtualServiceSpecHttpMatchScheme {
  /**
   * @schema VirtualServiceSpecHttpMatchScheme#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchScheme#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchScheme#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchScheme' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchScheme(obj: VirtualServiceSpecHttpMatchScheme | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchUri
 */
export interface VirtualServiceSpecHttpMatchUri {
  /**
   * @schema VirtualServiceSpecHttpMatchUri#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchUri#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchUri#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchUri' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchUri(obj: VirtualServiceSpecHttpMatchUri | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpMatchWithoutHeaders
 */
export interface VirtualServiceSpecHttpMatchWithoutHeaders {
  /**
   * @schema VirtualServiceSpecHttpMatchWithoutHeaders#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceSpecHttpMatchWithoutHeaders#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceSpecHttpMatchWithoutHeaders#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMatchWithoutHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMatchWithoutHeaders(obj: VirtualServiceSpecHttpMatchWithoutHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceSpecHttpMirrorPort
 */
export interface VirtualServiceSpecHttpMirrorPort {
  /**
   * @schema VirtualServiceSpecHttpMirrorPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpMirrorPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpMirrorPort(obj: VirtualServiceSpecHttpMirrorPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpRedirectDerivePort
 */
export enum VirtualServiceSpecHttpRedirectDerivePort {
  /** FROM_PROTOCOL_DEFAULT */
  FROM_PROTOCOL_DEFAULT = "FROM_PROTOCOL_DEFAULT",
  /** FROM_REQUEST_PORT */
  FROM_REQUEST_PORT = "FROM_REQUEST_PORT",
}

/**
 * @schema VirtualServiceSpecHttpRouteDestination
 */
export interface VirtualServiceSpecHttpRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceSpecHttpRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecHttpRouteDestination#port
   */
  readonly port?: VirtualServiceSpecHttpRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceSpecHttpRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRouteDestination(obj: VirtualServiceSpecHttpRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceSpecHttpRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpRouteHeaders
 */
export interface VirtualServiceSpecHttpRouteHeaders {
  /**
   * @schema VirtualServiceSpecHttpRouteHeaders#request
   */
  readonly request?: VirtualServiceSpecHttpRouteHeadersRequest;

  /**
   * @schema VirtualServiceSpecHttpRouteHeaders#response
   */
  readonly response?: VirtualServiceSpecHttpRouteHeadersResponse;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRouteHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRouteHeaders(obj: VirtualServiceSpecHttpRouteHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'request': toJson_VirtualServiceSpecHttpRouteHeadersRequest(obj.request),
    'response': toJson_VirtualServiceSpecHttpRouteHeadersResponse(obj.response),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTcpRouteDestination
 */
export interface VirtualServiceSpecTcpRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceSpecTcpRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecTcpRouteDestination#port
   */
  readonly port?: VirtualServiceSpecTcpRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceSpecTcpRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecTcpRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTcpRouteDestination(obj: VirtualServiceSpecTcpRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceSpecTcpRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecTlsRouteDestination
 */
export interface VirtualServiceSpecTlsRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceSpecTlsRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceSpecTlsRouteDestination#port
   */
  readonly port?: VirtualServiceSpecTlsRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceSpecTlsRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceSpecTlsRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTlsRouteDestination(obj: VirtualServiceSpecTlsRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceSpecTlsRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of requests to be aborted with the error code provided.
 *
 * @schema VirtualServiceSpecHttpFaultAbortPercentage
 */
export interface VirtualServiceSpecHttpFaultAbortPercentage {
  /**
   * @schema VirtualServiceSpecHttpFaultAbortPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpFaultAbortPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpFaultAbortPercentage(obj: VirtualServiceSpecHttpFaultAbortPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of requests on which the delay will be injected.
 *
 * @schema VirtualServiceSpecHttpFaultDelayPercentage
 */
export interface VirtualServiceSpecHttpFaultDelayPercentage {
  /**
   * @schema VirtualServiceSpecHttpFaultDelayPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpFaultDelayPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpFaultDelayPercentage(obj: VirtualServiceSpecHttpFaultDelayPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceSpecHttpRouteDestinationPort
 */
export interface VirtualServiceSpecHttpRouteDestinationPort {
  /**
   * @schema VirtualServiceSpecHttpRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRouteDestinationPort(obj: VirtualServiceSpecHttpRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpRouteHeadersRequest
 */
export interface VirtualServiceSpecHttpRouteHeadersRequest {
  /**
   * @schema VirtualServiceSpecHttpRouteHeadersRequest#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceSpecHttpRouteHeadersRequest#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceSpecHttpRouteHeadersRequest#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRouteHeadersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRouteHeadersRequest(obj: VirtualServiceSpecHttpRouteHeadersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceSpecHttpRouteHeadersResponse
 */
export interface VirtualServiceSpecHttpRouteHeadersResponse {
  /**
   * @schema VirtualServiceSpecHttpRouteHeadersResponse#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceSpecHttpRouteHeadersResponse#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceSpecHttpRouteHeadersResponse#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceSpecHttpRouteHeadersResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecHttpRouteHeadersResponse(obj: VirtualServiceSpecHttpRouteHeadersResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceSpecTcpRouteDestinationPort
 */
export interface VirtualServiceSpecTcpRouteDestinationPort {
  /**
   * @schema VirtualServiceSpecTcpRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecTcpRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTcpRouteDestinationPort(obj: VirtualServiceSpecTcpRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceSpecTlsRouteDestinationPort
 */
export interface VirtualServiceSpecTlsRouteDestinationPort {
  /**
   * @schema VirtualServiceSpecTlsRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceSpecTlsRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceSpecTlsRouteDestinationPort(obj: VirtualServiceSpecTlsRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema VirtualServiceV1Beta1
 */
export class VirtualServiceV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VirtualServiceV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'VirtualService',
  }

  /**
   * Renders a Kubernetes manifest for "VirtualServiceV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: VirtualServiceV1Beta1Props = {}): any {
    return {
      ...VirtualServiceV1Beta1.GVK,
      ...toJson_VirtualServiceV1Beta1Props(props),
    };
  }

  /**
   * Defines a "VirtualServiceV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VirtualServiceV1Beta1Props = {}) {
    super(scope, id, {
      ...VirtualServiceV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...VirtualServiceV1Beta1.GVK,
      ...toJson_VirtualServiceV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema VirtualServiceV1Beta1
 */
export interface VirtualServiceV1Beta1Props {
  /**
   * @schema VirtualServiceV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
   *
   * @schema VirtualServiceV1Beta1#spec
   */
  readonly spec?: VirtualServiceV1Beta1Spec;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1Props(obj: VirtualServiceV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_VirtualServiceV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
 *
 * @schema VirtualServiceV1Beta1Spec
 */
export interface VirtualServiceV1Beta1Spec {
  /**
   * A list of namespaces to which this virtual service is exported.
   *
   * @schema VirtualServiceV1Beta1Spec#exportTo
   */
  readonly exportTo?: string[];

  /**
   * The names of gateways and sidecars that should apply these routes.
   *
   * @schema VirtualServiceV1Beta1Spec#gateways
   */
  readonly gateways?: string[];

  /**
   * The destination hosts to which traffic is being sent.
   *
   * @schema VirtualServiceV1Beta1Spec#hosts
   */
  readonly hosts?: string[];

  /**
   * An ordered list of route rules for HTTP traffic.
   *
   * @schema VirtualServiceV1Beta1Spec#http
   */
  readonly http?: VirtualServiceV1Beta1SpecHttp[];

  /**
   * An ordered list of route rules for opaque TCP traffic.
   *
   * @schema VirtualServiceV1Beta1Spec#tcp
   */
  readonly tcp?: VirtualServiceV1Beta1SpecTcp[];

  /**
   * @schema VirtualServiceV1Beta1Spec#tls
   */
  readonly tls?: VirtualServiceV1Beta1SpecTls[];

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1Spec(obj: VirtualServiceV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exportTo': obj.exportTo?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'hosts': obj.hosts?.map(y => y),
    'http': obj.http?.map(y => toJson_VirtualServiceV1Beta1SpecHttp(y)),
    'tcp': obj.tcp?.map(y => toJson_VirtualServiceV1Beta1SpecTcp(y)),
    'tls': obj.tls?.map(y => toJson_VirtualServiceV1Beta1SpecTls(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttp
 */
export interface VirtualServiceV1Beta1SpecHttp {
  /**
   * Cross-Origin Resource Sharing policy (CORS).
   *
   * @schema VirtualServiceV1Beta1SpecHttp#corsPolicy
   */
  readonly corsPolicy?: VirtualServiceV1Beta1SpecHttpCorsPolicy;

  /**
   * @schema VirtualServiceV1Beta1SpecHttp#delegate
   */
  readonly delegate?: VirtualServiceV1Beta1SpecHttpDelegate;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#directResponse
   */
  readonly directResponse?: VirtualServiceV1Beta1SpecHttpDirectResponse;

  /**
   * Fault injection policy to apply on HTTP traffic at the client side.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#fault
   */
  readonly fault?: VirtualServiceV1Beta1SpecHttpFault;

  /**
   * @schema VirtualServiceV1Beta1SpecHttp#headers
   */
  readonly headers?: VirtualServiceV1Beta1SpecHttpHeaders;

  /**
   * @schema VirtualServiceV1Beta1SpecHttp#match
   */
  readonly match?: VirtualServiceV1Beta1SpecHttpMatch[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttp#mirror
   */
  readonly mirror?: VirtualServiceV1Beta1SpecHttpMirror;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#mirror_percent
   */
  readonly mirrorPercent?: number;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#mirrorPercent
   */
  readonly mirrorPercent?: number;

  /**
   * Percentage of the traffic to be mirrored by the `mirror` field.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#mirrorPercentage
   */
  readonly mirrorPercentage?: VirtualServiceV1Beta1SpecHttpMirrorPercentage;

  /**
   * The name assigned to the route for debugging purposes.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#name
   */
  readonly name?: string;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#redirect
   */
  readonly redirect?: VirtualServiceV1Beta1SpecHttpRedirect;

  /**
   * Retry policy for HTTP requests.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#retries
   */
  readonly retries?: VirtualServiceV1Beta1SpecHttpRetries;

  /**
   * Rewrite HTTP URIs and Authority headers.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#rewrite
   */
  readonly rewrite?: VirtualServiceV1Beta1SpecHttpRewrite;

  /**
   * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#route
   */
  readonly route?: VirtualServiceV1Beta1SpecHttpRoute[];

  /**
   * Timeout for HTTP requests, default is disabled.
   *
   * @schema VirtualServiceV1Beta1SpecHttp#timeout
   */
  readonly timeout?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttp(obj: VirtualServiceV1Beta1SpecHttp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'corsPolicy': toJson_VirtualServiceV1Beta1SpecHttpCorsPolicy(obj.corsPolicy),
    'delegate': toJson_VirtualServiceV1Beta1SpecHttpDelegate(obj.delegate),
    'directResponse': toJson_VirtualServiceV1Beta1SpecHttpDirectResponse(obj.directResponse),
    'fault': toJson_VirtualServiceV1Beta1SpecHttpFault(obj.fault),
    'headers': toJson_VirtualServiceV1Beta1SpecHttpHeaders(obj.headers),
    'match': obj.match?.map(y => toJson_VirtualServiceV1Beta1SpecHttpMatch(y)),
    'mirror': toJson_VirtualServiceV1Beta1SpecHttpMirror(obj.mirror),
    'mirror_percent': obj.mirrorPercent,
    'mirrorPercent': obj.mirrorPercent,
    'mirrorPercentage': toJson_VirtualServiceV1Beta1SpecHttpMirrorPercentage(obj.mirrorPercentage),
    'name': obj.name,
    'redirect': toJson_VirtualServiceV1Beta1SpecHttpRedirect(obj.redirect),
    'retries': toJson_VirtualServiceV1Beta1SpecHttpRetries(obj.retries),
    'rewrite': toJson_VirtualServiceV1Beta1SpecHttpRewrite(obj.rewrite),
    'route': obj.route?.map(y => toJson_VirtualServiceV1Beta1SpecHttpRoute(y)),
    'timeout': obj.timeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTcp
 */
export interface VirtualServiceV1Beta1SpecTcp {
  /**
   * @schema VirtualServiceV1Beta1SpecTcp#match
   */
  readonly match?: VirtualServiceV1Beta1SpecTcpMatch[];

  /**
   * The destination to which the connection should be forwarded to.
   *
   * @schema VirtualServiceV1Beta1SpecTcp#route
   */
  readonly route?: VirtualServiceV1Beta1SpecTcpRoute[];

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTcp(obj: VirtualServiceV1Beta1SpecTcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match?.map(y => toJson_VirtualServiceV1Beta1SpecTcpMatch(y)),
    'route': obj.route?.map(y => toJson_VirtualServiceV1Beta1SpecTcpRoute(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTls
 */
export interface VirtualServiceV1Beta1SpecTls {
  /**
   * @schema VirtualServiceV1Beta1SpecTls#match
   */
  readonly match?: VirtualServiceV1Beta1SpecTlsMatch[];

  /**
   * The destination to which the connection should be forwarded to.
   *
   * @schema VirtualServiceV1Beta1SpecTls#route
   */
  readonly route?: VirtualServiceV1Beta1SpecTlsRoute[];

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTls(obj: VirtualServiceV1Beta1SpecTls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'match': obj.match?.map(y => toJson_VirtualServiceV1Beta1SpecTlsMatch(y)),
    'route': obj.route?.map(y => toJson_VirtualServiceV1Beta1SpecTlsRoute(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cross-Origin Resource Sharing policy (CORS).
 *
 * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy
 */
export interface VirtualServiceV1Beta1SpecHttpCorsPolicy {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#allowCredentials
   */
  readonly allowCredentials?: boolean;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#allowHeaders
   */
  readonly allowHeaders?: string[];

  /**
   * List of HTTP methods allowed to access the resource.
   *
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#allowMethods
   */
  readonly allowMethods?: string[];

  /**
   * The list of origins that are allowed to perform CORS requests.
   *
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#allowOrigin
   */
  readonly allowOrigin?: string[];

  /**
   * String patterns that match allowed origins.
   *
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#allowOrigins
   */
  readonly allowOrigins?: VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#exposeHeaders
   */
  readonly exposeHeaders?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicy#maxAge
   */
  readonly maxAge?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpCorsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpCorsPolicy(obj: VirtualServiceV1Beta1SpecHttpCorsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowCredentials': obj.allowCredentials,
    'allowHeaders': obj.allowHeaders?.map(y => y),
    'allowMethods': obj.allowMethods?.map(y => y),
    'allowOrigin': obj.allowOrigin?.map(y => y),
    'allowOrigins': obj.allowOrigins?.map(y => toJson_VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins(y)),
    'exposeHeaders': obj.exposeHeaders?.map(y => y),
    'maxAge': obj.maxAge,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpDelegate
 */
export interface VirtualServiceV1Beta1SpecHttpDelegate {
  /**
   * Name specifies the name of the delegate VirtualService.
   *
   * @schema VirtualServiceV1Beta1SpecHttpDelegate#name
   */
  readonly name?: string;

  /**
   * Namespace specifies the namespace where the delegate VirtualService resides.
   *
   * @schema VirtualServiceV1Beta1SpecHttpDelegate#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpDelegate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpDelegate(obj: VirtualServiceV1Beta1SpecHttpDelegate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
 *
 * @schema VirtualServiceV1Beta1SpecHttpDirectResponse
 */
export interface VirtualServiceV1Beta1SpecHttpDirectResponse {
  /**
   * Specifies the content of the response body.
   *
   * @schema VirtualServiceV1Beta1SpecHttpDirectResponse#body
   */
  readonly body?: VirtualServiceV1Beta1SpecHttpDirectResponseBody;

  /**
   * Specifies the HTTP response status to be returned.
   *
   * @schema VirtualServiceV1Beta1SpecHttpDirectResponse#status
   */
  readonly status?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpDirectResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpDirectResponse(obj: VirtualServiceV1Beta1SpecHttpDirectResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'body': toJson_VirtualServiceV1Beta1SpecHttpDirectResponseBody(obj.body),
    'status': obj.status,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fault injection policy to apply on HTTP traffic at the client side.
 *
 * @schema VirtualServiceV1Beta1SpecHttpFault
 */
export interface VirtualServiceV1Beta1SpecHttpFault {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpFault#abort
   */
  readonly abort?: VirtualServiceV1Beta1SpecHttpFaultAbort;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpFault#delay
   */
  readonly delay?: VirtualServiceV1Beta1SpecHttpFaultDelay;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpFault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpFault(obj: VirtualServiceV1Beta1SpecHttpFault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'abort': toJson_VirtualServiceV1Beta1SpecHttpFaultAbort(obj.abort),
    'delay': toJson_VirtualServiceV1Beta1SpecHttpFaultDelay(obj.delay),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpHeaders
 */
export interface VirtualServiceV1Beta1SpecHttpHeaders {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeaders#request
   */
  readonly request?: VirtualServiceV1Beta1SpecHttpHeadersRequest;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeaders#response
   */
  readonly response?: VirtualServiceV1Beta1SpecHttpHeadersResponse;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpHeaders(obj: VirtualServiceV1Beta1SpecHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'request': toJson_VirtualServiceV1Beta1SpecHttpHeadersRequest(obj.request),
    'response': toJson_VirtualServiceV1Beta1SpecHttpHeadersResponse(obj.response),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatch
 */
export interface VirtualServiceV1Beta1SpecHttpMatch {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#authority
   */
  readonly authority?: VirtualServiceV1Beta1SpecHttpMatchAuthority;

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#headers
   */
  readonly headers?: { [key: string]: VirtualServiceV1Beta1SpecHttpMatchHeaders };

  /**
   * Flag to specify whether the URI matching should be case-insensitive.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#ignoreUriCase
   */
  readonly ignoreUriCase?: boolean;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#method
   */
  readonly method?: VirtualServiceV1Beta1SpecHttpMatchMethod;

  /**
   * The name assigned to a match.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#name
   */
  readonly name?: string;

  /**
   * Specifies the ports on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#port
   */
  readonly port?: number;

  /**
   * Query parameters for matching.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#queryParams
   */
  readonly queryParams?: { [key: string]: VirtualServiceV1Beta1SpecHttpMatchQueryParams };

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#scheme
   */
  readonly scheme?: VirtualServiceV1Beta1SpecHttpMatchScheme;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

  /**
   * The human readable prefix to use when emitting statistics for this route.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#statPrefix
   */
  readonly statPrefix?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatch#uri
   */
  readonly uri?: VirtualServiceV1Beta1SpecHttpMatchUri;

  /**
   * withoutHeader has the same syntax with the header, but has opposite meaning.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatch#withoutHeaders
   */
  readonly withoutHeaders?: { [key: string]: VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders };

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatch(obj: VirtualServiceV1Beta1SpecHttpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': toJson_VirtualServiceV1Beta1SpecHttpMatchAuthority(obj.authority),
    'gateways': obj.gateways?.map(y => y),
    'headers': ((obj.headers) === undefined) ? undefined : (Object.entries(obj.headers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceV1Beta1SpecHttpMatchHeaders(i[1]) }), {})),
    'ignoreUriCase': obj.ignoreUriCase,
    'method': toJson_VirtualServiceV1Beta1SpecHttpMatchMethod(obj.method),
    'name': obj.name,
    'port': obj.port,
    'queryParams': ((obj.queryParams) === undefined) ? undefined : (Object.entries(obj.queryParams).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceV1Beta1SpecHttpMatchQueryParams(i[1]) }), {})),
    'scheme': toJson_VirtualServiceV1Beta1SpecHttpMatchScheme(obj.scheme),
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
    'statPrefix': obj.statPrefix,
    'uri': toJson_VirtualServiceV1Beta1SpecHttpMatchUri(obj.uri),
    'withoutHeaders': ((obj.withoutHeaders) === undefined) ? undefined : (Object.entries(obj.withoutHeaders).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders(i[1]) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMirror
 */
export interface VirtualServiceV1Beta1SpecHttpMirror {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMirror#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMirror#port
   */
  readonly port?: VirtualServiceV1Beta1SpecHttpMirrorPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceV1Beta1SpecHttpMirror#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMirror' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMirror(obj: VirtualServiceV1Beta1SpecHttpMirror | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceV1Beta1SpecHttpMirrorPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of the traffic to be mirrored by the `mirror` field.
 *
 * @schema VirtualServiceV1Beta1SpecHttpMirrorPercentage
 */
export interface VirtualServiceV1Beta1SpecHttpMirrorPercentage {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMirrorPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMirrorPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMirrorPercentage(obj: VirtualServiceV1Beta1SpecHttpMirrorPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
 *
 * @schema VirtualServiceV1Beta1SpecHttpRedirect
 */
export interface VirtualServiceV1Beta1SpecHttpRedirect {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#authority
   */
  readonly authority?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#derivePort
   */
  readonly derivePort?: VirtualServiceV1Beta1SpecHttpRedirectDerivePort;

  /**
   * On a redirect, overwrite the port portion of the URL with this value.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#port
   */
  readonly port?: number;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#redirectCode
   */
  readonly redirectCode?: number;

  /**
   * On a redirect, overwrite the scheme portion of the URL with this value.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#scheme
   */
  readonly scheme?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRedirect#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRedirect' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRedirect(obj: VirtualServiceV1Beta1SpecHttpRedirect | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': obj.authority,
    'derivePort': obj.derivePort,
    'port': obj.port,
    'redirectCode': obj.redirectCode,
    'scheme': obj.scheme,
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Retry policy for HTTP requests.
 *
 * @schema VirtualServiceV1Beta1SpecHttpRetries
 */
export interface VirtualServiceV1Beta1SpecHttpRetries {
  /**
   * Number of retries to be allowed for a given request.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRetries#attempts
   */
  readonly attempts?: number;

  /**
   * Timeout per attempt for a given request, including the initial call and any retries.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRetries#perTryTimeout
   */
  readonly perTryTimeout?: string;

  /**
   * Specifies the conditions under which retry takes place.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRetries#retryOn
   */
  readonly retryOn?: string;

  /**
   * Flag to specify whether the retries should retry to other localities.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRetries#retryRemoteLocalities
   */
  readonly retryRemoteLocalities?: boolean;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRetries' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRetries(obj: VirtualServiceV1Beta1SpecHttpRetries | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attempts': obj.attempts,
    'perTryTimeout': obj.perTryTimeout,
    'retryOn': obj.retryOn,
    'retryRemoteLocalities': obj.retryRemoteLocalities,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Rewrite HTTP URIs and Authority headers.
 *
 * @schema VirtualServiceV1Beta1SpecHttpRewrite
 */
export interface VirtualServiceV1Beta1SpecHttpRewrite {
  /**
   * rewrite the Authority/Host header with this value.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRewrite#authority
   */
  readonly authority?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRewrite#uri
   */
  readonly uri?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRewrite' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRewrite(obj: VirtualServiceV1Beta1SpecHttpRewrite | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'authority': obj.authority,
    'uri': obj.uri,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpRoute
 */
export interface VirtualServiceV1Beta1SpecHttpRoute {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRoute#destination
   */
  readonly destination?: VirtualServiceV1Beta1SpecHttpRouteDestination;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRoute#headers
   */
  readonly headers?: VirtualServiceV1Beta1SpecHttpRouteHeaders;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRoute(obj: VirtualServiceV1Beta1SpecHttpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceV1Beta1SpecHttpRouteDestination(obj.destination),
    'headers': toJson_VirtualServiceV1Beta1SpecHttpRouteHeaders(obj.headers),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTcpMatch
 */
export interface VirtualServiceV1Beta1SpecTcpMatch {
  /**
   * IPv4 or IPv6 ip addresses of destination with optional subnet.
   *
   * @schema VirtualServiceV1Beta1SpecTcpMatch#destinationSubnets
   */
  readonly destinationSubnets?: string[];

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceV1Beta1SpecTcpMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecTcpMatch#port
   */
  readonly port?: number;

  /**
   * @schema VirtualServiceV1Beta1SpecTcpMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceV1Beta1SpecTcpMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

  /**
   * IPv4 or IPv6 ip address of source with optional subnet.
   *
   * @schema VirtualServiceV1Beta1SpecTcpMatch#sourceSubnet
   */
  readonly sourceSubnet?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTcpMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTcpMatch(obj: VirtualServiceV1Beta1SpecTcpMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationSubnets': obj.destinationSubnets?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'port': obj.port,
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
    'sourceSubnet': obj.sourceSubnet,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTcpRoute
 */
export interface VirtualServiceV1Beta1SpecTcpRoute {
  /**
   * @schema VirtualServiceV1Beta1SpecTcpRoute#destination
   */
  readonly destination?: VirtualServiceV1Beta1SpecTcpRouteDestination;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceV1Beta1SpecTcpRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTcpRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTcpRoute(obj: VirtualServiceV1Beta1SpecTcpRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceV1Beta1SpecTcpRouteDestination(obj.destination),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTlsMatch
 */
export interface VirtualServiceV1Beta1SpecTlsMatch {
  /**
   * IPv4 or IPv6 ip addresses of destination with optional subnet.
   *
   * @schema VirtualServiceV1Beta1SpecTlsMatch#destinationSubnets
   */
  readonly destinationSubnets?: string[];

  /**
   * Names of gateways where the rule should be applied.
   *
   * @schema VirtualServiceV1Beta1SpecTlsMatch#gateways
   */
  readonly gateways?: string[];

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecTlsMatch#port
   */
  readonly port?: number;

  /**
   * SNI (server name indicator) to match on.
   *
   * @schema VirtualServiceV1Beta1SpecTlsMatch#sniHosts
   */
  readonly sniHosts?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecTlsMatch#sourceLabels
   */
  readonly sourceLabels?: { [key: string]: string };

  /**
   * Source namespace constraining the applicability of a rule to workloads in that namespace.
   *
   * @schema VirtualServiceV1Beta1SpecTlsMatch#sourceNamespace
   */
  readonly sourceNamespace?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTlsMatch' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTlsMatch(obj: VirtualServiceV1Beta1SpecTlsMatch | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destinationSubnets': obj.destinationSubnets?.map(y => y),
    'gateways': obj.gateways?.map(y => y),
    'port': obj.port,
    'sniHosts': obj.sniHosts?.map(y => y),
    'sourceLabels': ((obj.sourceLabels) === undefined) ? undefined : (Object.entries(obj.sourceLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sourceNamespace': obj.sourceNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTlsRoute
 */
export interface VirtualServiceV1Beta1SpecTlsRoute {
  /**
   * @schema VirtualServiceV1Beta1SpecTlsRoute#destination
   */
  readonly destination?: VirtualServiceV1Beta1SpecTlsRouteDestination;

  /**
   * Weight specifies the relative proportion of traffic to be forwarded to the destination.
   *
   * @schema VirtualServiceV1Beta1SpecTlsRoute#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTlsRoute' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTlsRoute(obj: VirtualServiceV1Beta1SpecTlsRoute | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_VirtualServiceV1Beta1SpecTlsRouteDestination(obj.destination),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins
 */
export interface VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins(obj: VirtualServiceV1Beta1SpecHttpCorsPolicyAllowOrigins | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the content of the response body.
 *
 * @schema VirtualServiceV1Beta1SpecHttpDirectResponseBody
 */
export interface VirtualServiceV1Beta1SpecHttpDirectResponseBody {
  /**
   * response body as base64 encoded bytes.
   *
   * @schema VirtualServiceV1Beta1SpecHttpDirectResponseBody#bytes
   */
  readonly bytes?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpDirectResponseBody#string
   */
  readonly string?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpDirectResponseBody' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpDirectResponseBody(obj: VirtualServiceV1Beta1SpecHttpDirectResponseBody | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bytes': obj.bytes,
    'string': obj.string,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpFaultAbort
 */
export interface VirtualServiceV1Beta1SpecHttpFaultAbort {
  /**
   * GRPC status code to use to abort the request.
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultAbort#grpcStatus
   */
  readonly grpcStatus?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpFaultAbort#http2Error
   */
  readonly http2Error?: string;

  /**
   * HTTP status code to use to abort the Http request.
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultAbort#httpStatus
   */
  readonly httpStatus?: number;

  /**
   * Percentage of requests to be aborted with the error code provided.
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultAbort#percentage
   */
  readonly percentage?: VirtualServiceV1Beta1SpecHttpFaultAbortPercentage;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpFaultAbort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpFaultAbort(obj: VirtualServiceV1Beta1SpecHttpFaultAbort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'grpcStatus': obj.grpcStatus,
    'http2Error': obj.http2Error,
    'httpStatus': obj.httpStatus,
    'percentage': toJson_VirtualServiceV1Beta1SpecHttpFaultAbortPercentage(obj.percentage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpFaultDelay
 */
export interface VirtualServiceV1Beta1SpecHttpFaultDelay {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpFaultDelay#exponentialDelay
   */
  readonly exponentialDelay?: string;

  /**
   * Add a fixed delay before forwarding the request.
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultDelay#fixedDelay
   */
  readonly fixedDelay?: string;

  /**
   * Percentage of requests on which the delay will be injected (0-100).
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultDelay#percent
   */
  readonly percent?: number;

  /**
   * Percentage of requests on which the delay will be injected.
   *
   * @schema VirtualServiceV1Beta1SpecHttpFaultDelay#percentage
   */
  readonly percentage?: VirtualServiceV1Beta1SpecHttpFaultDelayPercentage;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpFaultDelay' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpFaultDelay(obj: VirtualServiceV1Beta1SpecHttpFaultDelay | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exponentialDelay': obj.exponentialDelay,
    'fixedDelay': obj.fixedDelay,
    'percent': obj.percent,
    'percentage': toJson_VirtualServiceV1Beta1SpecHttpFaultDelayPercentage(obj.percentage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpHeadersRequest
 */
export interface VirtualServiceV1Beta1SpecHttpHeadersRequest {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersRequest#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersRequest#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersRequest#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpHeadersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpHeadersRequest(obj: VirtualServiceV1Beta1SpecHttpHeadersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpHeadersResponse
 */
export interface VirtualServiceV1Beta1SpecHttpHeadersResponse {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersResponse#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersResponse#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpHeadersResponse#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpHeadersResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpHeadersResponse(obj: VirtualServiceV1Beta1SpecHttpHeadersResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchAuthority
 */
export interface VirtualServiceV1Beta1SpecHttpMatchAuthority {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchAuthority#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchAuthority#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchAuthority#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchAuthority' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchAuthority(obj: VirtualServiceV1Beta1SpecHttpMatchAuthority | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchHeaders
 */
export interface VirtualServiceV1Beta1SpecHttpMatchHeaders {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchHeaders#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchHeaders#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchHeaders#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchHeaders(obj: VirtualServiceV1Beta1SpecHttpMatchHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchMethod
 */
export interface VirtualServiceV1Beta1SpecHttpMatchMethod {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchMethod#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchMethod#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchMethod#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchMethod' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchMethod(obj: VirtualServiceV1Beta1SpecHttpMatchMethod | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchQueryParams
 */
export interface VirtualServiceV1Beta1SpecHttpMatchQueryParams {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchQueryParams#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchQueryParams#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchQueryParams#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchQueryParams' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchQueryParams(obj: VirtualServiceV1Beta1SpecHttpMatchQueryParams | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchScheme
 */
export interface VirtualServiceV1Beta1SpecHttpMatchScheme {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchScheme#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchScheme#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchScheme#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchScheme' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchScheme(obj: VirtualServiceV1Beta1SpecHttpMatchScheme | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchUri
 */
export interface VirtualServiceV1Beta1SpecHttpMatchUri {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchUri#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchUri#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchUri#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchUri' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchUri(obj: VirtualServiceV1Beta1SpecHttpMatchUri | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders
 */
export interface VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders#exact
   */
  readonly exact?: string;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders#prefix
   */
  readonly prefix?: string;

  /**
   * RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
   *
   * @schema VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders#regex
   */
  readonly regex?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders(obj: VirtualServiceV1Beta1SpecHttpMatchWithoutHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exact': obj.exact,
    'prefix': obj.prefix,
    'regex': obj.regex,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceV1Beta1SpecHttpMirrorPort
 */
export interface VirtualServiceV1Beta1SpecHttpMirrorPort {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpMirrorPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpMirrorPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpMirrorPort(obj: VirtualServiceV1Beta1SpecHttpMirrorPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpRedirectDerivePort
 */
export enum VirtualServiceV1Beta1SpecHttpRedirectDerivePort {
  /** FROM_PROTOCOL_DEFAULT */
  FROM_PROTOCOL_DEFAULT = "FROM_PROTOCOL_DEFAULT",
  /** FROM_REQUEST_PORT */
  FROM_REQUEST_PORT = "FROM_REQUEST_PORT",
}

/**
 * @schema VirtualServiceV1Beta1SpecHttpRouteDestination
 */
export interface VirtualServiceV1Beta1SpecHttpRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRouteDestination#port
   */
  readonly port?: VirtualServiceV1Beta1SpecHttpRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceV1Beta1SpecHttpRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRouteDestination(obj: VirtualServiceV1Beta1SpecHttpRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceV1Beta1SpecHttpRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpRouteHeaders
 */
export interface VirtualServiceV1Beta1SpecHttpRouteHeaders {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeaders#request
   */
  readonly request?: VirtualServiceV1Beta1SpecHttpRouteHeadersRequest;

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeaders#response
   */
  readonly response?: VirtualServiceV1Beta1SpecHttpRouteHeadersResponse;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRouteHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRouteHeaders(obj: VirtualServiceV1Beta1SpecHttpRouteHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'request': toJson_VirtualServiceV1Beta1SpecHttpRouteHeadersRequest(obj.request),
    'response': toJson_VirtualServiceV1Beta1SpecHttpRouteHeadersResponse(obj.response),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTcpRouteDestination
 */
export interface VirtualServiceV1Beta1SpecTcpRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceV1Beta1SpecTcpRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecTcpRouteDestination#port
   */
  readonly port?: VirtualServiceV1Beta1SpecTcpRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceV1Beta1SpecTcpRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTcpRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTcpRouteDestination(obj: VirtualServiceV1Beta1SpecTcpRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceV1Beta1SpecTcpRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecTlsRouteDestination
 */
export interface VirtualServiceV1Beta1SpecTlsRouteDestination {
  /**
   * The name of a service from the service registry.
   *
   * @schema VirtualServiceV1Beta1SpecTlsRouteDestination#host
   */
  readonly host?: string;

  /**
   * Specifies the port on the host that is being addressed.
   *
   * @schema VirtualServiceV1Beta1SpecTlsRouteDestination#port
   */
  readonly port?: VirtualServiceV1Beta1SpecTlsRouteDestinationPort;

  /**
   * The name of a subset within the service.
   *
   * @schema VirtualServiceV1Beta1SpecTlsRouteDestination#subset
   */
  readonly subset?: string;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTlsRouteDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTlsRouteDestination(obj: VirtualServiceV1Beta1SpecTlsRouteDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': toJson_VirtualServiceV1Beta1SpecTlsRouteDestinationPort(obj.port),
    'subset': obj.subset,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of requests to be aborted with the error code provided.
 *
 * @schema VirtualServiceV1Beta1SpecHttpFaultAbortPercentage
 */
export interface VirtualServiceV1Beta1SpecHttpFaultAbortPercentage {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpFaultAbortPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpFaultAbortPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpFaultAbortPercentage(obj: VirtualServiceV1Beta1SpecHttpFaultAbortPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of requests on which the delay will be injected.
 *
 * @schema VirtualServiceV1Beta1SpecHttpFaultDelayPercentage
 */
export interface VirtualServiceV1Beta1SpecHttpFaultDelayPercentage {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpFaultDelayPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpFaultDelayPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpFaultDelayPercentage(obj: VirtualServiceV1Beta1SpecHttpFaultDelayPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceV1Beta1SpecHttpRouteDestinationPort
 */
export interface VirtualServiceV1Beta1SpecHttpRouteDestinationPort {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRouteDestinationPort(obj: VirtualServiceV1Beta1SpecHttpRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersRequest
 */
export interface VirtualServiceV1Beta1SpecHttpRouteHeadersRequest {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersRequest#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersRequest#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersRequest#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRouteHeadersRequest' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRouteHeadersRequest(obj: VirtualServiceV1Beta1SpecHttpRouteHeadersRequest | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersResponse
 */
export interface VirtualServiceV1Beta1SpecHttpRouteHeadersResponse {
  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersResponse#add
   */
  readonly add?: { [key: string]: string };

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersResponse#remove
   */
  readonly remove?: string[];

  /**
   * @schema VirtualServiceV1Beta1SpecHttpRouteHeadersResponse#set
   */
  readonly set?: { [key: string]: string };

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecHttpRouteHeadersResponse' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecHttpRouteHeadersResponse(obj: VirtualServiceV1Beta1SpecHttpRouteHeadersResponse | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': ((obj.add) === undefined) ? undefined : (Object.entries(obj.add).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'remove': obj.remove?.map(y => y),
    'set': ((obj.set) === undefined) ? undefined : (Object.entries(obj.set).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceV1Beta1SpecTcpRouteDestinationPort
 */
export interface VirtualServiceV1Beta1SpecTcpRouteDestinationPort {
  /**
   * @schema VirtualServiceV1Beta1SpecTcpRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTcpRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTcpRouteDestinationPort(obj: VirtualServiceV1Beta1SpecTcpRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the port on the host that is being addressed.
 *
 * @schema VirtualServiceV1Beta1SpecTlsRouteDestinationPort
 */
export interface VirtualServiceV1Beta1SpecTlsRouteDestinationPort {
  /**
   * @schema VirtualServiceV1Beta1SpecTlsRouteDestinationPort#number
   */
  readonly number?: number;

}

/**
 * Converts an object of type 'VirtualServiceV1Beta1SpecTlsRouteDestinationPort' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_VirtualServiceV1Beta1SpecTlsRouteDestinationPort(obj: VirtualServiceV1Beta1SpecTlsRouteDestinationPort | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'number': obj.number,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema WorkloadEntry
 */
export class WorkloadEntry extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadEntry"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'WorkloadEntry',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadEntry".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadEntryProps = {}): any {
    return {
      ...WorkloadEntry.GVK,
      ...toJson_WorkloadEntryProps(props),
    };
  }

  /**
   * Defines a "WorkloadEntry" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadEntryProps = {}) {
    super(scope, id, {
      ...WorkloadEntry.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadEntry.GVK,
      ...toJson_WorkloadEntryProps(resolved),
    };
  }
}

/**
 * @schema WorkloadEntry
 */
export interface WorkloadEntryProps {
  /**
   * @schema WorkloadEntry#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
   *
   * @schema WorkloadEntry#spec
   */
  readonly spec?: WorkloadEntrySpec;

}

/**
 * Converts an object of type 'WorkloadEntryProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadEntryProps(obj: WorkloadEntryProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadEntrySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
 *
 * @schema WorkloadEntrySpec
 */
export interface WorkloadEntrySpec {
  /**
   * @schema WorkloadEntrySpec#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema WorkloadEntrySpec#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema WorkloadEntrySpec#locality
   */
  readonly locality?: string;

  /**
   * @schema WorkloadEntrySpec#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema WorkloadEntrySpec#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema WorkloadEntrySpec#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema WorkloadEntrySpec#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'WorkloadEntrySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadEntrySpec(obj: WorkloadEntrySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema WorkloadEntryV1Beta1
 */
export class WorkloadEntryV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadEntryV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'WorkloadEntry',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadEntryV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadEntryV1Beta1Props = {}): any {
    return {
      ...WorkloadEntryV1Beta1.GVK,
      ...toJson_WorkloadEntryV1Beta1Props(props),
    };
  }

  /**
   * Defines a "WorkloadEntryV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadEntryV1Beta1Props = {}) {
    super(scope, id, {
      ...WorkloadEntryV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadEntryV1Beta1.GVK,
      ...toJson_WorkloadEntryV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema WorkloadEntryV1Beta1
 */
export interface WorkloadEntryV1Beta1Props {
  /**
   * @schema WorkloadEntryV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
   *
   * @schema WorkloadEntryV1Beta1#spec
   */
  readonly spec?: WorkloadEntryV1Beta1Spec;

}

/**
 * Converts an object of type 'WorkloadEntryV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadEntryV1Beta1Props(obj: WorkloadEntryV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadEntryV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
 *
 * @schema WorkloadEntryV1Beta1Spec
 */
export interface WorkloadEntryV1Beta1Spec {
  /**
   * @schema WorkloadEntryV1Beta1Spec#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema WorkloadEntryV1Beta1Spec#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema WorkloadEntryV1Beta1Spec#locality
   */
  readonly locality?: string;

  /**
   * @schema WorkloadEntryV1Beta1Spec#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema WorkloadEntryV1Beta1Spec#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema WorkloadEntryV1Beta1Spec#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema WorkloadEntryV1Beta1Spec#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'WorkloadEntryV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadEntryV1Beta1Spec(obj: WorkloadEntryV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema WorkloadGroup
 */
export class WorkloadGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1alpha3',
    kind: 'WorkloadGroup',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadGroup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadGroupProps = {}): any {
    return {
      ...WorkloadGroup.GVK,
      ...toJson_WorkloadGroupProps(props),
    };
  }

  /**
   * Defines a "WorkloadGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadGroupProps = {}) {
    super(scope, id, {
      ...WorkloadGroup.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadGroup.GVK,
      ...toJson_WorkloadGroupProps(resolved),
    };
  }
}

/**
 * @schema WorkloadGroup
 */
export interface WorkloadGroupProps {
  /**
   * @schema WorkloadGroup#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Describes a collection of workload instances. See more details at: https://istio.io/docs/reference/config/networking/workload-group.html
   *
   * @schema WorkloadGroup#spec
   */
  readonly spec?: WorkloadGroupSpec;

}

/**
 * Converts an object of type 'WorkloadGroupProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupProps(obj: WorkloadGroupProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadGroupSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes a collection of workload instances. See more details at: https://istio.io/docs/reference/config/networking/workload-group.html
 *
 * @schema WorkloadGroupSpec
 */
export interface WorkloadGroupSpec {
  /**
   * Metadata that will be used for all corresponding `WorkloadEntries`.
   *
   * @schema WorkloadGroupSpec#metadata
   */
  readonly metadata?: WorkloadGroupSpecMetadata;

  /**
   * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
   *
   * @schema WorkloadGroupSpec#probe
   */
  readonly probe?: WorkloadGroupSpecProbe;

  /**
   * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
   *
   * @schema WorkloadGroupSpec#template
   */
  readonly template?: WorkloadGroupSpecTemplate;

}

/**
 * Converts an object of type 'WorkloadGroupSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpec(obj: WorkloadGroupSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_WorkloadGroupSpecMetadata(obj.metadata),
    'probe': toJson_WorkloadGroupSpecProbe(obj.probe),
    'template': toJson_WorkloadGroupSpecTemplate(obj.template),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata that will be used for all corresponding `WorkloadEntries`.
 *
 * @schema WorkloadGroupSpecMetadata
 */
export interface WorkloadGroupSpecMetadata {
  /**
   * @schema WorkloadGroupSpecMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema WorkloadGroupSpecMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'WorkloadGroupSpecMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecMetadata(obj: WorkloadGroupSpecMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
 *
 * @schema WorkloadGroupSpecProbe
 */
export interface WorkloadGroupSpecProbe {
  /**
   * Health is determined by how the command that is executed exited.
   *
   * @schema WorkloadGroupSpecProbe#exec
   */
  readonly exec?: WorkloadGroupSpecProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded.
   *
   * @schema WorkloadGroupSpecProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema WorkloadGroupSpecProbe#httpGet
   */
  readonly httpGet?: WorkloadGroupSpecProbeHttpGet;

  /**
   * Number of seconds after the container has started before readiness probes are initiated.
   *
   * @schema WorkloadGroupSpecProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe.
   *
   * @schema WorkloadGroupSpecProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed.
   *
   * @schema WorkloadGroupSpecProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * Health is determined by if the proxy is able to connect.
   *
   * @schema WorkloadGroupSpecProbe#tcpSocket
   */
  readonly tcpSocket?: WorkloadGroupSpecProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out.
   *
   * @schema WorkloadGroupSpecProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'WorkloadGroupSpecProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecProbe(obj: WorkloadGroupSpecProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_WorkloadGroupSpecProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_WorkloadGroupSpecProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_WorkloadGroupSpecProbeTcpSocket(obj.tcpSocket),
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
 *
 * @schema WorkloadGroupSpecTemplate
 */
export interface WorkloadGroupSpecTemplate {
  /**
   * @schema WorkloadGroupSpecTemplate#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#locality
   */
  readonly locality?: string;

  /**
   * @schema WorkloadGroupSpecTemplate#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema WorkloadGroupSpecTemplate#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema WorkloadGroupSpecTemplate#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'WorkloadGroupSpecTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecTemplate(obj: WorkloadGroupSpecTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Health is determined by how the command that is executed exited.
 *
 * @schema WorkloadGroupSpecProbeExec
 */
export interface WorkloadGroupSpecProbeExec {
  /**
   * Command to run.
   *
   * @schema WorkloadGroupSpecProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'WorkloadGroupSpecProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecProbeExec(obj: WorkloadGroupSpecProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadGroupSpecProbeHttpGet
 */
export interface WorkloadGroupSpecProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Headers the proxy will pass on to make the request.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: WorkloadGroupSpecProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Port on which the endpoint lives.
   *
   * @schema WorkloadGroupSpecProbeHttpGet#port
   */
  readonly port?: number;

  /**
   * @schema WorkloadGroupSpecProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'WorkloadGroupSpecProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecProbeHttpGet(obj: WorkloadGroupSpecProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_WorkloadGroupSpecProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Health is determined by if the proxy is able to connect.
 *
 * @schema WorkloadGroupSpecProbeTcpSocket
 */
export interface WorkloadGroupSpecProbeTcpSocket {
  /**
   * @schema WorkloadGroupSpecProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema WorkloadGroupSpecProbeTcpSocket#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'WorkloadGroupSpecProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecProbeTcpSocket(obj: WorkloadGroupSpecProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders
 */
export interface WorkloadGroupSpecProbeHttpGetHttpHeaders {
  /**
   * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders#name
   */
  readonly name?: string;

  /**
   * @schema WorkloadGroupSpecProbeHttpGetHttpHeaders#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'WorkloadGroupSpecProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupSpecProbeHttpGetHttpHeaders(obj: WorkloadGroupSpecProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema WorkloadGroupV1Beta1
 */
export class WorkloadGroupV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "WorkloadGroupV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'networking.istio.io/v1beta1',
    kind: 'WorkloadGroup',
  }

  /**
   * Renders a Kubernetes manifest for "WorkloadGroupV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: WorkloadGroupV1Beta1Props = {}): any {
    return {
      ...WorkloadGroupV1Beta1.GVK,
      ...toJson_WorkloadGroupV1Beta1Props(props),
    };
  }

  /**
   * Defines a "WorkloadGroupV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: WorkloadGroupV1Beta1Props = {}) {
    super(scope, id, {
      ...WorkloadGroupV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...WorkloadGroupV1Beta1.GVK,
      ...toJson_WorkloadGroupV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema WorkloadGroupV1Beta1
 */
export interface WorkloadGroupV1Beta1Props {
  /**
   * @schema WorkloadGroupV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema WorkloadGroupV1Beta1#spec
   */
  readonly spec?: WorkloadGroupV1Beta1Spec;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1Props(obj: WorkloadGroupV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_WorkloadGroupV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadGroupV1Beta1Spec
 */
export interface WorkloadGroupV1Beta1Spec {
  /**
   * Metadata that will be used for all corresponding `WorkloadEntries`.
   *
   * @schema WorkloadGroupV1Beta1Spec#metadata
   */
  readonly metadata?: WorkloadGroupV1Beta1SpecMetadata;

  /**
   * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
   *
   * @schema WorkloadGroupV1Beta1Spec#probe
   */
  readonly probe?: WorkloadGroupV1Beta1SpecProbe;

  /**
   * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
   *
   * @schema WorkloadGroupV1Beta1Spec#template
   */
  readonly template?: WorkloadGroupV1Beta1SpecTemplate;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1Spec(obj: WorkloadGroupV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_WorkloadGroupV1Beta1SpecMetadata(obj.metadata),
    'probe': toJson_WorkloadGroupV1Beta1SpecProbe(obj.probe),
    'template': toJson_WorkloadGroupV1Beta1SpecTemplate(obj.template),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata that will be used for all corresponding `WorkloadEntries`.
 *
 * @schema WorkloadGroupV1Beta1SpecMetadata
 */
export interface WorkloadGroupV1Beta1SpecMetadata {
  /**
   * @schema WorkloadGroupV1Beta1SpecMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema WorkloadGroupV1Beta1SpecMetadata#labels
   */
  readonly labels?: { [key: string]: string };

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecMetadata(obj: WorkloadGroupV1Beta1SpecMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
 *
 * @schema WorkloadGroupV1Beta1SpecProbe
 */
export interface WorkloadGroupV1Beta1SpecProbe {
  /**
   * Health is determined by how the command that is executed exited.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#exec
   */
  readonly exec?: WorkloadGroupV1Beta1SpecProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * @schema WorkloadGroupV1Beta1SpecProbe#httpGet
   */
  readonly httpGet?: WorkloadGroupV1Beta1SpecProbeHttpGet;

  /**
   * Number of seconds after the container has started before readiness probes are initiated.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * Health is determined by if the proxy is able to connect.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#tcpSocket
   */
  readonly tcpSocket?: WorkloadGroupV1Beta1SpecProbeTcpSocket;

  /**
   * Number of seconds after which the probe times out.
   *
   * @schema WorkloadGroupV1Beta1SpecProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecProbe(obj: WorkloadGroupV1Beta1SpecProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_WorkloadGroupV1Beta1SpecProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_WorkloadGroupV1Beta1SpecProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_WorkloadGroupV1Beta1SpecProbeTcpSocket(obj.tcpSocket),
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
 *
 * @schema WorkloadGroupV1Beta1SpecTemplate
 */
export interface WorkloadGroupV1Beta1SpecTemplate {
  /**
   * @schema WorkloadGroupV1Beta1SpecTemplate#address
   */
  readonly address?: string;

  /**
   * One or more labels associated with the endpoint.
   *
   * @schema WorkloadGroupV1Beta1SpecTemplate#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The locality associated with the endpoint.
   *
   * @schema WorkloadGroupV1Beta1SpecTemplate#locality
   */
  readonly locality?: string;

  /**
   * @schema WorkloadGroupV1Beta1SpecTemplate#network
   */
  readonly network?: string;

  /**
   * Set of ports associated with the endpoint.
   *
   * @schema WorkloadGroupV1Beta1SpecTemplate#ports
   */
  readonly ports?: { [key: string]: number };

  /**
   * @schema WorkloadGroupV1Beta1SpecTemplate#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * The load balancing weight associated with the endpoint.
   *
   * @schema WorkloadGroupV1Beta1SpecTemplate#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecTemplate(obj: WorkloadGroupV1Beta1SpecTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'address': obj.address,
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'locality': obj.locality,
    'network': obj.network,
    'ports': ((obj.ports) === undefined) ? undefined : (Object.entries(obj.ports).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'serviceAccount': obj.serviceAccount,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Health is determined by how the command that is executed exited.
 *
 * @schema WorkloadGroupV1Beta1SpecProbeExec
 */
export interface WorkloadGroupV1Beta1SpecProbeExec {
  /**
   * Command to run.
   *
   * @schema WorkloadGroupV1Beta1SpecProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecProbeExec(obj: WorkloadGroupV1Beta1SpecProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadGroupV1Beta1SpecProbeHttpGet
 */
export interface WorkloadGroupV1Beta1SpecProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP.
   *
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Headers the proxy will pass on to make the request.
   *
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Port on which the endpoint lives.
   *
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGet#port
   */
  readonly port?: number;

  /**
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecProbeHttpGet(obj: WorkloadGroupV1Beta1SpecProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Health is determined by if the proxy is able to connect.
 *
 * @schema WorkloadGroupV1Beta1SpecProbeTcpSocket
 */
export interface WorkloadGroupV1Beta1SpecProbeTcpSocket {
  /**
   * @schema WorkloadGroupV1Beta1SpecProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * @schema WorkloadGroupV1Beta1SpecProbeTcpSocket#port
   */
  readonly port?: number;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecProbeTcpSocket(obj: WorkloadGroupV1Beta1SpecProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders
 */
export interface WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders {
  /**
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders#name
   */
  readonly name?: string;

  /**
   * @schema WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders(obj: WorkloadGroupV1Beta1SpecProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

