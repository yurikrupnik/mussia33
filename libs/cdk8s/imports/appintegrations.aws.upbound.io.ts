// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * EventIntegration is the Schema for the EventIntegrations API. Provides details about a specific Amazon AppIntegrations Event Integration
 *
 * @schema EventIntegration
 */
export class EventIntegration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "EventIntegration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'appintegrations.aws.upbound.io/v1beta1',
    kind: 'EventIntegration',
  }

  /**
   * Renders a Kubernetes manifest for "EventIntegration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: EventIntegrationProps): any {
    return {
      ...EventIntegration.GVK,
      ...toJson_EventIntegrationProps(props),
    };
  }

  /**
   * Defines a "EventIntegration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: EventIntegrationProps) {
    super(scope, id, {
      ...EventIntegration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...EventIntegration.GVK,
      ...toJson_EventIntegrationProps(resolved),
    };
  }
}

/**
 * EventIntegration is the Schema for the EventIntegrations API. Provides details about a specific Amazon AppIntegrations Event Integration
 *
 * @schema EventIntegration
 */
export interface EventIntegrationProps {
  /**
   * @schema EventIntegration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * EventIntegrationSpec defines the desired state of EventIntegration
   *
   * @schema EventIntegration#spec
   */
  readonly spec: EventIntegrationSpec;

}

/**
 * Converts an object of type 'EventIntegrationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationProps(obj: EventIntegrationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_EventIntegrationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EventIntegrationSpec defines the desired state of EventIntegration
 *
 * @schema EventIntegrationSpec
 */
export interface EventIntegrationSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema EventIntegrationSpec#deletionPolicy
   */
  readonly deletionPolicy?: EventIntegrationSpecDeletionPolicy;

  /**
   * @schema EventIntegrationSpec#forProvider
   */
  readonly forProvider: EventIntegrationSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema EventIntegrationSpec#providerConfigRef
   */
  readonly providerConfigRef?: EventIntegrationSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema EventIntegrationSpec#providerRef
   */
  readonly providerRef?: EventIntegrationSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema EventIntegrationSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: EventIntegrationSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema EventIntegrationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: EventIntegrationSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'EventIntegrationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpec(obj: EventIntegrationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_EventIntegrationSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_EventIntegrationSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_EventIntegrationSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_EventIntegrationSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_EventIntegrationSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema EventIntegrationSpecDeletionPolicy
 */
export enum EventIntegrationSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema EventIntegrationSpecForProvider
 */
export interface EventIntegrationSpecForProvider {
  /**
   * Description of the Event Integration.
   *
   * @schema EventIntegrationSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Block that defines the configuration information for the event filter. The Event Filter block is documented below.
   *
   * @schema EventIntegrationSpecForProvider#eventFilter
   */
  readonly eventFilter: EventIntegrationSpecForProviderEventFilter[];

  /**
   * EventBridge bus.
   *
   * @schema EventIntegrationSpecForProvider#eventbridgeBus
   */
  readonly eventbridgeBus: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema EventIntegrationSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema EventIntegrationSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'EventIntegrationSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecForProvider(obj: EventIntegrationSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'description': obj.description,
    'eventFilter': obj.eventFilter?.map(y => toJson_EventIntegrationSpecForProviderEventFilter(y)),
    'eventbridgeBus': obj.eventbridgeBus,
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema EventIntegrationSpecProviderConfigRef
 */
export interface EventIntegrationSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EventIntegrationSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EventIntegrationSpecProviderConfigRef#policy
   */
  readonly policy?: EventIntegrationSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'EventIntegrationSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecProviderConfigRef(obj: EventIntegrationSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EventIntegrationSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema EventIntegrationSpecProviderRef
 */
export interface EventIntegrationSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema EventIntegrationSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EventIntegrationSpecProviderRef#policy
   */
  readonly policy?: EventIntegrationSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'EventIntegrationSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecProviderRef(obj: EventIntegrationSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EventIntegrationSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsTo
 */
export interface EventIntegrationSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: EventIntegrationSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: EventIntegrationSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'EventIntegrationSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecPublishConnectionDetailsTo(obj: EventIntegrationSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_EventIntegrationSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_EventIntegrationSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema EventIntegrationSpecWriteConnectionSecretToRef
 */
export interface EventIntegrationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema EventIntegrationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema EventIntegrationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'EventIntegrationSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecWriteConnectionSecretToRef(obj: EventIntegrationSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EventIntegrationSpecForProviderEventFilter
 */
export interface EventIntegrationSpecForProviderEventFilter {
  /**
   * Source of the events.
   *
   * @schema EventIntegrationSpecForProviderEventFilter#source
   */
  readonly source: string;

}

/**
 * Converts an object of type 'EventIntegrationSpecForProviderEventFilter' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecForProviderEventFilter(obj: EventIntegrationSpecForProviderEventFilter | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'source': obj.source,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EventIntegrationSpecProviderConfigRefPolicy
 */
export interface EventIntegrationSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EventIntegrationSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: EventIntegrationSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EventIntegrationSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: EventIntegrationSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EventIntegrationSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecProviderConfigRefPolicy(obj: EventIntegrationSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema EventIntegrationSpecProviderRefPolicy
 */
export interface EventIntegrationSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EventIntegrationSpecProviderRefPolicy#resolution
   */
  readonly resolution?: EventIntegrationSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EventIntegrationSpecProviderRefPolicy#resolve
   */
  readonly resolve?: EventIntegrationSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'EventIntegrationSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecProviderRefPolicy(obj: EventIntegrationSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRef
 */
export interface EventIntegrationSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'EventIntegrationSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecPublishConnectionDetailsToConfigRef(obj: EventIntegrationSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsToMetadata
 */
export interface EventIntegrationSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'EventIntegrationSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecPublishConnectionDetailsToMetadata(obj: EventIntegrationSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EventIntegrationSpecProviderConfigRefPolicyResolution
 */
export enum EventIntegrationSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EventIntegrationSpecProviderConfigRefPolicyResolve
 */
export enum EventIntegrationSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EventIntegrationSpecProviderRefPolicyResolution
 */
export enum EventIntegrationSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EventIntegrationSpecProviderRefPolicyResolve
 */
export enum EventIntegrationSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy(obj: EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum EventIntegrationSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

