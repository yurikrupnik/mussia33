// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * SchedulingPolicy is the Schema for the SchedulingPolicys API. Provides a Batch Scheduling Policy resource.
 *
 * @schema SchedulingPolicy
 */
export class SchedulingPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SchedulingPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'batch.aws.upbound.io/v1beta1',
    kind: 'SchedulingPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "SchedulingPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SchedulingPolicyProps): any {
    return {
      ...SchedulingPolicy.GVK,
      ...toJson_SchedulingPolicyProps(props),
    };
  }

  /**
   * Defines a "SchedulingPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SchedulingPolicyProps) {
    super(scope, id, {
      ...SchedulingPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SchedulingPolicy.GVK,
      ...toJson_SchedulingPolicyProps(resolved),
    };
  }
}

/**
 * SchedulingPolicy is the Schema for the SchedulingPolicys API. Provides a Batch Scheduling Policy resource.
 *
 * @schema SchedulingPolicy
 */
export interface SchedulingPolicyProps {
  /**
   * @schema SchedulingPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SchedulingPolicySpec defines the desired state of SchedulingPolicy
   *
   * @schema SchedulingPolicy#spec
   */
  readonly spec: SchedulingPolicySpec;

}

/**
 * Converts an object of type 'SchedulingPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicyProps(obj: SchedulingPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SchedulingPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SchedulingPolicySpec defines the desired state of SchedulingPolicy
 *
 * @schema SchedulingPolicySpec
 */
export interface SchedulingPolicySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema SchedulingPolicySpec#deletionPolicy
   */
  readonly deletionPolicy?: SchedulingPolicySpecDeletionPolicy;

  /**
   * @schema SchedulingPolicySpec#forProvider
   */
  readonly forProvider: SchedulingPolicySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema SchedulingPolicySpec#providerConfigRef
   */
  readonly providerConfigRef?: SchedulingPolicySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema SchedulingPolicySpec#providerRef
   */
  readonly providerRef?: SchedulingPolicySpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema SchedulingPolicySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: SchedulingPolicySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema SchedulingPolicySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: SchedulingPolicySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'SchedulingPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpec(obj: SchedulingPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_SchedulingPolicySpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_SchedulingPolicySpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_SchedulingPolicySpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_SchedulingPolicySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_SchedulingPolicySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema SchedulingPolicySpecDeletionPolicy
 */
export enum SchedulingPolicySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema SchedulingPolicySpecForProvider
 */
export interface SchedulingPolicySpecForProvider {
  /**
   * @schema SchedulingPolicySpecForProvider#fairSharePolicy
   */
  readonly fairSharePolicy?: SchedulingPolicySpecForProviderFairSharePolicy[];

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema SchedulingPolicySpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema SchedulingPolicySpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'SchedulingPolicySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecForProvider(obj: SchedulingPolicySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fairSharePolicy': obj.fairSharePolicy?.map(y => toJson_SchedulingPolicySpecForProviderFairSharePolicy(y)),
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema SchedulingPolicySpecProviderConfigRef
 */
export interface SchedulingPolicySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SchedulingPolicySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SchedulingPolicySpecProviderConfigRef#policy
   */
  readonly policy?: SchedulingPolicySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'SchedulingPolicySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecProviderConfigRef(obj: SchedulingPolicySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SchedulingPolicySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema SchedulingPolicySpecProviderRef
 */
export interface SchedulingPolicySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema SchedulingPolicySpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SchedulingPolicySpecProviderRef#policy
   */
  readonly policy?: SchedulingPolicySpecProviderRefPolicy;

}

/**
 * Converts an object of type 'SchedulingPolicySpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecProviderRef(obj: SchedulingPolicySpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SchedulingPolicySpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsTo
 */
export interface SchedulingPolicySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: SchedulingPolicySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: SchedulingPolicySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'SchedulingPolicySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecPublishConnectionDetailsTo(obj: SchedulingPolicySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_SchedulingPolicySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_SchedulingPolicySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema SchedulingPolicySpecWriteConnectionSecretToRef
 */
export interface SchedulingPolicySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema SchedulingPolicySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SchedulingPolicySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'SchedulingPolicySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecWriteConnectionSecretToRef(obj: SchedulingPolicySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SchedulingPolicySpecForProviderFairSharePolicy
 */
export interface SchedulingPolicySpecForProviderFairSharePolicy {
  /**
   * A value used to reserve some of the available maximum vCPU for fair share identifiers that have not yet been used. For more information, see FairsharePolicy.
   *
   * @schema SchedulingPolicySpecForProviderFairSharePolicy#computeReservation
   */
  readonly computeReservation?: number;

  /**
   * @schema SchedulingPolicySpecForProviderFairSharePolicy#shareDecaySeconds
   */
  readonly shareDecaySeconds?: number;

  /**
   * One or more share distribution blocks which define the weights for the fair share identifiers for the fair share policy. For more information, see FairsharePolicy. The share_distribution block is documented below.
   *
   * @schema SchedulingPolicySpecForProviderFairSharePolicy#shareDistribution
   */
  readonly shareDistribution?: SchedulingPolicySpecForProviderFairSharePolicyShareDistribution[];

}

/**
 * Converts an object of type 'SchedulingPolicySpecForProviderFairSharePolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecForProviderFairSharePolicy(obj: SchedulingPolicySpecForProviderFairSharePolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'computeReservation': obj.computeReservation,
    'shareDecaySeconds': obj.shareDecaySeconds,
    'shareDistribution': obj.shareDistribution?.map(y => toJson_SchedulingPolicySpecForProviderFairSharePolicyShareDistribution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema SchedulingPolicySpecProviderConfigRefPolicy
 */
export interface SchedulingPolicySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SchedulingPolicySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: SchedulingPolicySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SchedulingPolicySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: SchedulingPolicySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'SchedulingPolicySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecProviderConfigRefPolicy(obj: SchedulingPolicySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema SchedulingPolicySpecProviderRefPolicy
 */
export interface SchedulingPolicySpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SchedulingPolicySpecProviderRefPolicy#resolution
   */
  readonly resolution?: SchedulingPolicySpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SchedulingPolicySpecProviderRefPolicy#resolve
   */
  readonly resolve?: SchedulingPolicySpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'SchedulingPolicySpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecProviderRefPolicy(obj: SchedulingPolicySpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRef
 */
export interface SchedulingPolicySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'SchedulingPolicySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecPublishConnectionDetailsToConfigRef(obj: SchedulingPolicySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsToMetadata
 */
export interface SchedulingPolicySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'SchedulingPolicySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecPublishConnectionDetailsToMetadata(obj: SchedulingPolicySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema SchedulingPolicySpecForProviderFairSharePolicyShareDistribution
 */
export interface SchedulingPolicySpecForProviderFairSharePolicyShareDistribution {
  /**
   * A fair share identifier or fair share identifier prefix. For more information, see ShareAttributes.
   *
   * @schema SchedulingPolicySpecForProviderFairSharePolicyShareDistribution#shareIdentifier
   */
  readonly shareIdentifier: string;

  /**
   * The weight factor for the fair share identifier. For more information, see ShareAttributes.
   *
   * @schema SchedulingPolicySpecForProviderFairSharePolicyShareDistribution#weightFactor
   */
  readonly weightFactor?: number;

}

/**
 * Converts an object of type 'SchedulingPolicySpecForProviderFairSharePolicyShareDistribution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecForProviderFairSharePolicyShareDistribution(obj: SchedulingPolicySpecForProviderFairSharePolicyShareDistribution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'shareIdentifier': obj.shareIdentifier,
    'weightFactor': obj.weightFactor,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SchedulingPolicySpecProviderConfigRefPolicyResolution
 */
export enum SchedulingPolicySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SchedulingPolicySpecProviderConfigRefPolicyResolve
 */
export enum SchedulingPolicySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SchedulingPolicySpecProviderRefPolicyResolution
 */
export enum SchedulingPolicySpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SchedulingPolicySpecProviderRefPolicyResolve
 */
export enum SchedulingPolicySpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy(obj: SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum SchedulingPolicySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

