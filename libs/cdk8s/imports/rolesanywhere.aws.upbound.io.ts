// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Profile is the Schema for the Profiles API. Provides a Roles Anywhere Profile resource
 *
 * @schema Profile
 */
export class Profile extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Profile"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'rolesanywhere.aws.upbound.io/v1beta1',
    kind: 'Profile',
  }

  /**
   * Renders a Kubernetes manifest for "Profile".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProfileProps): any {
    return {
      ...Profile.GVK,
      ...toJson_ProfileProps(props),
    };
  }

  /**
   * Defines a "Profile" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProfileProps) {
    super(scope, id, {
      ...Profile.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Profile.GVK,
      ...toJson_ProfileProps(resolved),
    };
  }
}

/**
 * Profile is the Schema for the Profiles API. Provides a Roles Anywhere Profile resource
 *
 * @schema Profile
 */
export interface ProfileProps {
  /**
   * @schema Profile#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ProfileSpec defines the desired state of Profile
   *
   * @schema Profile#spec
   */
  readonly spec: ProfileSpec;

}

/**
 * Converts an object of type 'ProfileProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileProps(obj: ProfileProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProfileSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProfileSpec defines the desired state of Profile
 *
 * @schema ProfileSpec
 */
export interface ProfileSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ProfileSpec#deletionPolicy
   */
  readonly deletionPolicy?: ProfileSpecDeletionPolicy;

  /**
   * @schema ProfileSpec#forProvider
   */
  readonly forProvider: ProfileSpecForProvider;

  /**
   * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema ProfileSpec#initProvider
   */
  readonly initProvider?: ProfileSpecInitProvider;

  /**
   * THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema ProfileSpec#managementPolicies
   */
  readonly managementPolicies?: ProfileSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ProfileSpec#providerConfigRef
   */
  readonly providerConfigRef?: ProfileSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ProfileSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ProfileSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ProfileSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ProfileSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ProfileSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpec(obj: ProfileSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ProfileSpecForProvider(obj.forProvider),
    'initProvider': toJson_ProfileSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_ProfileSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_ProfileSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ProfileSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ProfileSpecDeletionPolicy
 */
export enum ProfileSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ProfileSpecForProvider
 */
export interface ProfileSpecForProvider {
  /**
   * The number of seconds the vended session credentials are valid for. Defaults to 3600.
   *
   * @default 3600.
   * @schema ProfileSpecForProvider#durationSeconds
   */
  readonly durationSeconds?: number;

  /**
   * Whether or not the Profile is enabled.
   *
   * @schema ProfileSpecForProvider#enabled
   */
  readonly enabled?: boolean;

  /**
   * A list of managed policy ARNs that apply to the vended session credentials.
   *
   * @schema ProfileSpecForProvider#managedPolicyArns
   */
  readonly managedPolicyArns?: string[];

  /**
   * The name of the Profile.
   *
   * @schema ProfileSpecForProvider#name
   */
  readonly name?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema ProfileSpecForProvider#region
   */
  readonly region: string;

  /**
   * Specifies whether instance properties are required in CreateSession requests with this profile.
   *
   * @schema ProfileSpecForProvider#requireInstanceProperties
   */
  readonly requireInstanceProperties?: boolean;

  /**
   * A list of IAM roles that this profile can assume
   *
   * @schema ProfileSpecForProvider#roleArns
   */
  readonly roleArns?: string[];

  /**
   * References to Role in iam to populate roleArns.
   *
   * @schema ProfileSpecForProvider#roleArnsRefs
   */
  readonly roleArnsRefs?: ProfileSpecForProviderRoleArnsRefs[];

  /**
   * Selector for a list of Role in iam to populate roleArns.
   *
   * @schema ProfileSpecForProvider#roleArnsSelector
   */
  readonly roleArnsSelector?: ProfileSpecForProviderRoleArnsSelector;

  /**
   * A session policy that applies to the trust boundary of the vended session credentials.
   *
   * @schema ProfileSpecForProvider#sessionPolicy
   */
  readonly sessionPolicy?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ProfileSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ProfileSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecForProvider(obj: ProfileSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationSeconds': obj.durationSeconds,
    'enabled': obj.enabled,
    'managedPolicyArns': obj.managedPolicyArns?.map(y => y),
    'name': obj.name,
    'region': obj.region,
    'requireInstanceProperties': obj.requireInstanceProperties,
    'roleArns': obj.roleArns?.map(y => y),
    'roleArnsRefs': obj.roleArnsRefs?.map(y => toJson_ProfileSpecForProviderRoleArnsRefs(y)),
    'roleArnsSelector': toJson_ProfileSpecForProviderRoleArnsSelector(obj.roleArnsSelector),
    'sessionPolicy': obj.sessionPolicy,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS A BETA FIELD. It will be honored unless the Management Policies feature flag is disabled. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema ProfileSpecInitProvider
 */
export interface ProfileSpecInitProvider {
  /**
   * The number of seconds the vended session credentials are valid for. Defaults to 3600.
   *
   * @default 3600.
   * @schema ProfileSpecInitProvider#durationSeconds
   */
  readonly durationSeconds?: number;

  /**
   * Whether or not the Profile is enabled.
   *
   * @schema ProfileSpecInitProvider#enabled
   */
  readonly enabled?: boolean;

  /**
   * A list of managed policy ARNs that apply to the vended session credentials.
   *
   * @schema ProfileSpecInitProvider#managedPolicyArns
   */
  readonly managedPolicyArns?: string[];

  /**
   * The name of the Profile.
   *
   * @schema ProfileSpecInitProvider#name
   */
  readonly name?: string;

  /**
   * Specifies whether instance properties are required in CreateSession requests with this profile.
   *
   * @schema ProfileSpecInitProvider#requireInstanceProperties
   */
  readonly requireInstanceProperties?: boolean;

  /**
   * A session policy that applies to the trust boundary of the vended session credentials.
   *
   * @schema ProfileSpecInitProvider#sessionPolicy
   */
  readonly sessionPolicy?: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema ProfileSpecInitProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'ProfileSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecInitProvider(obj: ProfileSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'durationSeconds': obj.durationSeconds,
    'enabled': obj.enabled,
    'managedPolicyArns': obj.managedPolicyArns?.map(y => y),
    'name': obj.name,
    'requireInstanceProperties': obj.requireInstanceProperties,
    'sessionPolicy': obj.sessionPolicy,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema ProfileSpecManagementPolicies
 */
export enum ProfileSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ProfileSpecProviderConfigRef
 */
export interface ProfileSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProfileSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ProfileSpecProviderConfigRef#policy
   */
  readonly policy?: ProfileSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ProfileSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecProviderConfigRef(obj: ProfileSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ProfileSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ProfileSpecPublishConnectionDetailsTo
 */
export interface ProfileSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ProfileSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ProfileSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ProfileSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ProfileSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ProfileSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ProfileSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecPublishConnectionDetailsTo(obj: ProfileSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ProfileSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ProfileSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ProfileSpecWriteConnectionSecretToRef
 */
export interface ProfileSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ProfileSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProfileSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ProfileSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecWriteConnectionSecretToRef(obj: ProfileSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A Reference to a named object.
 *
 * @schema ProfileSpecForProviderRoleArnsRefs
 */
export interface ProfileSpecForProviderRoleArnsRefs {
  /**
   * Name of the referenced object.
   *
   * @schema ProfileSpecForProviderRoleArnsRefs#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ProfileSpecForProviderRoleArnsRefs#policy
   */
  readonly policy?: ProfileSpecForProviderRoleArnsRefsPolicy;

}

/**
 * Converts an object of type 'ProfileSpecForProviderRoleArnsRefs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecForProviderRoleArnsRefs(obj: ProfileSpecForProviderRoleArnsRefs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ProfileSpecForProviderRoleArnsRefsPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a list of Role in iam to populate roleArns.
 *
 * @schema ProfileSpecForProviderRoleArnsSelector
 */
export interface ProfileSpecForProviderRoleArnsSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ProfileSpecForProviderRoleArnsSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ProfileSpecForProviderRoleArnsSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema ProfileSpecForProviderRoleArnsSelector#policy
   */
  readonly policy?: ProfileSpecForProviderRoleArnsSelectorPolicy;

}

/**
 * Converts an object of type 'ProfileSpecForProviderRoleArnsSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecForProviderRoleArnsSelector(obj: ProfileSpecForProviderRoleArnsSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_ProfileSpecForProviderRoleArnsSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ProfileSpecProviderConfigRefPolicy
 */
export interface ProfileSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProfileSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ProfileSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProfileSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ProfileSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ProfileSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecProviderConfigRefPolicy(obj: ProfileSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ProfileSpecPublishConnectionDetailsToConfigRef
 */
export interface ProfileSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProfileSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ProfileSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ProfileSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ProfileSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecPublishConnectionDetailsToConfigRef(obj: ProfileSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ProfileSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ProfileSpecPublishConnectionDetailsToMetadata
 */
export interface ProfileSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ProfileSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ProfileSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ProfileSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ProfileSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecPublishConnectionDetailsToMetadata(obj: ProfileSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ProfileSpecForProviderRoleArnsRefsPolicy
 */
export interface ProfileSpecForProviderRoleArnsRefsPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProfileSpecForProviderRoleArnsRefsPolicy#resolution
   */
  readonly resolution?: ProfileSpecForProviderRoleArnsRefsPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProfileSpecForProviderRoleArnsRefsPolicy#resolve
   */
  readonly resolve?: ProfileSpecForProviderRoleArnsRefsPolicyResolve;

}

/**
 * Converts an object of type 'ProfileSpecForProviderRoleArnsRefsPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecForProviderRoleArnsRefsPolicy(obj: ProfileSpecForProviderRoleArnsRefsPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema ProfileSpecForProviderRoleArnsSelectorPolicy
 */
export interface ProfileSpecForProviderRoleArnsSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProfileSpecForProviderRoleArnsSelectorPolicy#resolution
   */
  readonly resolution?: ProfileSpecForProviderRoleArnsSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProfileSpecForProviderRoleArnsSelectorPolicy#resolve
   */
  readonly resolve?: ProfileSpecForProviderRoleArnsSelectorPolicyResolve;

}

/**
 * Converts an object of type 'ProfileSpecForProviderRoleArnsSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecForProviderRoleArnsSelectorPolicy(obj: ProfileSpecForProviderRoleArnsSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProfileSpecProviderConfigRefPolicyResolution
 */
export enum ProfileSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProfileSpecProviderConfigRefPolicyResolve
 */
export enum ProfileSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ProfileSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ProfileSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ProfileSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ProfileSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ProfileSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProfileSpecPublishConnectionDetailsToConfigRefPolicy(obj: ProfileSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProfileSpecForProviderRoleArnsRefsPolicyResolution
 */
export enum ProfileSpecForProviderRoleArnsRefsPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProfileSpecForProviderRoleArnsRefsPolicyResolve
 */
export enum ProfileSpecForProviderRoleArnsRefsPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProfileSpecForProviderRoleArnsSelectorPolicyResolution
 */
export enum ProfileSpecForProviderRoleArnsSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProfileSpecForProviderRoleArnsSelectorPolicyResolve
 */
export enum ProfileSpecForProviderRoleArnsSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ProfileSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

