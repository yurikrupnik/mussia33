// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AnomalyMonitor is the Schema for the AnomalyMonitors API. Provides a CE Cost Anomaly Monitor
 *
 * @schema AnomalyMonitor
 */
export class AnomalyMonitor extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AnomalyMonitor"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ce.aws.upbound.io/v1beta1',
    kind: 'AnomalyMonitor',
  }

  /**
   * Renders a Kubernetes manifest for "AnomalyMonitor".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AnomalyMonitorProps): any {
    return {
      ...AnomalyMonitor.GVK,
      ...toJson_AnomalyMonitorProps(props),
    };
  }

  /**
   * Defines a "AnomalyMonitor" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AnomalyMonitorProps) {
    super(scope, id, {
      ...AnomalyMonitor.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AnomalyMonitor.GVK,
      ...toJson_AnomalyMonitorProps(resolved),
    };
  }
}

/**
 * AnomalyMonitor is the Schema for the AnomalyMonitors API. Provides a CE Cost Anomaly Monitor
 *
 * @schema AnomalyMonitor
 */
export interface AnomalyMonitorProps {
  /**
   * @schema AnomalyMonitor#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AnomalyMonitorSpec defines the desired state of AnomalyMonitor
   *
   * @schema AnomalyMonitor#spec
   */
  readonly spec: AnomalyMonitorSpec;

}

/**
 * Converts an object of type 'AnomalyMonitorProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorProps(obj: AnomalyMonitorProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AnomalyMonitorSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AnomalyMonitorSpec defines the desired state of AnomalyMonitor
 *
 * @schema AnomalyMonitorSpec
 */
export interface AnomalyMonitorSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema AnomalyMonitorSpec#deletionPolicy
   */
  readonly deletionPolicy?: AnomalyMonitorSpecDeletionPolicy;

  /**
   * @schema AnomalyMonitorSpec#forProvider
   */
  readonly forProvider: AnomalyMonitorSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AnomalyMonitorSpec#providerConfigRef
   */
  readonly providerConfigRef?: AnomalyMonitorSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema AnomalyMonitorSpec#providerRef
   */
  readonly providerRef?: AnomalyMonitorSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AnomalyMonitorSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: AnomalyMonitorSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema AnomalyMonitorSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AnomalyMonitorSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'AnomalyMonitorSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpec(obj: AnomalyMonitorSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_AnomalyMonitorSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_AnomalyMonitorSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_AnomalyMonitorSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_AnomalyMonitorSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_AnomalyMonitorSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema AnomalyMonitorSpecDeletionPolicy
 */
export enum AnomalyMonitorSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema AnomalyMonitorSpecForProvider
 */
export interface AnomalyMonitorSpecForProvider {
  /**
   * The dimensions to evaluate. Valid values: SERVICE.
   *
   * @schema AnomalyMonitorSpecForProvider#monitorDimension
   */
  readonly monitorDimension?: string;

  /**
   * A valid JSON representation for the Expression object.
   *
   * @schema AnomalyMonitorSpecForProvider#monitorSpecification
   */
  readonly monitorSpecification?: string;

  /**
   * The possible type values. Valid values: DIMENSIONAL | CUSTOM.
   *
   * @schema AnomalyMonitorSpecForProvider#monitorType
   */
  readonly monitorType: string;

  /**
   * The name of the monitor.
   *
   * @schema AnomalyMonitorSpecForProvider#name
   */
  readonly name: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema AnomalyMonitorSpecForProvider#region
   */
  readonly region: string;

  /**
   * Key-value map of resource tags.
   *
   * @schema AnomalyMonitorSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * Converts an object of type 'AnomalyMonitorSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecForProvider(obj: AnomalyMonitorSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'monitorDimension': obj.monitorDimension,
    'monitorSpecification': obj.monitorSpecification,
    'monitorType': obj.monitorType,
    'name': obj.name,
    'region': obj.region,
    'tags': ((obj.tags) === undefined) ? undefined : (Object.entries(obj.tags).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AnomalyMonitorSpecProviderConfigRef
 */
export interface AnomalyMonitorSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AnomalyMonitorSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AnomalyMonitorSpecProviderConfigRef#policy
   */
  readonly policy?: AnomalyMonitorSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecProviderConfigRef(obj: AnomalyMonitorSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AnomalyMonitorSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema AnomalyMonitorSpecProviderRef
 */
export interface AnomalyMonitorSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema AnomalyMonitorSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AnomalyMonitorSpecProviderRef#policy
   */
  readonly policy?: AnomalyMonitorSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecProviderRef(obj: AnomalyMonitorSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AnomalyMonitorSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsTo
 */
export interface AnomalyMonitorSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: AnomalyMonitorSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: AnomalyMonitorSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecPublishConnectionDetailsTo(obj: AnomalyMonitorSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_AnomalyMonitorSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_AnomalyMonitorSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema AnomalyMonitorSpecWriteConnectionSecretToRef
 */
export interface AnomalyMonitorSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AnomalyMonitorSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AnomalyMonitorSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecWriteConnectionSecretToRef(obj: AnomalyMonitorSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AnomalyMonitorSpecProviderConfigRefPolicy
 */
export interface AnomalyMonitorSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AnomalyMonitorSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: AnomalyMonitorSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AnomalyMonitorSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: AnomalyMonitorSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecProviderConfigRefPolicy(obj: AnomalyMonitorSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AnomalyMonitorSpecProviderRefPolicy
 */
export interface AnomalyMonitorSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AnomalyMonitorSpecProviderRefPolicy#resolution
   */
  readonly resolution?: AnomalyMonitorSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AnomalyMonitorSpecProviderRefPolicy#resolve
   */
  readonly resolve?: AnomalyMonitorSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecProviderRefPolicy(obj: AnomalyMonitorSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRef
 */
export interface AnomalyMonitorSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecPublishConnectionDetailsToConfigRef(obj: AnomalyMonitorSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsToMetadata
 */
export interface AnomalyMonitorSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecPublishConnectionDetailsToMetadata(obj: AnomalyMonitorSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AnomalyMonitorSpecProviderConfigRefPolicyResolution
 */
export enum AnomalyMonitorSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AnomalyMonitorSpecProviderConfigRefPolicyResolve
 */
export enum AnomalyMonitorSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AnomalyMonitorSpecProviderRefPolicyResolution
 */
export enum AnomalyMonitorSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AnomalyMonitorSpecProviderRefPolicyResolve
 */
export enum AnomalyMonitorSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy(obj: AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum AnomalyMonitorSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

