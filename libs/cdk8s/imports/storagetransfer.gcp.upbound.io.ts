// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AgentPool is the Schema for the AgentPools API. Represents an On-Premises Agent pool.
 *
 * @schema AgentPool
 */
export class AgentPool extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AgentPool"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'storagetransfer.gcp.upbound.io/v1beta1',
    kind: 'AgentPool',
  }

  /**
   * Renders a Kubernetes manifest for "AgentPool".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AgentPoolProps): any {
    return {
      ...AgentPool.GVK,
      ...toJson_AgentPoolProps(props),
    };
  }

  /**
   * Defines a "AgentPool" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AgentPoolProps) {
    super(scope, id, {
      ...AgentPool.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AgentPool.GVK,
      ...toJson_AgentPoolProps(resolved),
    };
  }
}

/**
 * AgentPool is the Schema for the AgentPools API. Represents an On-Premises Agent pool.
 *
 * @schema AgentPool
 */
export interface AgentPoolProps {
  /**
   * @schema AgentPool#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AgentPoolSpec defines the desired state of AgentPool
   *
   * @schema AgentPool#spec
   */
  readonly spec: AgentPoolSpec;

}

/**
 * Converts an object of type 'AgentPoolProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolProps(obj: AgentPoolProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AgentPoolSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AgentPoolSpec defines the desired state of AgentPool
 *
 * @schema AgentPoolSpec
 */
export interface AgentPoolSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema AgentPoolSpec#deletionPolicy
   */
  readonly deletionPolicy?: AgentPoolSpecDeletionPolicy;

  /**
   * @schema AgentPoolSpec#forProvider
   */
  readonly forProvider: AgentPoolSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
   *
   * @schema AgentPoolSpec#initProvider
   */
  readonly initProvider?: AgentPoolSpecInitProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
   *
   * @schema AgentPoolSpec#managementPolicies
   */
  readonly managementPolicies?: AgentPoolSpecManagementPolicies[];

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AgentPoolSpec#providerConfigRef
   */
  readonly providerConfigRef?: AgentPoolSpecProviderConfigRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AgentPoolSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: AgentPoolSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema AgentPoolSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AgentPoolSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'AgentPoolSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpec(obj: AgentPoolSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_AgentPoolSpecForProvider(obj.forProvider),
    'initProvider': toJson_AgentPoolSpecInitProvider(obj.initProvider),
    'managementPolicies': obj.managementPolicies?.map(y => y),
    'providerConfigRef': toJson_AgentPoolSpecProviderConfigRef(obj.providerConfigRef),
    'publishConnectionDetailsTo': toJson_AgentPoolSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_AgentPoolSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema AgentPoolSpecDeletionPolicy
 */
export enum AgentPoolSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema AgentPoolSpecForProvider
 */
export interface AgentPoolSpecForProvider {
  /**
   * Specifies the bandwidth limit details. If this field is unspecified, the default value is set as 'No Limit'. Structure is documented below.
   *
   * @schema AgentPoolSpecForProvider#bandwidthLimit
   */
  readonly bandwidthLimit?: AgentPoolSpecForProviderBandwidthLimit[];

  /**
   * Specifies the client-specified AgentPool description.
   *
   * @schema AgentPoolSpecForProvider#displayName
   */
  readonly displayName?: string;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema AgentPoolSpecForProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'AgentPoolSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecForProvider(obj: AgentPoolSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bandwidthLimit': obj.bandwidthLimit?.map(y => toJson_AgentPoolSpecForProviderBandwidthLimit(y)),
    'displayName': obj.displayName,
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.
 *
 * @schema AgentPoolSpecInitProvider
 */
export interface AgentPoolSpecInitProvider {
  /**
   * Specifies the bandwidth limit details. If this field is unspecified, the default value is set as 'No Limit'. Structure is documented below.
   *
   * @schema AgentPoolSpecInitProvider#bandwidthLimit
   */
  readonly bandwidthLimit?: AgentPoolSpecInitProviderBandwidthLimit[];

  /**
   * Specifies the client-specified AgentPool description.
   *
   * @schema AgentPoolSpecInitProvider#displayName
   */
  readonly displayName?: string;

  /**
   * The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
   *
   * @schema AgentPoolSpecInitProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'AgentPoolSpecInitProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecInitProvider(obj: AgentPoolSpecInitProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bandwidthLimit': obj.bandwidthLimit?.map(y => toJson_AgentPoolSpecInitProviderBandwidthLimit(y)),
    'displayName': obj.displayName,
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A ManagementAction represents an action that the Crossplane controllers can take on an external resource.
 *
 * @schema AgentPoolSpecManagementPolicies
 */
export enum AgentPoolSpecManagementPolicies {
  /** Observe */
  OBSERVE = "Observe",
  /** Create */
  CREATE = "Create",
  /** Update */
  UPDATE = "Update",
  /** Delete */
  DELETE = "Delete",
  /** LateInitialize */
  LATE_INITIALIZE = "LateInitialize",
  /** * */
  VALUE_ = "*",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AgentPoolSpecProviderConfigRef
 */
export interface AgentPoolSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AgentPoolSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AgentPoolSpecProviderConfigRef#policy
   */
  readonly policy?: AgentPoolSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'AgentPoolSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecProviderConfigRef(obj: AgentPoolSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AgentPoolSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsTo
 */
export interface AgentPoolSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: AgentPoolSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: AgentPoolSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'AgentPoolSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecPublishConnectionDetailsTo(obj: AgentPoolSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_AgentPoolSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_AgentPoolSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema AgentPoolSpecWriteConnectionSecretToRef
 */
export interface AgentPoolSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AgentPoolSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AgentPoolSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'AgentPoolSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecWriteConnectionSecretToRef(obj: AgentPoolSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AgentPoolSpecForProviderBandwidthLimit
 */
export interface AgentPoolSpecForProviderBandwidthLimit {
  /**
   * Bandwidth rate in megabytes per second, distributed across all the agents in the pool.
   *
   * @schema AgentPoolSpecForProviderBandwidthLimit#limitMbps
   */
  readonly limitMbps?: string;

}

/**
 * Converts an object of type 'AgentPoolSpecForProviderBandwidthLimit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecForProviderBandwidthLimit(obj: AgentPoolSpecForProviderBandwidthLimit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limitMbps': obj.limitMbps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AgentPoolSpecInitProviderBandwidthLimit
 */
export interface AgentPoolSpecInitProviderBandwidthLimit {
  /**
   * Bandwidth rate in megabytes per second, distributed across all the agents in the pool.
   *
   * @schema AgentPoolSpecInitProviderBandwidthLimit#limitMbps
   */
  readonly limitMbps?: string;

}

/**
 * Converts an object of type 'AgentPoolSpecInitProviderBandwidthLimit' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecInitProviderBandwidthLimit(obj: AgentPoolSpecInitProviderBandwidthLimit | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limitMbps': obj.limitMbps,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AgentPoolSpecProviderConfigRefPolicy
 */
export interface AgentPoolSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AgentPoolSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: AgentPoolSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AgentPoolSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: AgentPoolSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AgentPoolSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecProviderConfigRefPolicy(obj: AgentPoolSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsToConfigRef
 */
export interface AgentPoolSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'AgentPoolSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecPublishConnectionDetailsToConfigRef(obj: AgentPoolSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsToMetadata
 */
export interface AgentPoolSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'AgentPoolSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecPublishConnectionDetailsToMetadata(obj: AgentPoolSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AgentPoolSpecProviderConfigRefPolicyResolution
 */
export enum AgentPoolSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AgentPoolSpecProviderConfigRefPolicyResolve
 */
export enum AgentPoolSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy(obj: AgentPoolSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum AgentPoolSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

