// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Channel is the Schema for the Channels API. The Eventarc Channel resource
 *
 * @schema Channel
 */
export class Channel extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Channel"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'eventarc.gcp.upbound.io/v1beta1',
    kind: 'Channel',
  }

  /**
   * Renders a Kubernetes manifest for "Channel".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ChannelProps): any {
    return {
      ...Channel.GVK,
      ...toJson_ChannelProps(props),
    };
  }

  /**
   * Defines a "Channel" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ChannelProps) {
    super(scope, id, {
      ...Channel.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Channel.GVK,
      ...toJson_ChannelProps(resolved),
    };
  }
}

/**
 * Channel is the Schema for the Channels API. The Eventarc Channel resource
 *
 * @schema Channel
 */
export interface ChannelProps {
  /**
   * @schema Channel#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ChannelSpec defines the desired state of Channel
   *
   * @schema Channel#spec
   */
  readonly spec: ChannelSpec;

}

/**
 * Converts an object of type 'ChannelProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelProps(obj: ChannelProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ChannelSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ChannelSpec defines the desired state of Channel
 *
 * @schema ChannelSpec
 */
export interface ChannelSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ChannelSpec#deletionPolicy
   */
  readonly deletionPolicy?: ChannelSpecDeletionPolicy;

  /**
   * @schema ChannelSpec#forProvider
   */
  readonly forProvider: ChannelSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema ChannelSpec#managementPolicy
   */
  readonly managementPolicy?: ChannelSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ChannelSpec#providerConfigRef
   */
  readonly providerConfigRef?: ChannelSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ChannelSpec#providerRef
   */
  readonly providerRef?: ChannelSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ChannelSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: ChannelSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema ChannelSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ChannelSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ChannelSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpec(obj: ChannelSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_ChannelSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_ChannelSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_ChannelSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_ChannelSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_ChannelSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ChannelSpecDeletionPolicy
 */
export enum ChannelSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema ChannelSpecForProvider
 */
export interface ChannelSpecForProvider {
  /**
   * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern projects/_/locations/_/keyRings/_/cryptoKeys/*.
   *
   * @schema ChannelSpecForProvider#cryptoKeyName
   */
  readonly cryptoKeyName?: string;

  /**
   * The location for the resource
   *
   * @schema ChannelSpecForProvider#location
   */
  readonly location: string;

  /**
   * The project for the resource
   *
   * @schema ChannelSpecForProvider#project
   */
  readonly project?: string;

  /**
   * The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: projects/{project}/locations/{location}/providers/{provider_id}.
   *
   * @schema ChannelSpecForProvider#thirdPartyProvider
   */
  readonly thirdPartyProvider?: string;

}

/**
 * Converts an object of type 'ChannelSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecForProvider(obj: ChannelSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cryptoKeyName': obj.cryptoKeyName,
    'location': obj.location,
    'project': obj.project,
    'thirdPartyProvider': obj.thirdPartyProvider,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema ChannelSpecManagementPolicy
 */
export enum ChannelSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ChannelSpecProviderConfigRef
 */
export interface ChannelSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ChannelSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ChannelSpecProviderConfigRef#policy
   */
  readonly policy?: ChannelSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'ChannelSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderConfigRef(obj: ChannelSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ChannelSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ChannelSpecProviderRef
 */
export interface ChannelSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ChannelSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ChannelSpecProviderRef#policy
   */
  readonly policy?: ChannelSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'ChannelSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderRef(obj: ChannelSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ChannelSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ChannelSpecPublishConnectionDetailsTo
 */
export interface ChannelSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: ChannelSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: ChannelSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema ChannelSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsTo(obj: ChannelSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_ChannelSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_ChannelSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema ChannelSpecWriteConnectionSecretToRef
 */
export interface ChannelSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ChannelSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ChannelSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'ChannelSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecWriteConnectionSecretToRef(obj: ChannelSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ChannelSpecProviderConfigRefPolicy
 */
export interface ChannelSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ChannelSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: ChannelSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ChannelSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: ChannelSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ChannelSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderConfigRefPolicy(obj: ChannelSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema ChannelSpecProviderRefPolicy
 */
export interface ChannelSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ChannelSpecProviderRefPolicy#resolution
   */
  readonly resolution?: ChannelSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ChannelSpecProviderRefPolicy#resolve
   */
  readonly resolve?: ChannelSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'ChannelSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecProviderRefPolicy(obj: ChannelSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRef
 */
export interface ChannelSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: ChannelSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToConfigRef(obj: ChannelSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_ChannelSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema ChannelSpecPublishConnectionDetailsToMetadata
 */
export interface ChannelSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema ChannelSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToMetadata(obj: ChannelSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ChannelSpecProviderConfigRefPolicyResolution
 */
export enum ChannelSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ChannelSpecProviderConfigRefPolicyResolve
 */
export enum ChannelSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ChannelSpecProviderRefPolicyResolution
 */
export enum ChannelSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ChannelSpecProviderRefPolicyResolve
 */
export enum ChannelSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface ChannelSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'ChannelSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ChannelSpecPublishConnectionDetailsToConfigRefPolicy(obj: ChannelSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum ChannelSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * GoogleChannelConfig is the Schema for the GoogleChannelConfigs API. The Eventarc GoogleChannelConfig resource
 *
 * @schema GoogleChannelConfig
 */
export class GoogleChannelConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GoogleChannelConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'eventarc.gcp.upbound.io/v1beta1',
    kind: 'GoogleChannelConfig',
  }

  /**
   * Renders a Kubernetes manifest for "GoogleChannelConfig".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GoogleChannelConfigProps): any {
    return {
      ...GoogleChannelConfig.GVK,
      ...toJson_GoogleChannelConfigProps(props),
    };
  }

  /**
   * Defines a "GoogleChannelConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GoogleChannelConfigProps) {
    super(scope, id, {
      ...GoogleChannelConfig.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...GoogleChannelConfig.GVK,
      ...toJson_GoogleChannelConfigProps(resolved),
    };
  }
}

/**
 * GoogleChannelConfig is the Schema for the GoogleChannelConfigs API. The Eventarc GoogleChannelConfig resource
 *
 * @schema GoogleChannelConfig
 */
export interface GoogleChannelConfigProps {
  /**
   * @schema GoogleChannelConfig#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * GoogleChannelConfigSpec defines the desired state of GoogleChannelConfig
   *
   * @schema GoogleChannelConfig#spec
   */
  readonly spec: GoogleChannelConfigSpec;

}

/**
 * Converts an object of type 'GoogleChannelConfigProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigProps(obj: GoogleChannelConfigProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_GoogleChannelConfigSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GoogleChannelConfigSpec defines the desired state of GoogleChannelConfig
 *
 * @schema GoogleChannelConfigSpec
 */
export interface GoogleChannelConfigSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema GoogleChannelConfigSpec#deletionPolicy
   */
  readonly deletionPolicy?: GoogleChannelConfigSpecDeletionPolicy;

  /**
   * @schema GoogleChannelConfigSpec#forProvider
   */
  readonly forProvider: GoogleChannelConfigSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema GoogleChannelConfigSpec#managementPolicy
   */
  readonly managementPolicy?: GoogleChannelConfigSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema GoogleChannelConfigSpec#providerConfigRef
   */
  readonly providerConfigRef?: GoogleChannelConfigSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema GoogleChannelConfigSpec#providerRef
   */
  readonly providerRef?: GoogleChannelConfigSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema GoogleChannelConfigSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: GoogleChannelConfigSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema GoogleChannelConfigSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: GoogleChannelConfigSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpec(obj: GoogleChannelConfigSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_GoogleChannelConfigSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_GoogleChannelConfigSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_GoogleChannelConfigSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_GoogleChannelConfigSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_GoogleChannelConfigSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema GoogleChannelConfigSpecDeletionPolicy
 */
export enum GoogleChannelConfigSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema GoogleChannelConfigSpecForProvider
 */
export interface GoogleChannelConfigSpecForProvider {
  /**
   * Optional. Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern projects/_/locations/_/keyRings/_/cryptoKeys/*.
   *
   * @schema GoogleChannelConfigSpecForProvider#cryptoKeyName
   */
  readonly cryptoKeyName?: string;

  /**
   * The location for the resource
   *
   * @schema GoogleChannelConfigSpecForProvider#location
   */
  readonly location: string;

  /**
   * The project for the resource
   *
   * @schema GoogleChannelConfigSpecForProvider#project
   */
  readonly project?: string;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecForProvider(obj: GoogleChannelConfigSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cryptoKeyName': obj.cryptoKeyName,
    'location': obj.location,
    'project': obj.project,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema GoogleChannelConfigSpecManagementPolicy
 */
export enum GoogleChannelConfigSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema GoogleChannelConfigSpecProviderConfigRef
 */
export interface GoogleChannelConfigSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema GoogleChannelConfigSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema GoogleChannelConfigSpecProviderConfigRef#policy
   */
  readonly policy?: GoogleChannelConfigSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecProviderConfigRef(obj: GoogleChannelConfigSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_GoogleChannelConfigSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema GoogleChannelConfigSpecProviderRef
 */
export interface GoogleChannelConfigSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema GoogleChannelConfigSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema GoogleChannelConfigSpecProviderRef#policy
   */
  readonly policy?: GoogleChannelConfigSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecProviderRef(obj: GoogleChannelConfigSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_GoogleChannelConfigSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsTo
 */
export interface GoogleChannelConfigSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: GoogleChannelConfigSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecPublishConnectionDetailsTo(obj: GoogleChannelConfigSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_GoogleChannelConfigSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema GoogleChannelConfigSpecWriteConnectionSecretToRef
 */
export interface GoogleChannelConfigSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema GoogleChannelConfigSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema GoogleChannelConfigSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecWriteConnectionSecretToRef(obj: GoogleChannelConfigSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema GoogleChannelConfigSpecProviderConfigRefPolicy
 */
export interface GoogleChannelConfigSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema GoogleChannelConfigSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: GoogleChannelConfigSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema GoogleChannelConfigSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: GoogleChannelConfigSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecProviderConfigRefPolicy(obj: GoogleChannelConfigSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema GoogleChannelConfigSpecProviderRefPolicy
 */
export interface GoogleChannelConfigSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema GoogleChannelConfigSpecProviderRefPolicy#resolution
   */
  readonly resolution?: GoogleChannelConfigSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema GoogleChannelConfigSpecProviderRefPolicy#resolve
   */
  readonly resolve?: GoogleChannelConfigSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecProviderRefPolicy(obj: GoogleChannelConfigSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef
 */
export interface GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef(obj: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsToMetadata
 */
export interface GoogleChannelConfigSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecPublishConnectionDetailsToMetadata(obj: GoogleChannelConfigSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema GoogleChannelConfigSpecProviderConfigRefPolicyResolution
 */
export enum GoogleChannelConfigSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema GoogleChannelConfigSpecProviderConfigRefPolicyResolve
 */
export enum GoogleChannelConfigSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema GoogleChannelConfigSpecProviderRefPolicyResolution
 */
export enum GoogleChannelConfigSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema GoogleChannelConfigSpecProviderRefPolicyResolve
 */
export enum GoogleChannelConfigSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy(obj: GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum GoogleChannelConfigSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}


/**
 * Trigger is the Schema for the Triggers API. The Eventarc Trigger resource
 *
 * @schema Trigger
 */
export class Trigger extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Trigger"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'eventarc.gcp.upbound.io/v1beta1',
    kind: 'Trigger',
  }

  /**
   * Renders a Kubernetes manifest for "Trigger".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TriggerProps): any {
    return {
      ...Trigger.GVK,
      ...toJson_TriggerProps(props),
    };
  }

  /**
   * Defines a "Trigger" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TriggerProps) {
    super(scope, id, {
      ...Trigger.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Trigger.GVK,
      ...toJson_TriggerProps(resolved),
    };
  }
}

/**
 * Trigger is the Schema for the Triggers API. The Eventarc Trigger resource
 *
 * @schema Trigger
 */
export interface TriggerProps {
  /**
   * @schema Trigger#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * TriggerSpec defines the desired state of Trigger
   *
   * @schema Trigger#spec
   */
  readonly spec: TriggerSpec;

}

/**
 * Converts an object of type 'TriggerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerProps(obj: TriggerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_TriggerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TriggerSpec defines the desired state of Trigger
 *
 * @schema TriggerSpec
 */
export interface TriggerSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema TriggerSpec#deletionPolicy
   */
  readonly deletionPolicy?: TriggerSpecDeletionPolicy;

  /**
   * @schema TriggerSpec#forProvider
   */
  readonly forProvider: TriggerSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema TriggerSpec#managementPolicy
   */
  readonly managementPolicy?: TriggerSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema TriggerSpec#providerConfigRef
   */
  readonly providerConfigRef?: TriggerSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema TriggerSpec#providerRef
   */
  readonly providerRef?: TriggerSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema TriggerSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: TriggerSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema TriggerSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: TriggerSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'TriggerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpec(obj: TriggerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_TriggerSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_TriggerSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_TriggerSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_TriggerSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_TriggerSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema TriggerSpecDeletionPolicy
 */
export enum TriggerSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema TriggerSpecForProvider
 */
export interface TriggerSpecForProvider {
  /**
   * Optional. The name of the channel associated with the trigger in projects/{project}/locations/{location}/channels/{channel} format. You must provide a channel to receive events from Eventarc SaaS partners.
   *
   * @schema TriggerSpecForProvider#channel
   */
  readonly channel?: string;

  /**
   * Required. Destination specifies where the events should be sent to.
   *
   * @schema TriggerSpecForProvider#destination
   */
  readonly destination?: TriggerSpecForProviderDestination[];

  /**
   * Optional. User labels attached to the triggers that can be used to group resources.
   *
   * @schema TriggerSpecForProvider#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * The location for the resource
   *
   * @schema TriggerSpecForProvider#location
   */
  readonly location: string;

  /**
   * Required. null The list of filters that applies to event attributes. Only events that match all the provided filters will be sent to the destination.
   *
   * @schema TriggerSpecForProvider#matchingCriteria
   */
  readonly matchingCriteria?: TriggerSpecForProviderMatchingCriteria[];

  /**
   * The project for the resource
   *
   * @schema TriggerSpecForProvider#project
   */
  readonly project?: string;

  /**
   * Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have iam.serviceAccounts.actAs permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have roles/eventarc.eventReceiver IAM role.
   *
   * @schema TriggerSpecForProvider#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * Optional. In order to deliver messages, Eventarc may use other GCP products as transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
   *
   * @schema TriggerSpecForProvider#transport
   */
  readonly transport?: TriggerSpecForProviderTransport[];

}

/**
 * Converts an object of type 'TriggerSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProvider(obj: TriggerSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'channel': obj.channel,
    'destination': obj.destination?.map(y => toJson_TriggerSpecForProviderDestination(y)),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'location': obj.location,
    'matchingCriteria': obj.matchingCriteria?.map(y => toJson_TriggerSpecForProviderMatchingCriteria(y)),
    'project': obj.project,
    'serviceAccount': obj.serviceAccount,
    'transport': obj.transport?.map(y => toJson_TriggerSpecForProviderTransport(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema TriggerSpecManagementPolicy
 */
export enum TriggerSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema TriggerSpecProviderConfigRef
 */
export interface TriggerSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema TriggerSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema TriggerSpecProviderConfigRef#policy
   */
  readonly policy?: TriggerSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'TriggerSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecProviderConfigRef(obj: TriggerSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_TriggerSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema TriggerSpecProviderRef
 */
export interface TriggerSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema TriggerSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema TriggerSpecProviderRef#policy
   */
  readonly policy?: TriggerSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'TriggerSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecProviderRef(obj: TriggerSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_TriggerSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema TriggerSpecPublishConnectionDetailsTo
 */
export interface TriggerSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema TriggerSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: TriggerSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema TriggerSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: TriggerSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema TriggerSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'TriggerSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecPublishConnectionDetailsTo(obj: TriggerSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_TriggerSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_TriggerSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema TriggerSpecWriteConnectionSecretToRef
 */
export interface TriggerSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema TriggerSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema TriggerSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'TriggerSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecWriteConnectionSecretToRef(obj: TriggerSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderDestination
 */
export interface TriggerSpecForProviderDestination {
  /**
   * [WARNING] Configuring a Cloud Function in Trigger is not supported as of today. The Cloud Function resource name. Format: projects/{project}/locations/{location}/functions/{function}
   *
   * @schema TriggerSpecForProviderDestination#cloudFunction
   */
  readonly cloudFunction?: string;

  /**
   * Cloud Run fully-managed service that receives the events. The service should be running in the same project of the trigger.
   *
   * @schema TriggerSpecForProviderDestination#cloudRunService
   */
  readonly cloudRunService?: TriggerSpecForProviderDestinationCloudRunService[];

  /**
   * A GKE service capable of receiving events. The service should be running in the same project as the trigger.
   *
   * @schema TriggerSpecForProviderDestination#gke
   */
  readonly gke?: TriggerSpecForProviderDestinationGke[];

  /**
   * The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: projects/{project}/locations/{location}/workflows/{workflow}
   *
   * @schema TriggerSpecForProviderDestination#workflow
   */
  readonly workflow?: string;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestination(obj: TriggerSpecForProviderDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cloudFunction': obj.cloudFunction,
    'cloudRunService': obj.cloudRunService?.map(y => toJson_TriggerSpecForProviderDestinationCloudRunService(y)),
    'gke': obj.gke?.map(y => toJson_TriggerSpecForProviderDestinationGke(y)),
    'workflow': obj.workflow,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderMatchingCriteria
 */
export interface TriggerSpecForProviderMatchingCriteria {
  /**
   * Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. All triggers MUST provide a filter for the 'type' attribute.
   *
   * @schema TriggerSpecForProviderMatchingCriteria#attribute
   */
  readonly attribute: string;

  /**
   * Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is match-path-pattern.
   *
   * @schema TriggerSpecForProviderMatchingCriteria#operator
   */
  readonly operator?: string;

  /**
   * Required. The value for the attribute. See https://cloud.google.com/eventarc/docs/creating-triggers#trigger-gcloud for available values.
   *
   * @schema TriggerSpecForProviderMatchingCriteria#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'TriggerSpecForProviderMatchingCriteria' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderMatchingCriteria(obj: TriggerSpecForProviderMatchingCriteria | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'attribute': obj.attribute,
    'operator': obj.operator,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderTransport
 */
export interface TriggerSpecForProviderTransport {
  /**
   * The Pub/Sub topic and subscription used by Eventarc as delivery intermediary.
   *
   * @schema TriggerSpecForProviderTransport#pubsub
   */
  readonly pubsub?: TriggerSpecForProviderTransportPubsub[];

}

/**
 * Converts an object of type 'TriggerSpecForProviderTransport' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderTransport(obj: TriggerSpecForProviderTransport | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'pubsub': obj.pubsub?.map(y => toJson_TriggerSpecForProviderTransportPubsub(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema TriggerSpecProviderConfigRefPolicy
 */
export interface TriggerSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema TriggerSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: TriggerSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema TriggerSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: TriggerSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'TriggerSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecProviderConfigRefPolicy(obj: TriggerSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema TriggerSpecProviderRefPolicy
 */
export interface TriggerSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema TriggerSpecProviderRefPolicy#resolution
   */
  readonly resolution?: TriggerSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema TriggerSpecProviderRefPolicy#resolve
   */
  readonly resolve?: TriggerSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'TriggerSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecProviderRefPolicy(obj: TriggerSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema TriggerSpecPublishConnectionDetailsToConfigRef
 */
export interface TriggerSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema TriggerSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema TriggerSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: TriggerSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'TriggerSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecPublishConnectionDetailsToConfigRef(obj: TriggerSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_TriggerSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema TriggerSpecPublishConnectionDetailsToMetadata
 */
export interface TriggerSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema TriggerSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema TriggerSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema TriggerSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'TriggerSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecPublishConnectionDetailsToMetadata(obj: TriggerSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderDestinationCloudRunService
 */
export interface TriggerSpecForProviderDestinationCloudRunService {
  /**
   * Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @schema TriggerSpecForProviderDestinationCloudRunService#path
   */
  readonly path?: string;

  /**
   * Required. The region the Cloud Run service is deployed in.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunService#region
   */
  readonly region?: string;

  /**
   * Required. Name of the GKE service.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunService#service
   */
  readonly service?: string;

  /**
   * Reference to a Service in cloudrun to populate service.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunService#serviceRef
   */
  readonly serviceRef?: TriggerSpecForProviderDestinationCloudRunServiceServiceRef;

  /**
   * Selector for a Service in cloudrun to populate service.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunService#serviceSelector
   */
  readonly serviceSelector?: TriggerSpecForProviderDestinationCloudRunServiceServiceSelector;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationCloudRunService' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationCloudRunService(obj: TriggerSpecForProviderDestinationCloudRunService | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'region': obj.region,
    'service': obj.service,
    'serviceRef': toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceRef(obj.serviceRef),
    'serviceSelector': toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceSelector(obj.serviceSelector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderDestinationGke
 */
export interface TriggerSpecForProviderDestinationGke {
  /**
   * Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
   *
   * @schema TriggerSpecForProviderDestinationGke#cluster
   */
  readonly cluster: string;

  /**
   * The location for the resource
   *
   * @schema TriggerSpecForProviderDestinationGke#location
   */
  readonly location: string;

  /**
   * Required. The namespace the GKE service is running in.
   *
   * @schema TriggerSpecForProviderDestinationGke#namespace
   */
  readonly namespace: string;

  /**
   * Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @schema TriggerSpecForProviderDestinationGke#path
   */
  readonly path?: string;

  /**
   * Required. Name of the GKE service.
   *
   * @schema TriggerSpecForProviderDestinationGke#service
   */
  readonly service: string;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationGke' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationGke(obj: TriggerSpecForProviderDestinationGke | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cluster': obj.cluster,
    'location': obj.location,
    'namespace': obj.namespace,
    'path': obj.path,
    'service': obj.service,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TriggerSpecForProviderTransportPubsub
 */
export interface TriggerSpecForProviderTransportPubsub {
  /**
   * Optional. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: projects/{PROJECT_ID}/topics/{TOPIC_NAME}. You may set an existing topic for triggers of the type google.cloud.pubsub.topic.v1.messagePublished only. The topic you provide here will not be deleted by Eventarc at trigger deletion.
   *
   * @schema TriggerSpecForProviderTransportPubsub#topic
   */
  readonly topic?: string;

}

/**
 * Converts an object of type 'TriggerSpecForProviderTransportPubsub' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderTransportPubsub(obj: TriggerSpecForProviderTransportPubsub | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'topic': obj.topic,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema TriggerSpecProviderConfigRefPolicyResolution
 */
export enum TriggerSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema TriggerSpecProviderConfigRefPolicyResolve
 */
export enum TriggerSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema TriggerSpecProviderRefPolicyResolution
 */
export enum TriggerSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema TriggerSpecProviderRefPolicyResolve
 */
export enum TriggerSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema TriggerSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface TriggerSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema TriggerSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema TriggerSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'TriggerSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecPublishConnectionDetailsToConfigRefPolicy(obj: TriggerSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Reference to a Service in cloudrun to populate service.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRef
 */
export interface TriggerSpecForProviderDestinationCloudRunServiceServiceRef {
  /**
   * Name of the referenced object.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRef#policy
   */
  readonly policy?: TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationCloudRunServiceServiceRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceRef(obj: TriggerSpecForProviderDestinationCloudRunServiceServiceRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selector for a Service in cloudrun to populate service.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelector
 */
export interface TriggerSpecForProviderDestinationCloudRunServiceServiceSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

  /**
   * Policies for selection.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelector#policy
   */
  readonly policy?: TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationCloudRunServiceServiceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceSelector(obj: TriggerSpecForProviderDestinationCloudRunServiceServiceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchControllerRef': obj.matchControllerRef,
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'policy': toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum TriggerSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy
 */
export interface TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy#resolution
   */
  readonly resolution?: TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy#resolve
   */
  readonly resolve?: TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolve;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy(obj: TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for selection.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy
 */
export interface TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy#resolution
   */
  readonly resolution?: TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy#resolve
   */
  readonly resolve?: TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolve;

}

/**
 * Converts an object of type 'TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy(obj: TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolution
 */
export enum TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolve
 */
export enum TriggerSpecForProviderDestinationCloudRunServiceServiceRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolution
 */
export enum TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolve
 */
export enum TriggerSpecForProviderDestinationCloudRunServiceServiceSelectorPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

