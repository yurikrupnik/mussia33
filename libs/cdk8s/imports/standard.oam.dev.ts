// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * PodSpecWorkload is the Schema for the PodSpec API
 *
 * @schema PodSpecWorkload
 */
export class PodSpecWorkload extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PodSpecWorkload"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'standard.oam.dev/v1alpha1',
    kind: 'PodSpecWorkload',
  }

  /**
   * Renders a Kubernetes manifest for "PodSpecWorkload".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PodSpecWorkloadProps = {}): any {
    return {
      ...PodSpecWorkload.GVK,
      ...toJson_PodSpecWorkloadProps(props),
    };
  }

  /**
   * Defines a "PodSpecWorkload" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PodSpecWorkloadProps = {}) {
    super(scope, id, {
      ...PodSpecWorkload.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PodSpecWorkload.GVK,
      ...toJson_PodSpecWorkloadProps(resolved),
    };
  }
}

/**
 * PodSpecWorkload is the Schema for the PodSpec API
 *
 * @schema PodSpecWorkload
 */
export interface PodSpecWorkloadProps {
  /**
   * @schema PodSpecWorkload#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PodSpecWorkloadSpec defines the desired state of PodSpecWorkload
   *
   * @schema PodSpecWorkload#spec
   */
  readonly spec?: PodSpecWorkloadSpec;

}

/**
 * Converts an object of type 'PodSpecWorkloadProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadProps(obj: PodSpecWorkloadProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PodSpecWorkloadSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodSpecWorkloadSpec defines the desired state of PodSpecWorkload
 *
 * @schema PodSpecWorkloadSpec
 */
export interface PodSpecWorkloadSpec {
  /**
   * PodSpec describes the pods that will be created, we omit the meta part as it will be exactly the same as the PodSpecWorkload
   *
   * @schema PodSpecWorkloadSpec#podSpec
   */
  readonly podSpec: PodSpecWorkloadSpecPodSpec;

  /**
   * Replicas is the desired number of replicas of the given podSpec. These are replicas in the sense that they are instantiations of the same podSpec. If unspecified, defaults to 1.
   *
   * @schema PodSpecWorkloadSpec#replicas
   */
  readonly replicas?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpec(obj: PodSpecWorkloadSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podSpec': toJson_PodSpecWorkloadSpecPodSpec(obj.podSpec),
    'replicas': obj.replicas,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodSpec describes the pods that will be created, we omit the meta part as it will be exactly the same as the PodSpecWorkload
 *
 * @schema PodSpecWorkloadSpecPodSpec
 */
export interface PodSpecWorkloadSpecPodSpec {
  /**
   * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
   *
   * @schema PodSpecWorkloadSpecPodSpec#activeDeadlineSeconds
   */
  readonly activeDeadlineSeconds?: number;

  /**
   * If specified, the pod's scheduling constraints
   *
   * @schema PodSpecWorkloadSpecPodSpec#affinity
   */
  readonly affinity?: PodSpecWorkloadSpecPodSpecAffinity;

  /**
   * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
   *
   * @schema PodSpecWorkloadSpecPodSpec#automountServiceAccountToken
   */
  readonly automountServiceAccountToken?: boolean;

  /**
   * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpec#containers
   */
  readonly containers: PodSpecWorkloadSpecPodSpecContainers[];

  /**
   * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
   *
   * @schema PodSpecWorkloadSpecPodSpec#dnsConfig
   */
  readonly dnsConfig?: PodSpecWorkloadSpecPodSpecDnsConfig;

  /**
   * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
   *
   * @default ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
   * @schema PodSpecWorkloadSpecPodSpec#dnsPolicy
   */
  readonly dnsPolicy?: string;

  /**
   * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
   *
   * @default true.
   * @schema PodSpecWorkloadSpecPodSpec#enableServiceLinks
   */
  readonly enableServiceLinks?: boolean;

  /**
   * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
   *
   * @schema PodSpecWorkloadSpecPodSpec#ephemeralContainers
   */
  readonly ephemeralContainers?: PodSpecWorkloadSpecPodSpecEphemeralContainers[];

  /**
   * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
   *
   * @schema PodSpecWorkloadSpecPodSpec#hostAliases
   */
  readonly hostAliases?: PodSpecWorkloadSpecPodSpecHostAliases[];

  /**
   * Use the host's ipc namespace. Optional: Default to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpec#hostIPC
   */
  readonly hostIpc?: boolean;

  /**
   * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpec#hostNetwork
   */
  readonly hostNetwork?: boolean;

  /**
   * Use the host's pid namespace. Optional: Default to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpec#hostPID
   */
  readonly hostPid?: boolean;

  /**
   * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
   *
   * @schema PodSpecWorkloadSpecPodSpec#hostname
   */
  readonly hostname?: string;

  /**
   * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
   *
   * @schema PodSpecWorkloadSpecPodSpec#imagePullSecrets
   */
  readonly imagePullSecrets?: PodSpecWorkloadSpecPodSpecImagePullSecrets[];

  /**
   * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpec#initContainers
   */
  readonly initContainers?: PodSpecWorkloadSpecPodSpecInitContainers[];

  /**
   * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
   *
   * @schema PodSpecWorkloadSpecPodSpec#nodeName
   */
  readonly nodeName?: string;

  /**
   * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
   *
   * @schema PodSpecWorkloadSpecPodSpec#nodeSelector
   */
  readonly nodeSelector?: { [key: string]: string };

  /**
   * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
   *
   * @schema PodSpecWorkloadSpecPodSpec#overhead
   */
  readonly overhead?: { [key: string]: PodSpecWorkloadSpecPodSpecOverhead };

  /**
   * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
   *
   * @default PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
   * @schema PodSpecWorkloadSpecPodSpec#preemptionPolicy
   */
  readonly preemptionPolicy?: string;

  /**
   * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
   *
   * @schema PodSpecWorkloadSpecPodSpec#priority
   */
  readonly priority?: number;

  /**
   * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
   *
   * @schema PodSpecWorkloadSpecPodSpec#priorityClassName
   */
  readonly priorityClassName?: string;

  /**
   * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
   *
   * @schema PodSpecWorkloadSpecPodSpec#readinessGates
   */
  readonly readinessGates?: PodSpecWorkloadSpecPodSpecReadinessGates[];

  /**
   * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
   *
   * @default Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
   * @schema PodSpecWorkloadSpecPodSpec#restartPolicy
   */
  readonly restartPolicy?: string;

  /**
   * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
   *
   * @schema PodSpecWorkloadSpecPodSpec#runtimeClassName
   */
  readonly runtimeClassName?: string;

  /**
   * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
   *
   * @schema PodSpecWorkloadSpecPodSpec#schedulerName
   */
  readonly schedulerName?: string;

  /**
   * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
   *
   * @default empty.  See type description for default values of each field.
   * @schema PodSpecWorkloadSpecPodSpec#securityContext
   */
  readonly securityContext?: PodSpecWorkloadSpecPodSpecSecurityContext;

  /**
   * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
   *
   * @schema PodSpecWorkloadSpecPodSpec#serviceAccount
   */
  readonly serviceAccount?: string;

  /**
   * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
   *
   * @schema PodSpecWorkloadSpecPodSpec#serviceAccountName
   */
  readonly serviceAccountName?: string;

  /**
   * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpec#setHostnameAsFQDN
   */
  readonly setHostnameAsFqdn?: boolean;

  /**
   * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpec#shareProcessNamespace
   */
  readonly shareProcessNamespace?: boolean;

  /**
   * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
   *
   * @schema PodSpecWorkloadSpecPodSpec#subdomain
   */
  readonly subdomain?: string;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
   *
   * @default 30 seconds.
   * @schema PodSpecWorkloadSpecPodSpec#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * If specified, the pod's tolerations.
   *
   * @schema PodSpecWorkloadSpecPodSpec#tolerations
   */
  readonly tolerations?: PodSpecWorkloadSpecPodSpecTolerations[];

  /**
   * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpec#topologySpreadConstraints
   */
  readonly topologySpreadConstraints?: PodSpecWorkloadSpecPodSpecTopologySpreadConstraints[];

  /**
   * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
   *
   * @schema PodSpecWorkloadSpecPodSpec#volumes
   */
  readonly volumes?: PodSpecWorkloadSpecPodSpecVolumes[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpec(obj: PodSpecWorkloadSpecPodSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'activeDeadlineSeconds': obj.activeDeadlineSeconds,
    'affinity': toJson_PodSpecWorkloadSpecPodSpecAffinity(obj.affinity),
    'automountServiceAccountToken': obj.automountServiceAccountToken,
    'containers': obj.containers?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainers(y)),
    'dnsConfig': toJson_PodSpecWorkloadSpecPodSpecDnsConfig(obj.dnsConfig),
    'dnsPolicy': obj.dnsPolicy,
    'enableServiceLinks': obj.enableServiceLinks,
    'ephemeralContainers': obj.ephemeralContainers?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainers(y)),
    'hostAliases': obj.hostAliases?.map(y => toJson_PodSpecWorkloadSpecPodSpecHostAliases(y)),
    'hostIPC': obj.hostIpc,
    'hostNetwork': obj.hostNetwork,
    'hostPID': obj.hostPid,
    'hostname': obj.hostname,
    'imagePullSecrets': obj.imagePullSecrets?.map(y => toJson_PodSpecWorkloadSpecPodSpecImagePullSecrets(y)),
    'initContainers': obj.initContainers?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainers(y)),
    'nodeName': obj.nodeName,
    'nodeSelector': ((obj.nodeSelector) === undefined) ? undefined : (Object.entries(obj.nodeSelector).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'overhead': ((obj.overhead) === undefined) ? undefined : (Object.entries(obj.overhead).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'preemptionPolicy': obj.preemptionPolicy,
    'priority': obj.priority,
    'priorityClassName': obj.priorityClassName,
    'readinessGates': obj.readinessGates?.map(y => toJson_PodSpecWorkloadSpecPodSpecReadinessGates(y)),
    'restartPolicy': obj.restartPolicy,
    'runtimeClassName': obj.runtimeClassName,
    'schedulerName': obj.schedulerName,
    'securityContext': toJson_PodSpecWorkloadSpecPodSpecSecurityContext(obj.securityContext),
    'serviceAccount': obj.serviceAccount,
    'serviceAccountName': obj.serviceAccountName,
    'setHostnameAsFQDN': obj.setHostnameAsFqdn,
    'shareProcessNamespace': obj.shareProcessNamespace,
    'subdomain': obj.subdomain,
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'tolerations': obj.tolerations?.map(y => toJson_PodSpecWorkloadSpecPodSpecTolerations(y)),
    'topologySpreadConstraints': obj.topologySpreadConstraints?.map(y => toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraints(y)),
    'volumes': obj.volumes?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumes(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If specified, the pod's scheduling constraints
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinity
 */
export interface PodSpecWorkloadSpecPodSpecAffinity {
  /**
   * Describes node affinity scheduling rules for the pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinity#nodeAffinity
   */
  readonly nodeAffinity?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinity;

  /**
   * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinity#podAffinity
   */
  readonly podAffinity?: PodSpecWorkloadSpecPodSpecAffinityPodAffinity;

  /**
   * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinity#podAntiAffinity
   */
  readonly podAntiAffinity?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinity(obj: PodSpecWorkloadSpecPodSpecAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeAffinity': toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinity(obj.nodeAffinity),
    'podAffinity': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinity(obj.podAffinity),
    'podAntiAffinity': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity(obj.podAntiAffinity),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A single application container that you want to run within a pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainers
 */
export interface PodSpecWorkloadSpecPodSpecContainers {
  /**
   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#args
   */
  readonly args?: string[];

  /**
   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#command
   */
  readonly command?: string[];

  /**
   * List of environment variables to set in the container. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#env
   */
  readonly env?: PodSpecWorkloadSpecPodSpecContainersEnv[];

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#envFrom
   */
  readonly envFrom?: PodSpecWorkloadSpecPodSpecContainersEnvFrom[];

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#image
   */
  readonly image?: string;

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @schema PodSpecWorkloadSpecPodSpecContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#lifecycle
   */
  readonly lifecycle?: PodSpecWorkloadSpecPodSpecContainersLifecycle;

  /**
   * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#livenessProbe
   */
  readonly livenessProbe?: PodSpecWorkloadSpecPodSpecContainersLivenessProbe;

  /**
   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#name
   */
  readonly name: string;

  /**
   * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#ports
   */
  readonly ports?: PodSpecWorkloadSpecPodSpecContainersPorts[];

  /**
   * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#readinessProbe
   */
  readonly readinessProbe?: PodSpecWorkloadSpecPodSpecContainersReadinessProbe;

  /**
   * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#resources
   */
  readonly resources?: PodSpecWorkloadSpecPodSpecContainersResources;

  /**
   * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#securityContext
   */
  readonly securityContext?: PodSpecWorkloadSpecPodSpecContainersSecurityContext;

  /**
   * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#startupProbe
   */
  readonly startupProbe?: PodSpecWorkloadSpecPodSpecContainersStartupProbe;

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   *
   * @default false
   * @schema PodSpecWorkloadSpecPodSpecContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   *
   * @default dev/termination-log. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   *
   * @default File. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecContainers#tty
   */
  readonly tty?: boolean;

  /**
   * volumeDevices is the list of block devices to be used by the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#volumeDevices
   */
  readonly volumeDevices?: PodSpecWorkloadSpecPodSpecContainersVolumeDevices[];

  /**
   * Pod volumes to mount into the container's filesystem. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#volumeMounts
   */
  readonly volumeMounts?: PodSpecWorkloadSpecPodSpecContainersVolumeMounts[];

  /**
   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainers(obj: PodSpecWorkloadSpecPodSpecContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_PodSpecWorkloadSpecPodSpecContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersPorts(y)),
    'readinessProbe': toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbe(obj.readinessProbe),
    'resources': toJson_PodSpecWorkloadSpecPodSpecContainersResources(obj.resources),
    'securityContext': toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
 *
 * @schema PodSpecWorkloadSpecPodSpecDnsConfig
 */
export interface PodSpecWorkloadSpecPodSpecDnsConfig {
  /**
   * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
   *
   * @schema PodSpecWorkloadSpecPodSpecDnsConfig#nameservers
   */
  readonly nameservers?: string[];

  /**
   * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
   *
   * @schema PodSpecWorkloadSpecPodSpecDnsConfig#options
   */
  readonly options?: PodSpecWorkloadSpecPodSpecDnsConfigOptions[];

  /**
   * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
   *
   * @schema PodSpecWorkloadSpecPodSpecDnsConfig#searches
   */
  readonly searches?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecDnsConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecDnsConfig(obj: PodSpecWorkloadSpecPodSpecDnsConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nameservers': obj.nameservers?.map(y => y),
    'options': obj.options?.map(y => toJson_PodSpecWorkloadSpecPodSpecDnsConfigOptions(y)),
    'searches': obj.searches?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainers {
  /**
   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#args
   */
  readonly args?: string[];

  /**
   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#command
   */
  readonly command?: string[];

  /**
   * List of environment variables to set in the container. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#env
   */
  readonly env?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnv[];

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#envFrom
   */
  readonly envFrom?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom[];

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#image
   */
  readonly image?: string;

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * Lifecycle is not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#lifecycle
   */
  readonly lifecycle?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle;

  /**
   * Probes are not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#livenessProbe
   */
  readonly livenessProbe?: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe;

  /**
   * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#name
   */
  readonly name: string;

  /**
   * Ports are not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#ports
   */
  readonly ports?: PodSpecWorkloadSpecPodSpecEphemeralContainersPorts[];

  /**
   * Probes are not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#readinessProbe
   */
  readonly readinessProbe?: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe;

  /**
   * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#resources
   */
  readonly resources?: PodSpecWorkloadSpecPodSpecEphemeralContainersResources;

  /**
   * SecurityContext is not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#securityContext
   */
  readonly securityContext?: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext;

  /**
   * Probes are not allowed for ephemeral containers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#startupProbe
   */
  readonly startupProbe?: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe;

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   *
   * @default false
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#targetContainerName
   */
  readonly targetContainerName?: string;

  /**
   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   *
   * @default dev/termination-log. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   *
   * @default File. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#tty
   */
  readonly tty?: boolean;

  /**
   * volumeDevices is the list of block devices to be used by the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#volumeDevices
   */
  readonly volumeDevices?: PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices[];

  /**
   * Pod volumes to mount into the container's filesystem. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#volumeMounts
   */
  readonly volumeMounts?: PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts[];

  /**
   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainers(obj: PodSpecWorkloadSpecPodSpecEphemeralContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersPorts(y)),
    'readinessProbe': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe(obj.readinessProbe),
    'resources': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersResources(obj.resources),
    'securityContext': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'targetContainerName': obj.targetContainerName,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
 *
 * @schema PodSpecWorkloadSpecPodSpecHostAliases
 */
export interface PodSpecWorkloadSpecPodSpecHostAliases {
  /**
   * Hostnames for the above IP address.
   *
   * @schema PodSpecWorkloadSpecPodSpecHostAliases#hostnames
   */
  readonly hostnames?: string[];

  /**
   * IP address of the host file entry.
   *
   * @schema PodSpecWorkloadSpecPodSpecHostAliases#ip
   */
  readonly ip?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecHostAliases' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecHostAliases(obj: PodSpecWorkloadSpecPodSpecHostAliases | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hostnames': obj.hostnames?.map(y => y),
    'ip': obj.ip,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 *
 * @schema PodSpecWorkloadSpecPodSpecImagePullSecrets
 */
export interface PodSpecWorkloadSpecPodSpecImagePullSecrets {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecImagePullSecrets#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecImagePullSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecImagePullSecrets(obj: PodSpecWorkloadSpecPodSpecImagePullSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A single application container that you want to run within a pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainers
 */
export interface PodSpecWorkloadSpecPodSpecInitContainers {
  /**
   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#args
   */
  readonly args?: string[];

  /**
   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#command
   */
  readonly command?: string[];

  /**
   * List of environment variables to set in the container. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#env
   */
  readonly env?: PodSpecWorkloadSpecPodSpecInitContainersEnv[];

  /**
   * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#envFrom
   */
  readonly envFrom?: PodSpecWorkloadSpecPodSpecInitContainersEnvFrom[];

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#image
   */
  readonly image?: string;

  /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   *
   * @default Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#imagePullPolicy
   */
  readonly imagePullPolicy?: string;

  /**
   * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#lifecycle
   */
  readonly lifecycle?: PodSpecWorkloadSpecPodSpecInitContainersLifecycle;

  /**
   * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#livenessProbe
   */
  readonly livenessProbe?: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe;

  /**
   * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#name
   */
  readonly name: string;

  /**
   * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#ports
   */
  readonly ports?: PodSpecWorkloadSpecPodSpecInitContainersPorts[];

  /**
   * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#readinessProbe
   */
  readonly readinessProbe?: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe;

  /**
   * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#resources
   */
  readonly resources?: PodSpecWorkloadSpecPodSpecInitContainersResources;

  /**
   * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#securityContext
   */
  readonly securityContext?: PodSpecWorkloadSpecPodSpecInitContainersSecurityContext;

  /**
   * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#startupProbe
   */
  readonly startupProbe?: PodSpecWorkloadSpecPodSpecInitContainersStartupProbe;

  /**
   * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#stdin
   */
  readonly stdin?: boolean;

  /**
   * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
   *
   * @default false
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#stdinOnce
   */
  readonly stdinOnce?: boolean;

  /**
   * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
   *
   * @default dev/termination-log. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#terminationMessagePath
   */
  readonly terminationMessagePath?: string;

  /**
   * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
   *
   * @default File. Cannot be updated.
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#terminationMessagePolicy
   */
  readonly terminationMessagePolicy?: string;

  /**
   * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#tty
   */
  readonly tty?: boolean;

  /**
   * volumeDevices is the list of block devices to be used by the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#volumeDevices
   */
  readonly volumeDevices?: PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices[];

  /**
   * Pod volumes to mount into the container's filesystem. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#volumeMounts
   */
  readonly volumeMounts?: PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts[];

  /**
   * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainers#workingDir
   */
  readonly workingDir?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainers(obj: PodSpecWorkloadSpecPodSpecInitContainers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'args': obj.args?.map(y => y),
    'command': obj.command?.map(y => y),
    'env': obj.env?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersEnv(y)),
    'envFrom': obj.envFrom?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFrom(y)),
    'image': obj.image,
    'imagePullPolicy': obj.imagePullPolicy,
    'lifecycle': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecycle(obj.lifecycle),
    'livenessProbe': toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe(obj.livenessProbe),
    'name': obj.name,
    'ports': obj.ports?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersPorts(y)),
    'readinessProbe': toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe(obj.readinessProbe),
    'resources': toJson_PodSpecWorkloadSpecPodSpecInitContainersResources(obj.resources),
    'securityContext': toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContext(obj.securityContext),
    'startupProbe': toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbe(obj.startupProbe),
    'stdin': obj.stdin,
    'stdinOnce': obj.stdinOnce,
    'terminationMessagePath': obj.terminationMessagePath,
    'terminationMessagePolicy': obj.terminationMessagePolicy,
    'tty': obj.tty,
    'volumeDevices': obj.volumeDevices?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices(y)),
    'volumeMounts': obj.volumeMounts?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts(y)),
    'workingDir': obj.workingDir,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PodSpecWorkloadSpecPodSpecOverhead
 */
export class PodSpecWorkloadSpecPodSpecOverhead {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecOverhead {
    return new PodSpecWorkloadSpecPodSpecOverhead(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecOverhead {
    return new PodSpecWorkloadSpecPodSpecOverhead(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * PodReadinessGate contains the reference to a pod condition
 *
 * @schema PodSpecWorkloadSpecPodSpecReadinessGates
 */
export interface PodSpecWorkloadSpecPodSpecReadinessGates {
  /**
   * ConditionType refers to a condition in the pod's condition list with matching type.
   *
   * @schema PodSpecWorkloadSpecPodSpecReadinessGates#conditionType
   */
  readonly conditionType: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecReadinessGates' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecReadinessGates(obj: PodSpecWorkloadSpecPodSpecReadinessGates | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'conditionType': obj.conditionType,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
 *
 * @default empty.  See type description for default values of each field.
 * @schema PodSpecWorkloadSpecPodSpecSecurityContext
 */
export interface PodSpecWorkloadSpecPodSpecSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#sysctls
   */
  readonly sysctls?: PodSpecWorkloadSpecPodSpecSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecSecurityContext(obj: PodSpecWorkloadSpecPodSpecSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsGroup': obj.fsGroup,
    'fsGroupChangePolicy': obj.fsGroupChangePolicy,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile(obj.seccompProfile),
    'supplementalGroups': obj.supplementalGroups?.map(y => y),
    'sysctls': obj.sysctls?.map(y => toJson_PodSpecWorkloadSpecPodSpecSecurityContextSysctls(y)),
    'windowsOptions': toJson_PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
 *
 * @schema PodSpecWorkloadSpecPodSpecTolerations
 */
export interface PodSpecWorkloadSpecPodSpecTolerations {
  /**
   * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema PodSpecWorkloadSpecPodSpecTolerations#effect
   */
  readonly effect?: string;

  /**
   * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
   *
   * @schema PodSpecWorkloadSpecPodSpecTolerations#key
   */
  readonly key?: string;

  /**
   * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   *
   * @default Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
   * @schema PodSpecWorkloadSpecPodSpecTolerations#operator
   */
  readonly operator?: string;

  /**
   * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
   *
   * @schema PodSpecWorkloadSpecPodSpecTolerations#tolerationSeconds
   */
  readonly tolerationSeconds?: number;

  /**
   * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
   *
   * @schema PodSpecWorkloadSpecPodSpecTolerations#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecTolerations' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecTolerations(obj: PodSpecWorkloadSpecPodSpecTolerations | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'operator': obj.operator,
    'tolerationSeconds': obj.tolerationSeconds,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
 *
 * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraints
 */
export interface PodSpecWorkloadSpecPodSpecTopologySpreadConstraints {
  /**
   * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraints#labelSelector
   */
  readonly labelSelector?: PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector;

  /**
   * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraints#maxSkew
   */
  readonly maxSkew: number;

  /**
   * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraints#topologyKey
   */
  readonly topologyKey: string;

  /**
   * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraints#whenUnsatisfiable
   */
  readonly whenUnsatisfiable: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecTopologySpreadConstraints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraints(obj: PodSpecWorkloadSpecPodSpecTopologySpreadConstraints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector(obj.labelSelector),
    'maxSkew': obj.maxSkew,
    'topologyKey': obj.topologyKey,
    'whenUnsatisfiable': obj.whenUnsatisfiable,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumes
 */
export interface PodSpecWorkloadSpecPodSpecVolumes {
  /**
   * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#awsElasticBlockStore
   */
  readonly awsElasticBlockStore?: PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore;

  /**
   * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#azureDisk
   */
  readonly azureDisk?: PodSpecWorkloadSpecPodSpecVolumesAzureDisk;

  /**
   * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#azureFile
   */
  readonly azureFile?: PodSpecWorkloadSpecPodSpecVolumesAzureFile;

  /**
   * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#cephfs
   */
  readonly cephfs?: PodSpecWorkloadSpecPodSpecVolumesCephfs;

  /**
   * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#cinder
   */
  readonly cinder?: PodSpecWorkloadSpecPodSpecVolumesCinder;

  /**
   * ConfigMap represents a configMap that should populate this volume
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#configMap
   */
  readonly configMap?: PodSpecWorkloadSpecPodSpecVolumesConfigMap;

  /**
   * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#csi
   */
  readonly csi?: PodSpecWorkloadSpecPodSpecVolumesCsi;

  /**
   * DownwardAPI represents downward API about the pod that should populate this volume
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#downwardAPI
   */
  readonly downwardApi?: PodSpecWorkloadSpecPodSpecVolumesDownwardApi;

  /**
   * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#emptyDir
   */
  readonly emptyDir?: PodSpecWorkloadSpecPodSpecVolumesEmptyDir;

  /**
   * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
   * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
   * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
   * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
   * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
   * This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#ephemeral
   */
  readonly ephemeral?: PodSpecWorkloadSpecPodSpecVolumesEphemeral;

  /**
   * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#fc
   */
  readonly fc?: PodSpecWorkloadSpecPodSpecVolumesFc;

  /**
   * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#flexVolume
   */
  readonly flexVolume?: PodSpecWorkloadSpecPodSpecVolumesFlexVolume;

  /**
   * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#flocker
   */
  readonly flocker?: PodSpecWorkloadSpecPodSpecVolumesFlocker;

  /**
   * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#gcePersistentDisk
   */
  readonly gcePersistentDisk?: PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk;

  /**
   * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#gitRepo
   */
  readonly gitRepo?: PodSpecWorkloadSpecPodSpecVolumesGitRepo;

  /**
   * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#glusterfs
   */
  readonly glusterfs?: PodSpecWorkloadSpecPodSpecVolumesGlusterfs;

  /**
   * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#hostPath
   */
  readonly hostPath?: PodSpecWorkloadSpecPodSpecVolumesHostPath;

  /**
   * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#iscsi
   */
  readonly iscsi?: PodSpecWorkloadSpecPodSpecVolumesIscsi;

  /**
   * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#name
   */
  readonly name: string;

  /**
   * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#nfs
   */
  readonly nfs?: PodSpecWorkloadSpecPodSpecVolumesNfs;

  /**
   * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#persistentVolumeClaim
   */
  readonly persistentVolumeClaim?: PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim;

  /**
   * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#photonPersistentDisk
   */
  readonly photonPersistentDisk?: PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk;

  /**
   * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#portworxVolume
   */
  readonly portworxVolume?: PodSpecWorkloadSpecPodSpecVolumesPortworxVolume;

  /**
   * Items for all in one resources secrets, configmaps, and downward API
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#projected
   */
  readonly projected?: PodSpecWorkloadSpecPodSpecVolumesProjected;

  /**
   * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#quobyte
   */
  readonly quobyte?: PodSpecWorkloadSpecPodSpecVolumesQuobyte;

  /**
   * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#rbd
   */
  readonly rbd?: PodSpecWorkloadSpecPodSpecVolumesRbd;

  /**
   * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#scaleIO
   */
  readonly scaleIo?: PodSpecWorkloadSpecPodSpecVolumesScaleIo;

  /**
   * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#secret
   */
  readonly secret?: PodSpecWorkloadSpecPodSpecVolumesSecret;

  /**
   * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#storageos
   */
  readonly storageos?: PodSpecWorkloadSpecPodSpecVolumesStorageos;

  /**
   * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumes#vsphereVolume
   */
  readonly vsphereVolume?: PodSpecWorkloadSpecPodSpecVolumesVsphereVolume;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumes(obj: PodSpecWorkloadSpecPodSpecVolumes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'awsElasticBlockStore': toJson_PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore(obj.awsElasticBlockStore),
    'azureDisk': toJson_PodSpecWorkloadSpecPodSpecVolumesAzureDisk(obj.azureDisk),
    'azureFile': toJson_PodSpecWorkloadSpecPodSpecVolumesAzureFile(obj.azureFile),
    'cephfs': toJson_PodSpecWorkloadSpecPodSpecVolumesCephfs(obj.cephfs),
    'cinder': toJson_PodSpecWorkloadSpecPodSpecVolumesCinder(obj.cinder),
    'configMap': toJson_PodSpecWorkloadSpecPodSpecVolumesConfigMap(obj.configMap),
    'csi': toJson_PodSpecWorkloadSpecPodSpecVolumesCsi(obj.csi),
    'downwardAPI': toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApi(obj.downwardApi),
    'emptyDir': toJson_PodSpecWorkloadSpecPodSpecVolumesEmptyDir(obj.emptyDir),
    'ephemeral': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeral(obj.ephemeral),
    'fc': toJson_PodSpecWorkloadSpecPodSpecVolumesFc(obj.fc),
    'flexVolume': toJson_PodSpecWorkloadSpecPodSpecVolumesFlexVolume(obj.flexVolume),
    'flocker': toJson_PodSpecWorkloadSpecPodSpecVolumesFlocker(obj.flocker),
    'gcePersistentDisk': toJson_PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk(obj.gcePersistentDisk),
    'gitRepo': toJson_PodSpecWorkloadSpecPodSpecVolumesGitRepo(obj.gitRepo),
    'glusterfs': toJson_PodSpecWorkloadSpecPodSpecVolumesGlusterfs(obj.glusterfs),
    'hostPath': toJson_PodSpecWorkloadSpecPodSpecVolumesHostPath(obj.hostPath),
    'iscsi': toJson_PodSpecWorkloadSpecPodSpecVolumesIscsi(obj.iscsi),
    'name': obj.name,
    'nfs': toJson_PodSpecWorkloadSpecPodSpecVolumesNfs(obj.nfs),
    'persistentVolumeClaim': toJson_PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim(obj.persistentVolumeClaim),
    'photonPersistentDisk': toJson_PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk(obj.photonPersistentDisk),
    'portworxVolume': toJson_PodSpecWorkloadSpecPodSpecVolumesPortworxVolume(obj.portworxVolume),
    'projected': toJson_PodSpecWorkloadSpecPodSpecVolumesProjected(obj.projected),
    'quobyte': toJson_PodSpecWorkloadSpecPodSpecVolumesQuobyte(obj.quobyte),
    'rbd': toJson_PodSpecWorkloadSpecPodSpecVolumesRbd(obj.rbd),
    'scaleIO': toJson_PodSpecWorkloadSpecPodSpecVolumesScaleIo(obj.scaleIo),
    'secret': toJson_PodSpecWorkloadSpecPodSpecVolumesSecret(obj.secret),
    'storageos': toJson_PodSpecWorkloadSpecPodSpecVolumesStorageos(obj.storageos),
    'vsphereVolume': toJson_PodSpecWorkloadSpecPodSpecVolumesVsphereVolume(obj.vsphereVolume),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes node affinity scheduling rules for the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinity
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinity(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj.requiredDuringSchedulingIgnoredDuringExecution),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinity
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinity(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity {
  /**
   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity#preferredDuringSchedulingIgnoredDuringExecution
   */
  readonly preferredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];

  /**
   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity#requiredDuringSchedulingIgnoredDuringExecution
   */
  readonly requiredDuringSchedulingIgnoredDuringExecution?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinity | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preferredDuringSchedulingIgnoredDuringExecution': obj.preferredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(y)),
    'requiredDuringSchedulingIgnoredDuringExecution': obj.requiredDuringSchedulingIgnoredDuringExecution?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnv
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnv {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   *
   * @default .
   * @schema PodSpecWorkloadSpecPodSpecContainersEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnv#valueFrom
   */
  readonly valueFrom?: PodSpecWorkloadSpecPodSpecContainersEnvValueFrom;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnv(obj: PodSpecWorkloadSpecPodSpecContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvFromSource represents the source of a set of ConfigMaps
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvFrom
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvFrom {
  /**
   * The ConfigMap to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef;

  /**
   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * The Secret to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFrom#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvFrom(obj: PodSpecWorkloadSpecPodSpecContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecycle
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecycle {
  /**
   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecycle#postStart
   */
  readonly postStart?: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart;

  /**
   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecycle#preStop
   */
  readonly preStop?: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecycle(obj: PodSpecWorkloadSpecPodSpecContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe
 */
export interface PodSpecWorkloadSpecPodSpecContainersLivenessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbe(obj: PodSpecWorkloadSpecPodSpecContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ContainerPort represents a network port in a single container.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersPorts
 */
export interface PodSpecWorkloadSpecPodSpecContainersPorts {
  /**
   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * What host IP to bind the external port to.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersPorts#name
   */
  readonly name?: string;

  /**
   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
   *
   * @default TCP".
   * @schema PodSpecWorkloadSpecPodSpecContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersPorts(obj: PodSpecWorkloadSpecPodSpecContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe
 */
export interface PodSpecWorkloadSpecPodSpecContainersReadinessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbe(obj: PodSpecWorkloadSpecPodSpecContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersResources
 */
export interface PodSpecWorkloadSpecPodSpecContainersResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersResources#limits
   */
  readonly limits?: { [key: string]: PodSpecWorkloadSpecPodSpecContainersResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersResources#requests
   */
  readonly requests?: { [key: string]: PodSpecWorkloadSpecPodSpecContainersResourcesRequests };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersResources(obj: PodSpecWorkloadSpecPodSpecContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext
 */
export interface PodSpecWorkloadSpecPodSpecContainersSecurityContext {
  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
   *
   * @default the default set of capabilities granted by the container runtime.
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#capabilities
   */
  readonly capabilities?: PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities;

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * Whether this container has a read-only root filesystem. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile;

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContext(obj: PodSpecWorkloadSpecPodSpecContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'capabilities': toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe
 */
export interface PodSpecWorkloadSpecPodSpecContainersStartupProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecContainersStartupProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbe(obj: PodSpecWorkloadSpecPodSpecContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * volumeDevice describes a mapping of a raw block device within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersVolumeDevices
 */
export interface PodSpecWorkloadSpecPodSpecContainersVolumeDevices {
  /**
   * devicePath is the path inside of the container that the device will be mapped to.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * name must match the name of a persistentVolumeClaim in the pod
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersVolumeDevices(obj: PodSpecWorkloadSpecPodSpecContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts
 */
export interface PodSpecWorkloadSpecPodSpecContainersVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PodSpecWorkloadSpecPodSpecContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersVolumeMounts(obj: PodSpecWorkloadSpecPodSpecContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PodDNSConfigOption defines DNS resolver options of a pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecDnsConfigOptions
 */
export interface PodSpecWorkloadSpecPodSpecDnsConfigOptions {
  /**
   * Required.
   *
   * @schema PodSpecWorkloadSpecPodSpecDnsConfigOptions#name
   */
  readonly name?: string;

  /**
   * @schema PodSpecWorkloadSpecPodSpecDnsConfigOptions#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecDnsConfigOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecDnsConfigOptions(obj: PodSpecWorkloadSpecPodSpecDnsConfigOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnv
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnv {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   *
   * @default .
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnv#valueFrom
   */
  readonly valueFrom?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnv(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvFromSource represents the source of a set of ConfigMaps
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom {
  /**
   * The ConfigMap to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef;

  /**
   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * The Secret to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Lifecycle is not allowed for ephemeral containers.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle {
  /**
   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle#postStart
   */
  readonly postStart?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart;

  /**
   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle#preStop
   */
  readonly preStop?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Probes are not allowed for ephemeral containers.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ContainerPort represents a network port in a single container.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersPorts {
  /**
   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * What host IP to bind the external port to.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts#name
   */
  readonly name?: string;

  /**
   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
   *
   * @default TCP".
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersPorts(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Probes are not allowed for ephemeral containers.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersResources
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersResources#limits
   */
  readonly limits?: { [key: string]: PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersResources#requests
   */
  readonly requests?: { [key: string]: PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersResources(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecurityContext is not allowed for ephemeral containers.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext {
  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
   *
   * @default the default set of capabilities granted by the container runtime.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#capabilities
   */
  readonly capabilities?: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities;

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * Whether this container has a read-only root filesystem. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile;

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'capabilities': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Probes are not allowed for ephemeral containers.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * volumeDevice describes a mapping of a raw block device within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices {
  /**
   * devicePath is the path inside of the container that the device will be mapped to.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * name must match the name of a persistentVolumeClaim in the pod
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnv
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnv {
  /**
   * Name of the environment variable. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnv#name
   */
  readonly name: string;

  /**
   * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
   *
   * @default .
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnv#value
   */
  readonly value?: string;

  /**
   * Source for the environment variable's value. Cannot be used if value is not empty.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnv#valueFrom
   */
  readonly valueFrom?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnv(obj: PodSpecWorkloadSpecPodSpecInitContainersEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
    'valueFrom': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom(obj.valueFrom),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvFromSource represents the source of a set of ConfigMaps
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFrom
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvFrom {
  /**
   * The ConfigMap to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFrom#configMapRef
   */
  readonly configMapRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef;

  /**
   * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFrom#prefix
   */
  readonly prefix?: string;

  /**
   * The Secret to select from
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFrom#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFrom(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef(obj.configMapRef),
    'prefix': obj.prefix,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecycle
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecycle {
  /**
   * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecycle#postStart
   */
  readonly postStart?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart;

  /**
   * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecycle#preStop
   */
  readonly preStop?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecycle' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecycle(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecycle | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'postStart': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart(obj.postStart),
    'preStop': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop(obj.preStop),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe(obj: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ContainerPort represents a network port in a single container.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersPorts {
  /**
   * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts#containerPort
   */
  readonly containerPort: number;

  /**
   * What host IP to bind the external port to.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts#hostIP
   */
  readonly hostIp?: string;

  /**
   * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts#hostPort
   */
  readonly hostPort?: number;

  /**
   * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts#name
   */
  readonly name?: string;

  /**
   * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
   *
   * @default TCP".
   * @schema PodSpecWorkloadSpecPodSpecInitContainersPorts#protocol
   */
  readonly protocol?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersPorts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersPorts(obj: PodSpecWorkloadSpecPodSpecInitContainersPorts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerPort': obj.containerPort,
    'hostIP': obj.hostIp,
    'hostPort': obj.hostPort,
    'name': obj.name,
    'protocol': obj.protocol,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe(obj: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersResources
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersResources#limits
   */
  readonly limits?: { [key: string]: PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersResources#requests
   */
  readonly requests?: { [key: string]: PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersResources(obj: PodSpecWorkloadSpecPodSpecInitContainersResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersSecurityContext {
  /**
   * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#allowPrivilegeEscalation
   */
  readonly allowPrivilegeEscalation?: boolean;

  /**
   * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
   *
   * @default the default set of capabilities granted by the container runtime.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#capabilities
   */
  readonly capabilities?: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities;

  /**
   * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#privileged
   */
  readonly privileged?: boolean;

  /**
   * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#procMount
   */
  readonly procMount?: string;

  /**
   * Whether this container has a read-only root filesystem. Default is false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#readOnlyRootFilesystem
   */
  readonly readOnlyRootFilesystem?: boolean;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#seccompProfile
   */
  readonly seccompProfile?: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile;

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContext#windowsOptions
   */
  readonly windowsOptions?: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContext(obj: PodSpecWorkloadSpecPodSpecInitContainersSecurityContext | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowPrivilegeEscalation': obj.allowPrivilegeEscalation,
    'capabilities': toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities(obj.capabilities),
    'privileged': obj.privileged,
    'procMount': obj.procMount,
    'readOnlyRootFilesystem': obj.readOnlyRootFilesystem,
    'runAsGroup': obj.runAsGroup,
    'runAsNonRoot': obj.runAsNonRoot,
    'runAsUser': obj.runAsUser,
    'seLinuxOptions': toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions(obj.seLinuxOptions),
    'seccompProfile': toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile(obj.seccompProfile),
    'windowsOptions': toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions(obj.windowsOptions),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersStartupProbe {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec;

  /**
   * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @default 3. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet;

  /**
   * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
   *
   * @default 10 seconds. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
   *
   * @default 1. Must be 1 for liveness and startup. Minimum value is 1.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket;

  /**
   * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#terminationGracePeriodSeconds
   */
  readonly terminationGracePeriodSeconds?: number;

  /**
   * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   *
   * @default 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersStartupProbe' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbe(obj: PodSpecWorkloadSpecPodSpecInitContainersStartupProbe | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec(obj.exec),
    'failureThreshold': obj.failureThreshold,
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet(obj.httpGet),
    'initialDelaySeconds': obj.initialDelaySeconds,
    'periodSeconds': obj.periodSeconds,
    'successThreshold': obj.successThreshold,
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket(obj.tcpSocket),
    'terminationGracePeriodSeconds': obj.terminationGracePeriodSeconds,
    'timeoutSeconds': obj.timeoutSeconds,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * volumeDevice describes a mapping of a raw block device within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices {
  /**
   * devicePath is the path inside of the container that the device will be mapped to.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices#devicePath
   */
  readonly devicePath: string;

  /**
   * name must match the name of a persistentVolumeClaim in the pod
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices(obj: PodSpecWorkloadSpecPodSpecInitContainersVolumeDevices | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'devicePath': obj.devicePath,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts {
  /**
   * Path within the container at which the volume should be mounted.  Must not contain ':'.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#mountPath
   */
  readonly mountPath: string;

  /**
   * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#mountPropagation
   */
  readonly mountPropagation?: string;

  /**
   * This must match the Name of a Volume.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#name
   */
  readonly name: string;

  /**
   * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
   *
   * @default volume's root).
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#subPath
   */
  readonly subPath?: string;

  /**
   * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
   *
   * @default volume's root). SubPathExpr and SubPath are mutually exclusive.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts#subPathExpr
   */
  readonly subPathExpr?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts(obj: PodSpecWorkloadSpecPodSpecInitContainersVolumeMounts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mountPath': obj.mountPath,
    'mountPropagation': obj.mountPropagation,
    'name': obj.name,
    'readOnly': obj.readOnly,
    'subPath': obj.subPath,
    'subPathExpr': obj.subPathExpr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
 *
 * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions
 */
export interface PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions(obj: PodSpecWorkloadSpecPodSpecSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile
 */
export interface PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile(obj: PodSpecWorkloadSpecPodSpecSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema PodSpecWorkloadSpecPodSpecSecurityContextSysctls
 */
export interface PodSpecWorkloadSpecPodSpecSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextSysctls#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecSecurityContextSysctls(obj: PodSpecWorkloadSpecPodSpecSecurityContextSysctls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions
 */
export interface PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions(obj: PodSpecWorkloadSpecPodSpecSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
 *
 * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector
 */
export interface PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector(obj: PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore
 */
export interface PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore#fsType
   */
  readonly fsType?: string;

  /**
   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore#partition
   */
  readonly partition?: number;

  /**
   * Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore(obj: PodSpecWorkloadSpecPodSpecVolumesAwsElasticBlockStore | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'partition': obj.partition,
    'readOnly': obj.readOnly,
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk
 */
export interface PodSpecWorkloadSpecPodSpecVolumesAzureDisk {
  /**
   * Host Caching mode: None, Read Only, Read Write.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#cachingMode
   */
  readonly cachingMode?: string;

  /**
   * The Name of the data disk in the blob storage
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#diskName
   */
  readonly diskName: string;

  /**
   * The URI the data disk in the blob storage
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#diskURI
   */
  readonly diskUri: string;

  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#fsType
   */
  readonly fsType?: string;

  /**
   * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#kind
   */
  readonly kind?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesAzureDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesAzureDisk(obj: PodSpecWorkloadSpecPodSpecVolumesAzureDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'cachingMode': obj.cachingMode,
    'diskName': obj.diskName,
    'diskURI': obj.diskUri,
    'fsType': obj.fsType,
    'kind': obj.kind,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesAzureFile
 */
export interface PodSpecWorkloadSpecPodSpecVolumesAzureFile {
  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureFile#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * the name of secret that contains Azure Storage Account Name and Key
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureFile#secretName
   */
  readonly secretName: string;

  /**
   * Share Name
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesAzureFile#shareName
   */
  readonly shareName: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesAzureFile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesAzureFile(obj: PodSpecWorkloadSpecPodSpecVolumesAzureFile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'readOnly': obj.readOnly,
    'secretName': obj.secretName,
    'shareName': obj.shareName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCephfs {
  /**
   * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#monitors
   */
  readonly monitors: string[];

  /**
   * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#path
   */
  readonly path?: string;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#secretFile
   */
  readonly secretFile?: string;

  /**
   * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef;

  /**
   * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfs#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCephfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCephfs(obj: PodSpecWorkloadSpecPodSpecVolumesCephfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'monitors': obj.monitors?.map(y => y),
    'path': obj.path,
    'readOnly': obj.readOnly,
    'secretFile': obj.secretFile,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef(obj.secretRef),
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCinder
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCinder {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCinder#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   * @schema PodSpecWorkloadSpecPodSpecVolumesCinder#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: points to a secret object containing parameters used to connect to OpenStack.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCinder#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef;

  /**
   * volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCinder#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCinder' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCinder(obj: PodSpecWorkloadSpecPodSpecVolumesCinder | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef(obj.secretRef),
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigMap represents a configMap that should populate this volume
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMap
 */
export interface PodSpecWorkloadSpecPodSpecVolumesConfigMap {
  /**
   * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMap#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMap#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesConfigMapItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its keys must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesConfigMap(obj: PodSpecWorkloadSpecPodSpecVolumesConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesConfigMapItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCsi
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCsi {
  /**
   * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsi#driver
   */
  readonly driver: string;

  /**
   * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsi#fsType
   */
  readonly fsType?: string;

  /**
   * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsi#nodePublishSecretRef
   */
  readonly nodePublishSecretRef?: PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef;

  /**
   * Specifies a read-only configuration for the volume. Defaults to false (read/write).
   *
   * @default false (read/write).
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsi#volumeAttributes
   */
  readonly volumeAttributes?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCsi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCsi(obj: PodSpecWorkloadSpecPodSpecVolumesCsi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'driver': obj.driver,
    'fsType': obj.fsType,
    'nodePublishSecretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef(obj.nodePublishSecretRef),
    'readOnly': obj.readOnly,
    'volumeAttributes': ((obj.volumeAttributes) === undefined) ? undefined : (Object.entries(obj.volumeAttributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DownwardAPI represents downward API about the pod that should populate this volume
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApi
 */
export interface PodSpecWorkloadSpecPodSpecVolumesDownwardApi {
  /**
   * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApi#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * Items is a list of downward API volume file
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApi#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesDownwardApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApi(obj: PodSpecWorkloadSpecPodSpecVolumesDownwardApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEmptyDir
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEmptyDir {
  /**
   * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEmptyDir#medium
   */
  readonly medium?: string;

  /**
   * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEmptyDir#sizeLimit
   */
  readonly sizeLimit?: PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEmptyDir' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEmptyDir(obj: PodSpecWorkloadSpecPodSpecVolumesEmptyDir | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'medium': obj.medium,
    'sizeLimit': obj.sizeLimit?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
 * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
 * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
 * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
 * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
 * This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeral
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeral {
  /**
   * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
   * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
   * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
   * Required, must not be nil.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeral#volumeClaimTemplate
   */
  readonly volumeClaimTemplate?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeral' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeral(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeral | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'volumeClaimTemplate': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate(obj.volumeClaimTemplate),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesFc
 */
export interface PodSpecWorkloadSpecPodSpecVolumesFc {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFc#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: FC target lun number
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFc#lun
   */
  readonly lun?: number;

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesFc#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: FC target worldwide names (WWNs)
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFc#targetWWNs
   */
  readonly targetWwNs?: string[];

  /**
   * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFc#wwids
   */
  readonly wwids?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesFc' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesFc(obj: PodSpecWorkloadSpecPodSpecVolumesFc | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'lun': obj.lun,
    'readOnly': obj.readOnly,
    'targetWWNs': obj.targetWwNs?.map(y => y),
    'wwids': obj.wwids?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume
 */
export interface PodSpecWorkloadSpecPodSpecVolumesFlexVolume {
  /**
   * Driver is the name of the driver to use for this volume.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume#driver
   */
  readonly driver: string;

  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Optional: Extra command options if any.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume#options
   */
  readonly options?: { [key: string]: string };

  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolume#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesFlexVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesFlexVolume(obj: PodSpecWorkloadSpecPodSpecVolumesFlexVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'driver': obj.driver,
    'fsType': obj.fsType,
    'options': ((obj.options) === undefined) ? undefined : (Object.entries(obj.options).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef(obj.secretRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesFlocker
 */
export interface PodSpecWorkloadSpecPodSpecVolumesFlocker {
  /**
   * Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlocker#datasetName
   */
  readonly datasetName?: string;

  /**
   * UUID of the dataset. This is unique identifier of a Flocker dataset
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlocker#datasetUUID
   */
  readonly datasetUuid?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesFlocker' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesFlocker(obj: PodSpecWorkloadSpecPodSpecVolumesFlocker | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'datasetName': obj.datasetName,
    'datasetUUID': obj.datasetUuid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk
 */
export interface PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk#partition
   */
  readonly partition?: number;

  /**
   * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk#pdName
   */
  readonly pdName: string;

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   *
   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
   * @schema PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk(obj: PodSpecWorkloadSpecPodSpecVolumesGcePersistentDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'partition': obj.partition,
    'pdName': obj.pdName,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesGitRepo
 */
export interface PodSpecWorkloadSpecPodSpecVolumesGitRepo {
  /**
   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGitRepo#directory
   */
  readonly directory?: string;

  /**
   * Repository URL
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGitRepo#repository
   */
  readonly repository: string;

  /**
   * Commit hash for the specified revision.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGitRepo#revision
   */
  readonly revision?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesGitRepo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesGitRepo(obj: PodSpecWorkloadSpecPodSpecVolumesGitRepo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'directory': obj.directory,
    'repository': obj.repository,
    'revision': obj.revision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesGlusterfs
 */
export interface PodSpecWorkloadSpecPodSpecVolumesGlusterfs {
  /**
   * EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGlusterfs#endpoints
   */
  readonly endpoints: string;

  /**
   * Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesGlusterfs#path
   */
  readonly path: string;

  /**
   * ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   *
   * @default false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
   * @schema PodSpecWorkloadSpecPodSpecVolumesGlusterfs#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesGlusterfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesGlusterfs(obj: PodSpecWorkloadSpecPodSpecVolumesGlusterfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'endpoints': obj.endpoints,
    'path': obj.path,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesHostPath
 */
export interface PodSpecWorkloadSpecPodSpecVolumesHostPath {
  /**
   * Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesHostPath#path
   */
  readonly path: string;

  /**
   * Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   *
   * @default More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
   * @schema PodSpecWorkloadSpecPodSpecVolumesHostPath#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesHostPath' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesHostPath(obj: PodSpecWorkloadSpecPodSpecVolumesHostPath | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi
 */
export interface PodSpecWorkloadSpecPodSpecVolumesIscsi {
  /**
   * whether support iSCSI Discovery CHAP authentication
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#chapAuthDiscovery
   */
  readonly chapAuthDiscovery?: boolean;

  /**
   * whether support iSCSI Session CHAP authentication
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#chapAuthSession
   */
  readonly chapAuthSession?: boolean;

  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#fsType
   */
  readonly fsType?: string;

  /**
   * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#initiatorName
   */
  readonly initiatorName?: string;

  /**
   * Target iSCSI Qualified Name.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#iqn
   */
  readonly iqn: string;

  /**
   * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
   *
   * @default default' (tcp).
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#iscsiInterface
   */
  readonly iscsiInterface?: string;

  /**
   * iSCSI Target Lun number.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#lun
   */
  readonly lun: number;

  /**
   * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#portals
   */
  readonly portals?: string[];

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * CHAP Secret for iSCSI target and initiator authentication
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef;

  /**
   * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsi#targetPortal
   */
  readonly targetPortal: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesIscsi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesIscsi(obj: PodSpecWorkloadSpecPodSpecVolumesIscsi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chapAuthDiscovery': obj.chapAuthDiscovery,
    'chapAuthSession': obj.chapAuthSession,
    'fsType': obj.fsType,
    'initiatorName': obj.initiatorName,
    'iqn': obj.iqn,
    'iscsiInterface': obj.iscsiInterface,
    'lun': obj.lun,
    'portals': obj.portals?.map(y => y),
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef(obj.secretRef),
    'targetPortal': obj.targetPortal,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesNfs
 */
export interface PodSpecWorkloadSpecPodSpecVolumesNfs {
  /**
   * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesNfs#path
   */
  readonly path: string;

  /**
   * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @default false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   * @schema PodSpecWorkloadSpecPodSpecVolumesNfs#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesNfs#server
   */
  readonly server: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesNfs' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesNfs(obj: PodSpecWorkloadSpecPodSpecVolumesNfs | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'path': obj.path,
    'readOnly': obj.readOnly,
    'server': obj.server,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim
 */
export interface PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim {
  /**
   * ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim#claimName
   */
  readonly claimName: string;

  /**
   * Will force the ReadOnly setting in VolumeMounts. Default false.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim#readOnly
   */
  readonly readOnly?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim(obj: PodSpecWorkloadSpecPodSpecVolumesPersistentVolumeClaim | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claimName': obj.claimName,
    'readOnly': obj.readOnly,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk
 */
export interface PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk#fsType
   */
  readonly fsType?: string;

  /**
   * ID that identifies Photon Controller persistent disk
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk#pdID
   */
  readonly pdId: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk(obj: PodSpecWorkloadSpecPodSpecVolumesPhotonPersistentDisk | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'pdID': obj.pdId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesPortworxVolume
 */
export interface PodSpecWorkloadSpecPodSpecVolumesPortworxVolume {
  /**
   * FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPortworxVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesPortworxVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * VolumeID uniquely identifies a Portworx volume
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesPortworxVolume#volumeID
   */
  readonly volumeId: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesPortworxVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesPortworxVolume(obj: PodSpecWorkloadSpecPodSpecVolumesPortworxVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'volumeID': obj.volumeId,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Items for all in one resources secrets, configmaps, and downward API
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjected
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjected {
  /**
   * Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjected#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * list of volume projections
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjected#sources
   */
  readonly sources?: PodSpecWorkloadSpecPodSpecVolumesProjectedSources[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjected' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjected(obj: PodSpecWorkloadSpecPodSpecVolumesProjected | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'sources': obj.sources?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSources(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte
 */
export interface PodSpecWorkloadSpecPodSpecVolumesQuobyte {
  /**
   * Group to map volume access to Default is no group
   *
   * @default no group
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#group
   */
  readonly group?: string;

  /**
   * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
   *
   * @default false.
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#registry
   */
  readonly registry: string;

  /**
   * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#tenant
   */
  readonly tenant?: string;

  /**
   * User to map volume access to Defaults to serivceaccount user
   *
   * @default serivceaccount user
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#user
   */
  readonly user?: string;

  /**
   * Volume is a string that references an already created Quobyte volume by name.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesQuobyte#volume
   */
  readonly volume: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesQuobyte' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesQuobyte(obj: PodSpecWorkloadSpecPodSpecVolumesQuobyte | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'readOnly': obj.readOnly,
    'registry': obj.registry,
    'tenant': obj.tenant,
    'user': obj.user,
    'volume': obj.volume,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesRbd
 */
export interface PodSpecWorkloadSpecPodSpecVolumesRbd {
  /**
   * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#fsType
   */
  readonly fsType?: string;

  /**
   * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#image
   */
  readonly image: string;

  /**
   * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#keyring
   */
  readonly keyring?: string;

  /**
   * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#monitors
   */
  readonly monitors: string[];

  /**
   * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#pool
   */
  readonly pool?: string;

  /**
   * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef;

  /**
   * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   *
   * @default admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbd#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesRbd' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesRbd(obj: PodSpecWorkloadSpecPodSpecVolumesRbd | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'image': obj.image,
    'keyring': obj.keyring,
    'monitors': obj.monitors?.map(y => y),
    'pool': obj.pool,
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef(obj.secretRef),
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo
 */
export interface PodSpecWorkloadSpecPodSpecVolumesScaleIo {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
   *
   * @default xfs".
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#fsType
   */
  readonly fsType?: string;

  /**
   * The host address of the ScaleIO API Gateway.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#gateway
   */
  readonly gateway: string;

  /**
   * The name of the ScaleIO Protection Domain for the configured storage.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#protectionDomain
   */
  readonly protectionDomain?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#secretRef
   */
  readonly secretRef: PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef;

  /**
   * Flag to enable/disable SSL communication with Gateway, default false
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#sslEnabled
   */
  readonly sslEnabled?: boolean;

  /**
   * Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
   *
   * @default ThinProvisioned.
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#storageMode
   */
  readonly storageMode?: string;

  /**
   * The ScaleIO Storage Pool associated with the protection domain.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#storagePool
   */
  readonly storagePool?: string;

  /**
   * The name of the storage system as configured in ScaleIO.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#system
   */
  readonly system: string;

  /**
   * The name of a volume already created in the ScaleIO system that is associated with this volume source.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIo#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesScaleIo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesScaleIo(obj: PodSpecWorkloadSpecPodSpecVolumesScaleIo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'gateway': obj.gateway,
    'protectionDomain': obj.protectionDomain,
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef(obj.secretRef),
    'sslEnabled': obj.sslEnabled,
    'storageMode': obj.storageMode,
    'storagePool': obj.storagePool,
    'system': obj.system,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesSecret
 */
export interface PodSpecWorkloadSpecPodSpecVolumesSecret {
  /**
   * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @default 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecret#defaultMode
   */
  readonly defaultMode?: number;

  /**
   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecret#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesSecretItems[];

  /**
   * Specify whether the Secret or its keys must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecret#optional
   */
  readonly optional?: boolean;

  /**
   * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecret#secretName
   */
  readonly secretName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesSecret(obj: PodSpecWorkloadSpecPodSpecVolumesSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'defaultMode': obj.defaultMode,
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesSecretItems(y)),
    'optional': obj.optional,
    'secretName': obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos
 */
export interface PodSpecWorkloadSpecPodSpecVolumesStorageos {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos#fsType
   */
  readonly fsType?: string;

  /**
   * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   *
   * @default false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos#secretRef
   */
  readonly secretRef?: PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef;

  /**
   * VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos#volumeName
   */
  readonly volumeName?: string;

  /**
   * VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageos#volumeNamespace
   */
  readonly volumeNamespace?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesStorageos' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesStorageos(obj: PodSpecWorkloadSpecPodSpecVolumesStorageos | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'readOnly': obj.readOnly,
    'secretRef': toJson_PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef(obj.secretRef),
    'volumeName': obj.volumeName,
    'volumeNamespace': obj.volumeNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesVsphereVolume
 */
export interface PodSpecWorkloadSpecPodSpecVolumesVsphereVolume {
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesVsphereVolume#fsType
   */
  readonly fsType?: string;

  /**
   * Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesVsphereVolume#storagePolicyID
   */
  readonly storagePolicyId?: string;

  /**
   * Storage Policy Based Management (SPBM) profile name.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesVsphereVolume#storagePolicyName
   */
  readonly storagePolicyName?: string;

  /**
   * Path that identifies vSphere volume vmdk
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesVsphereVolume#volumePath
   */
  readonly volumePath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesVsphereVolume' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesVsphereVolume(obj: PodSpecWorkloadSpecPodSpecVolumesVsphereVolume | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fsType': obj.fsType,
    'storagePolicyID': obj.storagePolicyId,
    'storagePolicyName': obj.storagePolicyName,
    'volumePath': obj.volumePath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * A node selector term, associated with the corresponding weight.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#preference
   */
  readonly preference: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;

  /**
   * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'preference': toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj.preference),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A list of node selector terms. The terms are ORed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution#nodeSelectorTerms
   */
  readonly nodeSelectorTerms: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'nodeSelectorTerms': obj.nodeSelectorTerms?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'namespaceSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
  /**
   * Required. A pod affinity term, associated with the corresponding weight.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#podAffinityTerm
   */
  readonly podAffinityTerm: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;

  /**
   * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution#weight
   */
  readonly weight: number;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'podAffinityTerm': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj.podAffinityTerm),
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#labelSelector
   */
  readonly labelSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;

  /**
   * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaceSelector
   */
  readonly namespaceSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj.labelSelector),
    'namespaceSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFrom
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFrom(obj: PodSpecWorkloadSpecPodSpecContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ConfigMap to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Secret to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec(obj: PodSpecWorkloadSpecPodSpecContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec(obj: PodSpecWorkloadSpecPodSpecContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PodSpecWorkloadSpecPodSpecContainersResourcesLimits
 */
export class PodSpecWorkloadSpecPodSpecContainersResourcesLimits {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecContainersResourcesLimits(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema PodSpecWorkloadSpecPodSpecContainersResourcesRequests
 */
export class PodSpecWorkloadSpecPodSpecContainersResourcesRequests {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecContainersResourcesRequests(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
 *
 * @default the default set of capabilities granted by the container runtime.
 * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities
 */
export interface PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities {
  /**
   * Added capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * Removed capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities(obj: PodSpecWorkloadSpecPodSpecContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions
 */
export interface PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions(obj: PodSpecWorkloadSpecPodSpecContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile
 */
export interface PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile(obj: PodSpecWorkloadSpecPodSpecContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions
 */
export interface PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions(obj: PodSpecWorkloadSpecPodSpecContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecContainersStartupProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeExec(obj: PodSpecWorkloadSpecPodSpecContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ConfigMap to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Secret to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
 *
 * @default the default set of capabilities granted by the container runtime.
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities {
  /**
   * Added capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * Removed capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source for the environment variable's value. Cannot be used if value is not empty.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom {
  /**
   * Selects a key of a ConfigMap.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom#configMapKeyRef
   */
  readonly configMapKeyRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef;

  /**
   * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom#fieldRef
   */
  readonly fieldRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom#resourceFieldRef
   */
  readonly resourceFieldRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef;

  /**
   * Selects a key of a secret in the pod's namespace
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom#secretKeyRef
   */
  readonly secretKeyRef?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMapKeyRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef(obj.configMapKeyRef),
    'fieldRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef(obj.fieldRef),
    'resourceFieldRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef(obj.resourceFieldRef),
    'secretKeyRef': toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef(obj.secretKeyRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The ConfigMap to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvFromConfigMapRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Secret to select from
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvFromSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStart | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop {
  /**
   * One and only one of the following should be specified. Exec specifies the action to take.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop#exec
   */
  readonly exec?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec;

  /**
   * HTTPGet specifies the http request to perform.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop#httpGet
   */
  readonly httpGet?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet;

  /**
   * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop#tcpSocket
   */
  readonly tcpSocket?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStop | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exec': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec(obj.exec),
    'httpGet': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet(obj.httpGet),
    'tcpSocket': toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket(obj.tcpSocket),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec(obj: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec(obj: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits
 */
export class PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecInitContainersResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests
 */
export class PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecInitContainersResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
 *
 * @default the default set of capabilities granted by the container runtime.
 * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities {
  /**
   * Added capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities#add
   */
  readonly add?: string[];

  /**
   * Removed capabilities
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities#drop
   */
  readonly drop?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities(obj: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextCapabilities | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'add': obj.add?.map(y => y),
    'drop': obj.drop?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions(obj: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeLinuxOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'level': obj.level,
    'role': obj.role,
    'type': obj.type,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile#type
   */
  readonly type: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile(obj: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextSeccompProfile | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'localhostProfile': obj.localhostProfile,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions(obj: PodSpecWorkloadSpecPodSpecInitContainersSecurityContextWindowsOptions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'gmsaCredentialSpec': obj.gmsaCredentialSpec,
    'gmsaCredentialSpecName': obj.gmsaCredentialSpecName,
    'runAsUserName': obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec(obj: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet(obj: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket(obj: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecTopologySpreadConstraintsLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesCephfsSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional: points to a secret object containing parameters used to connect to OpenStack.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesCinderSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMapItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesConfigMapItems {
  /**
   * The key to project.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMapItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesConfigMapItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesConfigMapItems(obj: PodSpecWorkloadSpecPodSpecVolumesConfigMapItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesCsiNodePublishSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems {
  /**
   * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef;

  /**
   * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems(obj: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldRef': toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef(obj.fieldRef),
    'mode': obj.mode,
    'path': obj.path,
    'resourceFieldRef': toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef(obj.resourceFieldRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit
 */
export class PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit {
    return new PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit {
    return new PodSpecWorkloadSpecPodSpecVolumesEmptyDirSizeLimit(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
 * An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
 * This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
 * Required, must not be nil.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate {
  /**
   * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate#metadata
   */
  readonly metadata?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata;

  /**
   * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate#spec
   */
  readonly spec: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplate | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata(obj.metadata),
    'spec': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesFlexVolumeSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CHAP Secret for iSCSI target and initiator authentication
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesIscsiSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Projection that may be projected along with other supported volume types
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSources
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSources {
  /**
   * information about the configMap data to project
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSources#configMap
   */
  readonly configMap?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap;

  /**
   * information about the downwardAPI data to project
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSources#downwardAPI
   */
  readonly downwardApi?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi;

  /**
   * information about the secret data to project
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSources#secret
   */
  readonly secret?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret;

  /**
   * information about the serviceAccountToken data to project
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSources#serviceAccountToken
   */
  readonly serviceAccountToken?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSources(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configMap': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap(obj.configMap),
    'downwardAPI': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi(obj.downwardApi),
    'secret': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret(obj.secret),
    'serviceAccountToken': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken(obj.serviceAccountToken),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 *
 * @default nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
 * @schema PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesRbdSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesScaleIoSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesSecretItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesSecretItems {
  /**
   * The key to project.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecretItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesSecretItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesSecretItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesSecretItems(obj: PodSpecWorkloadSpecPodSpecVolumesSecretItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef(obj: PodSpecWorkloadSpecPodSpecVolumesStorageosSecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector term, associated with the corresponding weight.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference#matchFields
   */
  readonly matchFields?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
  /**
   * A list of node selector requirements by node's labels.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];

  /**
   * A list of node selector requirements by node's fields.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms#matchFields
   */
  readonly matchFields?: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(y)),
    'matchFields': obj.matchFields?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'namespaceSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required. A pod affinity term, associated with the corresponding weight.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
  /**
   * A label query over a set of resources, in this case pods.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#labelSelector
   */
  readonly labelSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;

  /**
   * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaceSelector
   */
  readonly namespaceSelector?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;

  /**
   * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#namespaces
   */
  readonly namespaces?: string[];

  /**
   * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm#topologyKey
   */
  readonly topologyKey: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'labelSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj.labelSelector),
    'namespaceSelector': toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj.namespaceSelector),
    'namespaces': obj.namespaces?.map(y => y),
    'topologyKey': obj.topologyKey,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a key of a ConfigMap.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef(obj: PodSpecWorkloadSpecPodSpecContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Selects a key of a ConfigMap.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Selects a key of a ConfigMap.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef {
  /**
   * The key to select.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromConfigMapKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef#divisor
   */
  readonly divisor?: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a key of a secret in the pod's namespace
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef {
  /**
   * The key of the secret to select from.  Must be a valid secret key.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef#key
   */
  readonly key: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef(obj: PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromSecretKeyRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * One and only one of the following should be specified. Exec specifies the action to take.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec {
  /**
   * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec#command
   */
  readonly command?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopExec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'command': obj.command?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPGet specifies the http request to perform.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet {
  /**
   * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet#host
   */
  readonly host?: string;

  /**
   * Custom headers to set in the request. HTTP allows repeated headers.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet#httpHeaders
   */
  readonly httpHeaders?: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];

  /**
   * Path to access on the HTTP server.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet#path
   */
  readonly path?: string;

  /**
   * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort;

  /**
   * Scheme to use for connecting to the host. Defaults to HTTP.
   *
   * @default HTTP.
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet#scheme
   */
  readonly scheme?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'httpHeaders': obj.httpHeaders?.map(y => toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(y)),
    'path': obj.path,
    'port': obj.port?.value,
    'scheme': obj.scheme,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket {
  /**
   * Optional: Host name to connect to, defaults to the pod IP.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket#host
   */
  readonly host?: string;

  /**
   * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket#port
   */
  readonly port: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocket | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'host': obj.host,
    'port': obj.port?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLivenessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersReadinessProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersStartupProbeHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersStartupProbeTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef(obj: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef(obj: PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata {
  /**
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata#finalizers
   */
  readonly finalizers?: string[];

  /**
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata#name
   */
  readonly name?: string;

  /**
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'finalizers': obj.finalizers?.map(y => y),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec {
  /**
   * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#accessModes
   */
  readonly accessModes?: string[];

  /**
   * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#dataSource
   */
  readonly dataSource?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;

  /**
   * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#resources
   */
  readonly resources?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources;

  /**
   * A label query over volumes to consider for binding.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#selector
   */
  readonly selector?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;

  /**
   * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#volumeMode
   */
  readonly volumeMode?: string;

  /**
   * VolumeName is the binding reference to the PersistentVolume backing this claim.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec#volumeName
   */
  readonly volumeName?: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accessModes': obj.accessModes?.map(y => y),
    'dataSource': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource(obj.dataSource),
    'resources': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources(obj.resources),
    'selector': toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector(obj.selector),
    'storageClassName': obj.storageClassName,
    'volumeMode': obj.volumeMode,
    'volumeName': obj.volumeName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * information about the configMap data to project
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap {
  /**
   * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap#name
   */
  readonly name?: string;

  /**
   * Specify whether the ConfigMap or its keys must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMap | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * information about the downwardAPI data to project
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi {
  /**
   * Items is a list of DownwardAPIVolume file
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * information about the secret data to project
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret {
  /**
   * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret#items
   */
  readonly items?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems[];

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret#name
   */
  readonly name?: string;

  /**
   * Specify whether the Secret or its key must be defined
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret#optional
   */
  readonly optional?: boolean;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecret | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'items': obj.items?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems(y)),
    'name': obj.name,
    'optional': obj.optional,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * information about the serviceAccountToken data to project
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken {
  /**
   * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken#audience
   */
  readonly audience?: string;

  /**
   * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
   *
   * @default 1 hour and must be at least 10 minutes.
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken#expirationSeconds
   */
  readonly expirationSeconds?: number;

  /**
   * Path is the path relative to the mount point of the file to project the token into.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesServiceAccountToken | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audience': obj.audience,
    'expirationSeconds': obj.expirationSeconds,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
  /**
   * The label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields
 */
export interface PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
  /**
   * The label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(obj: PodSpecWorkloadSpecPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over a set of resources, in this case pods.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor
 */
export class PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecEphemeralContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor
 */
export class PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecInitContainersEnvValueFromResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePostStartTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders
 */
export interface PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
  /**
   * The header field name
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#name
   */
  readonly name: string;

  /**
   * The header field value
   *
   * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders(obj: PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetHttpHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopHttpGetPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
 *
 * @schema PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort
 */
export class PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort {
    return new PodSpecWorkloadSpecPodSpecInitContainersLifecyclePreStopTcpSocketPort(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor
 */
export class PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecVolumesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
  /**
   * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#apiGroup
   */
  readonly apiGroup?: string;

  /**
   * Kind is the type of resource being referenced
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#kind
   */
  readonly kind: string;

  /**
   * Name is the name of resource being referenced
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiGroup': obj.apiGroup,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
  /**
   * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources#limits
   */
  readonly limits?: { [key: string]: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits };

  /**
   * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources#requests
   */
  readonly requests?: { [key: string]: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'limits': ((obj.limits) === undefined) ? undefined : (Object.entries(obj.limits).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
    'requests': ((obj.requests) === undefined) ? undefined : (Object.entries(obj.requests).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label query over volumes to consider for binding.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
  /**
   * matchExpressions is a list of label selector requirements. The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector#matchExpressions
   */
  readonly matchExpressions?: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];

  /**
   * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchExpressions': obj.matchExpressions?.map(y => toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions(y)),
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems {
  /**
   * The key to project.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesConfigMapItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DownwardAPIVolumeFile represents information to create the file containing the pod field
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems {
  /**
   * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems#fieldRef
   */
  readonly fieldRef?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef;

  /**
   * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems#mode
   */
  readonly mode?: number;

  /**
   * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems#path
   */
  readonly path: string;

  /**
   * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems#resourceFieldRef
   */
  readonly resourceFieldRef?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fieldRef': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef(obj.fieldRef),
    'mode': obj.mode,
    'path': obj.path,
    'resourceFieldRef': toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef(obj.resourceFieldRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maps a string key to a path within a volume.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems {
  /**
   * The key to project.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems#key
   */
  readonly key: string;

  /**
   * Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems#mode
   */
  readonly mode?: number;

  /**
   * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems#path
   */
  readonly path: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesSecretItems | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'mode': obj.mode,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits
 */
export class PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
    return new PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests
 */
export class PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
    return new PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions
 */
export interface PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
  /**
   * key is the label key that the selector applies to.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#key
   */
  readonly key: string;

  /**
   * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#operator
   */
  readonly operator: string;

  /**
   * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions(obj: PodSpecWorkloadSpecPodSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef {
  /**
   * Version of the schema the FieldPath is written in terms of, defaults to "v1".
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Path of the field to select in the specified API version.
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef#fieldPath
   */
  readonly fieldPath: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef
 */
export interface PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef {
  /**
   * Container name: required for volumes, optional for env vars
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#containerName
   */
  readonly containerName?: string;

  /**
   * Specifies the output format of the exposed resources, defaults to "1"
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#divisor
   */
  readonly divisor?: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor;

  /**
   * Required: resource to select
   *
   * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef#resource
   */
  readonly resource: string;

}

/**
 * Converts an object of type 'PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef(obj: PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'containerName': obj.containerName,
    'divisor': obj.divisor?.value,
    'resource': obj.resource,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Specifies the output format of the exposed resources, defaults to "1"
 *
 * @schema PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor
 */
export class PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
  public static fromNumber(value: number): PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  public static fromString(value: string): PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor {
    return new PodSpecWorkloadSpecPodSpecVolumesProjectedSourcesDownwardApiItemsResourceFieldRefDivisor(value);
  }
  private constructor(public readonly value: number | string) {
  }
}


/**
 * Rollout is the Schema for the Rollout API
 *
 * @schema Rollout
 */
export class Rollout extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Rollout"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'standard.oam.dev/v1alpha1',
    kind: 'Rollout',
  }

  /**
   * Renders a Kubernetes manifest for "Rollout".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RolloutProps = {}): any {
    return {
      ...Rollout.GVK,
      ...toJson_RolloutProps(props),
    };
  }

  /**
   * Defines a "Rollout" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RolloutProps = {}) {
    super(scope, id, {
      ...Rollout.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Rollout.GVK,
      ...toJson_RolloutProps(resolved),
    };
  }
}

/**
 * Rollout is the Schema for the Rollout API
 *
 * @schema Rollout
 */
export interface RolloutProps {
  /**
   * @schema Rollout#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RolloutSpec defines how to describe an update between different compRevision
   *
   * @schema Rollout#spec
   */
  readonly spec?: RolloutSpec;

}

/**
 * Converts an object of type 'RolloutProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutProps(obj: RolloutProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RolloutSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutSpec defines how to describe an update between different compRevision
 *
 * @schema RolloutSpec
 */
export interface RolloutSpec {
  /**
   * ComponentName specify the component name
   *
   * @schema RolloutSpec#componentName
   */
  readonly componentName: string;

  /**
   * RolloutPlan is the details on how to rollout the resources
   *
   * @schema RolloutSpec#rolloutPlan
   */
  readonly rolloutPlan: RolloutSpecRolloutPlan;

  /**
   * SourceRevisionName contains the name of the componentRevisionName  that we need to upgrade from. it can be empty only when it's the first time to deploy the application
   *
   * @schema RolloutSpec#sourceRevisionName
   */
  readonly sourceRevisionName?: string;

  /**
   * TargetRevisionName contains the name of the componentRevisionName that we need to upgrade to.
   *
   * @schema RolloutSpec#targetRevisionName
   */
  readonly targetRevisionName: string;

}

/**
 * Converts an object of type 'RolloutSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpec(obj: RolloutSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'componentName': obj.componentName,
    'rolloutPlan': toJson_RolloutSpecRolloutPlan(obj.rolloutPlan),
    'sourceRevisionName': obj.sourceRevisionName,
    'targetRevisionName': obj.targetRevisionName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutPlan is the details on how to rollout the resources
 *
 * @schema RolloutSpecRolloutPlan
 */
export interface RolloutSpecRolloutPlan {
  /**
   * All pods in the batches up to the batchPartition (included) will have the target resource specification while the rest still have the source resource This is designed for the operators to manually rollout Default is the the number of batches which will rollout all the batches
   *
   * @default the the number of batches which will rollout all the batches
   * @schema RolloutSpecRolloutPlan#batchPartition
   */
  readonly batchPartition?: number;

  /**
   * CanaryMetric provides a way for the rollout process to automatically check certain metrics before complete the process
   *
   * @schema RolloutSpecRolloutPlan#canaryMetric
   */
  readonly canaryMetric?: RolloutSpecRolloutPlanCanaryMetric[];

  /**
   * The number of batches, default = 1
   *
   * @schema RolloutSpecRolloutPlan#numBatches
   */
  readonly numBatches?: number;

  /**
   * Paused the rollout, default is false
   *
   * @schema RolloutSpecRolloutPlan#paused
   */
  readonly paused?: boolean;

  /**
   * The exact distribution among batches. its size has to be exactly the same as the NumBatches (if set) The total number cannot exceed the targetSize or the size of the source resource We will IGNORE the last batch's replica field if it's a percentage since round errors can lead to inaccurate sum We highly recommend to leave the last batch's replica field empty
   *
   * @schema RolloutSpecRolloutPlan#rolloutBatches
   */
  readonly rolloutBatches?: RolloutSpecRolloutPlanRolloutBatches[];

  /**
   * RolloutStrategy defines strategies for the rollout plan The default is IncreaseFirstRolloutStrategyType
   *
   * @schema RolloutSpecRolloutPlan#rolloutStrategy
   */
  readonly rolloutStrategy?: string;

  /**
   * RolloutWebhooks provide a way for the rollout to interact with an external process
   *
   * @schema RolloutSpecRolloutPlan#rolloutWebhooks
   */
  readonly rolloutWebhooks?: RolloutSpecRolloutPlanRolloutWebhooks[];

  /**
   * The size of the target resource. The default is the same as the size of the source resource.
   *
   * @schema RolloutSpecRolloutPlan#targetSize
   */
  readonly targetSize?: number;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlan' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlan(obj: RolloutSpecRolloutPlan | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchPartition': obj.batchPartition,
    'canaryMetric': obj.canaryMetric?.map(y => toJson_RolloutSpecRolloutPlanCanaryMetric(y)),
    'numBatches': obj.numBatches,
    'paused': obj.paused,
    'rolloutBatches': obj.rolloutBatches?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatches(y)),
    'rolloutStrategy': obj.rolloutStrategy,
    'rolloutWebhooks': obj.rolloutWebhooks?.map(y => toJson_RolloutSpecRolloutPlanRolloutWebhooks(y)),
    'targetSize': obj.targetSize,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanCanaryMetric
 */
export interface RolloutSpecRolloutPlanCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#metricsRange
   */
  readonly metricsRange?: RolloutSpecRolloutPlanCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema RolloutSpecRolloutPlanCanaryMetric#templateRef
   */
  readonly templateRef?: RolloutSpecRolloutPlanCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetric(obj: RolloutSpecRolloutPlanCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_RolloutSpecRolloutPlanCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_RolloutSpecRolloutPlanCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutBatch is used to describe how the each batch rollout should be
 *
 * @schema RolloutSpecRolloutPlanRolloutBatches
 */
export interface RolloutSpecRolloutPlanRolloutBatches {
  /**
   * RolloutWebhooks provides a way for the batch rollout to interact with an external process
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#batchRolloutWebhooks
   */
  readonly batchRolloutWebhooks?: RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks[];

  /**
   * CanaryMetric provides a way for the batch rollout process to automatically check certain metrics before moving to the next batch
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#canaryMetric
   */
  readonly canaryMetric?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetric[];

  /**
   * The wait time, in seconds, between instances upgrades, default = 0
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#instanceInterval
   */
  readonly instanceInterval?: number;

  /**
   * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#maxUnavailable
   */
  readonly maxUnavailable?: RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable;

  /**
   * The list of Pods to get upgraded it is mutually exclusive with the Replicas field
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#podList
   */
  readonly podList?: string[];

  /**
   * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
   *
   * @schema RolloutSpecRolloutPlanRolloutBatches#replicas
   */
  readonly replicas?: RolloutSpecRolloutPlanRolloutBatchesReplicas;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatches' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatches(obj: RolloutSpecRolloutPlanRolloutBatches | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'batchRolloutWebhooks': obj.batchRolloutWebhooks?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(y)),
    'canaryMetric': obj.canaryMetric?.map(y => toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetric(y)),
    'instanceInterval': obj.instanceInterval,
    'maxUnavailable': obj.maxUnavailable?.value,
    'podList': obj.podList?.map(y => y),
    'replicas': obj.replicas?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutWebhooks
 */
export interface RolloutSpecRolloutPlanRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutWebhooks(obj: RolloutSpecRolloutPlanRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Range value accepted for this metric
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange
 */
export interface RolloutSpecRolloutPlanCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange#max
   */
  readonly max?: RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRange#min
   */
  readonly min?: RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetricMetricsRange(obj: RolloutSpecRolloutPlanCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef
 */
export interface RolloutSpecRolloutPlanCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema RolloutSpecRolloutPlanCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanCanaryMetricTemplateRef(obj: RolloutSpecRolloutPlanCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RolloutWebhook holds the reference to external checks used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks
 */
export interface RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks {
  /**
   * ExpectedStatus contains all the expected http status code that we will accept as success
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#expectedStatus
   */
  readonly expectedStatus?: number[];

  /**
   * Metadata (key-value pairs) for this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#metadata
   */
  readonly metadata?: { [key: string]: string };

  /**
   * Method the HTTP call method, default is POST
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#method
   */
  readonly method?: string;

  /**
   * Name of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#name
   */
  readonly name: string;

  /**
   * Type of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#type
   */
  readonly type: string;

  /**
   * URL address of this webhook
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks#url
   */
  readonly url: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks(obj: RolloutSpecRolloutPlanRolloutBatchesBatchRolloutWebhooks | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expectedStatus': obj.expectedStatus?.map(y => y),
    'metadata': ((obj.metadata) === undefined) ? undefined : (Object.entries(obj.metadata).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'method': obj.method,
    'name': obj.name,
    'type': obj.type,
    'url': obj.url,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * CanaryMetric holds the reference to metrics used for canary analysis
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetric {
  /**
   * Interval represents the windows size
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#interval
   */
  readonly interval?: string;

  /**
   * Range value accepted for this metric
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#metricsRange
   */
  readonly metricsRange?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange;

  /**
   * Name of the metric
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#name
   */
  readonly name: string;

  /**
   * TemplateRef references a metric template object
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetric#templateRef
   */
  readonly templateRef?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetric' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetric(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetric | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'interval': obj.interval,
    'metricsRange': toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj.metricsRange),
    'name': obj.name,
    'templateRef': toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj.templateRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * MaxUnavailable is the max allowed number of pods that is unavailable during the upgrade. We will mark the batch as ready as long as there are less or equal number of pods unavailable than this number. default = 0
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable
 */
export class RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable {
    return new RolloutSpecRolloutPlanRolloutBatchesMaxUnavailable(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Replicas is the number of pods to upgrade in this batch it can be an absolute number (ex: 5) or a percentage of total pods we will ignore the percentage of the last batch to just fill the gap it is mutually exclusive with the PodList field
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesReplicas
 */
export class RolloutSpecRolloutPlanRolloutBatchesReplicas {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new RolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesReplicas {
    return new RolloutSpecRolloutPlanRolloutBatchesReplicas(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Maximum value
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax
 */
export class RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin
 */
export class RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Range value accepted for this metric
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange {
  /**
   * Maximum value
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#max
   */
  readonly max?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax;

  /**
   * Minimum value
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange#min
   */
  readonly min?: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRange | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'max': obj.max?.value,
    'min': obj.min?.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * TemplateRef references a metric template object
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef
 */
export interface RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef {
  /**
   * API version of the referent.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#fieldPath
   */
  readonly fieldPath?: string;

  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#namespace
   */
  readonly namespace?: string;

  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#resourceVersion
   */
  readonly resourceVersion?: string;

  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   *
   * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef#uid
   */
  readonly uid?: string;

}

/**
 * Converts an object of type 'RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef(obj: RolloutSpecRolloutPlanRolloutBatchesCanaryMetricTemplateRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'fieldPath': obj.fieldPath,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
    'resourceVersion': obj.resourceVersion,
    'uid': obj.uid,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Maximum value
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax
 */
export class RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMax(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * Minimum value
 *
 * @schema RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin
 */
export class RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
  public static fromNumber(value: number): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  public static fromString(value: string): RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin {
    return new RolloutSpecRolloutPlanRolloutBatchesCanaryMetricMetricsRangeMin(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

