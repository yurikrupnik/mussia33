// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema AuthorizationPolicy
 */
export class AuthorizationPolicy extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AuthorizationPolicy"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1',
    kind: 'AuthorizationPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "AuthorizationPolicy".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AuthorizationPolicyProps = {}): any {
    return {
      ...AuthorizationPolicy.GVK,
      ...toJson_AuthorizationPolicyProps(props),
    };
  }

  /**
   * Defines a "AuthorizationPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AuthorizationPolicyProps = {}) {
    super(scope, id, {
      ...AuthorizationPolicy.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AuthorizationPolicy.GVK,
      ...toJson_AuthorizationPolicyProps(resolved),
    };
  }
}

/**
 * @schema AuthorizationPolicy
 */
export interface AuthorizationPolicyProps {
  /**
   * @schema AuthorizationPolicy#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
   *
   * @schema AuthorizationPolicy#spec
   */
  readonly spec?: AuthorizationPolicySpec;

}

/**
 * Converts an object of type 'AuthorizationPolicyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyProps(obj: AuthorizationPolicyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AuthorizationPolicySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
 *
 * @schema AuthorizationPolicySpec
 */
export interface AuthorizationPolicySpec {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#action
   */
  readonly action?: AuthorizationPolicySpecAction;

  /**
   * Specifies detailed configuration of the CUSTOM action.
   *
   * @schema AuthorizationPolicySpec#provider
   */
  readonly provider?: AuthorizationPolicySpecProvider;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#rules
   */
  readonly rules?: AuthorizationPolicySpecRules[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpec#selector
   */
  readonly selector?: AuthorizationPolicySpecSelector;

}

/**
 * Converts an object of type 'AuthorizationPolicySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpec(obj: AuthorizationPolicySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'provider': toJson_AuthorizationPolicySpecProvider(obj.provider),
    'rules': obj.rules?.map(y => toJson_AuthorizationPolicySpecRules(y)),
    'selector': toJson_AuthorizationPolicySpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicySpecAction
 */
export enum AuthorizationPolicySpecAction {
  /** ALLOW */
  ALLOW = "ALLOW",
  /** DENY */
  DENY = "DENY",
  /** AUDIT */
  AUDIT = "AUDIT",
  /** CUSTOM */
  CUSTOM = "CUSTOM",
}

/**
 * Specifies detailed configuration of the CUSTOM action.
 *
 * @schema AuthorizationPolicySpecProvider
 */
export interface AuthorizationPolicySpecProvider {
  /**
   * Specifies the name of the extension provider.
   *
   * @schema AuthorizationPolicySpecProvider#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecProvider(obj: AuthorizationPolicySpecProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRules
 */
export interface AuthorizationPolicySpecRules {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#from
   */
  readonly from?: AuthorizationPolicySpecRulesFrom[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#to
   */
  readonly to?: AuthorizationPolicySpecRulesTo[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRules#when
   */
  readonly when?: AuthorizationPolicySpecRulesWhen[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRules(obj: AuthorizationPolicySpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_AuthorizationPolicySpecRulesFrom(y)),
    'to': obj.to?.map(y => toJson_AuthorizationPolicySpecRulesTo(y)),
    'when': obj.when?.map(y => toJson_AuthorizationPolicySpecRulesWhen(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicySpecSelector
 */
export interface AuthorizationPolicySpecSelector {
  /**
   * @schema AuthorizationPolicySpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'AuthorizationPolicySpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecSelector(obj: AuthorizationPolicySpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesFrom
 */
export interface AuthorizationPolicySpecRulesFrom {
  /**
   * Source specifies the source of a request.
   *
   * @schema AuthorizationPolicySpecRulesFrom#source
   */
  readonly source?: AuthorizationPolicySpecRulesFromSource;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesFrom(obj: AuthorizationPolicySpecRulesFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'source': toJson_AuthorizationPolicySpecRulesFromSource(obj.source),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesTo
 */
export interface AuthorizationPolicySpecRulesTo {
  /**
   * Operation specifies the operation of a request.
   *
   * @schema AuthorizationPolicySpecRulesTo#operation
   */
  readonly operation?: AuthorizationPolicySpecRulesToOperation;

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesTo(obj: AuthorizationPolicySpecRulesTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'operation': toJson_AuthorizationPolicySpecRulesToOperation(obj.operation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicySpecRulesWhen
 */
export interface AuthorizationPolicySpecRulesWhen {
  /**
   * The name of an Istio attribute.
   *
   * @schema AuthorizationPolicySpecRulesWhen#key
   */
  readonly key?: string;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesWhen#notValues
   */
  readonly notValues?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesWhen#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesWhen' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesWhen(obj: AuthorizationPolicySpecRulesWhen | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'notValues': obj.notValues?.map(y => y),
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source specifies the source of a request.
 *
 * @schema AuthorizationPolicySpecRulesFromSource
 */
export interface AuthorizationPolicySpecRulesFromSource {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#ipBlocks
   */
  readonly ipBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#namespaces
   */
  readonly namespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notIpBlocks
   */
  readonly notIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notNamespaces
   */
  readonly notNamespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notPrincipals
   */
  readonly notPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notRemoteIpBlocks
   */
  readonly notRemoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#notRequestPrincipals
   */
  readonly notRequestPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#principals
   */
  readonly principals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#remoteIpBlocks
   */
  readonly remoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesFromSource#requestPrincipals
   */
  readonly requestPrincipals?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesFromSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesFromSource(obj: AuthorizationPolicySpecRulesFromSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipBlocks': obj.ipBlocks?.map(y => y),
    'namespaces': obj.namespaces?.map(y => y),
    'notIpBlocks': obj.notIpBlocks?.map(y => y),
    'notNamespaces': obj.notNamespaces?.map(y => y),
    'notPrincipals': obj.notPrincipals?.map(y => y),
    'notRemoteIpBlocks': obj.notRemoteIpBlocks?.map(y => y),
    'notRequestPrincipals': obj.notRequestPrincipals?.map(y => y),
    'principals': obj.principals?.map(y => y),
    'remoteIpBlocks': obj.remoteIpBlocks?.map(y => y),
    'requestPrincipals': obj.requestPrincipals?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Operation specifies the operation of a request.
 *
 * @schema AuthorizationPolicySpecRulesToOperation
 */
export interface AuthorizationPolicySpecRulesToOperation {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#hosts
   */
  readonly hosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#methods
   */
  readonly methods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notHosts
   */
  readonly notHosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notMethods
   */
  readonly notMethods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notPaths
   */
  readonly notPaths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#notPorts
   */
  readonly notPorts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#paths
   */
  readonly paths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicySpecRulesToOperation#ports
   */
  readonly ports?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicySpecRulesToOperation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicySpecRulesToOperation(obj: AuthorizationPolicySpecRulesToOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'notHosts': obj.notHosts?.map(y => y),
    'notMethods': obj.notMethods?.map(y => y),
    'notPaths': obj.notPaths?.map(y => y),
    'notPorts': obj.notPorts?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'ports': obj.ports?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema AuthorizationPolicyV1Beta1
 */
export class AuthorizationPolicyV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AuthorizationPolicyV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'AuthorizationPolicy',
  }

  /**
   * Renders a Kubernetes manifest for "AuthorizationPolicyV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AuthorizationPolicyV1Beta1Props = {}): any {
    return {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...toJson_AuthorizationPolicyV1Beta1Props(props),
    };
  }

  /**
   * Defines a "AuthorizationPolicyV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AuthorizationPolicyV1Beta1Props = {}) {
    super(scope, id, {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AuthorizationPolicyV1Beta1.GVK,
      ...toJson_AuthorizationPolicyV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema AuthorizationPolicyV1Beta1
 */
export interface AuthorizationPolicyV1Beta1Props {
  /**
   * @schema AuthorizationPolicyV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
   *
   * @schema AuthorizationPolicyV1Beta1#spec
   */
  readonly spec?: AuthorizationPolicyV1Beta1Spec;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1Props(obj: AuthorizationPolicyV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AuthorizationPolicyV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
 *
 * @schema AuthorizationPolicyV1Beta1Spec
 */
export interface AuthorizationPolicyV1Beta1Spec {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#action
   */
  readonly action?: AuthorizationPolicyV1Beta1SpecAction;

  /**
   * Specifies detailed configuration of the CUSTOM action.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#provider
   */
  readonly provider?: AuthorizationPolicyV1Beta1SpecProvider;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#rules
   */
  readonly rules?: AuthorizationPolicyV1Beta1SpecRules[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1Spec#selector
   */
  readonly selector?: AuthorizationPolicyV1Beta1SpecSelector;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1Spec(obj: AuthorizationPolicyV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'action': obj.action,
    'provider': toJson_AuthorizationPolicyV1Beta1SpecProvider(obj.provider),
    'rules': obj.rules?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRules(y)),
    'selector': toJson_AuthorizationPolicyV1Beta1SpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicyV1Beta1SpecAction
 */
export enum AuthorizationPolicyV1Beta1SpecAction {
  /** ALLOW */
  ALLOW = "ALLOW",
  /** DENY */
  DENY = "DENY",
  /** AUDIT */
  AUDIT = "AUDIT",
  /** CUSTOM */
  CUSTOM = "CUSTOM",
}

/**
 * Specifies detailed configuration of the CUSTOM action.
 *
 * @schema AuthorizationPolicyV1Beta1SpecProvider
 */
export interface AuthorizationPolicyV1Beta1SpecProvider {
  /**
   * Specifies the name of the extension provider.
   *
   * @schema AuthorizationPolicyV1Beta1SpecProvider#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecProvider(obj: AuthorizationPolicyV1Beta1SpecProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRules
 */
export interface AuthorizationPolicyV1Beta1SpecRules {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#from
   */
  readonly from?: AuthorizationPolicyV1Beta1SpecRulesFrom[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#to
   */
  readonly to?: AuthorizationPolicyV1Beta1SpecRulesTo[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRules#when
   */
  readonly when?: AuthorizationPolicyV1Beta1SpecRulesWhen[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRules(obj: AuthorizationPolicyV1Beta1SpecRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'from': obj.from?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesFrom(y)),
    'to': obj.to?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesTo(y)),
    'when': obj.when?.map(y => toJson_AuthorizationPolicyV1Beta1SpecRulesWhen(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema AuthorizationPolicyV1Beta1SpecSelector
 */
export interface AuthorizationPolicyV1Beta1SpecSelector {
  /**
   * @schema AuthorizationPolicyV1Beta1SpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecSelector(obj: AuthorizationPolicyV1Beta1SpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesFrom
 */
export interface AuthorizationPolicyV1Beta1SpecRulesFrom {
  /**
   * Source specifies the source of a request.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFrom#source
   */
  readonly source?: AuthorizationPolicyV1Beta1SpecRulesFromSource;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesFrom' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesFrom(obj: AuthorizationPolicyV1Beta1SpecRulesFrom | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'source': toJson_AuthorizationPolicyV1Beta1SpecRulesFromSource(obj.source),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesTo
 */
export interface AuthorizationPolicyV1Beta1SpecRulesTo {
  /**
   * Operation specifies the operation of a request.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesTo#operation
   */
  readonly operation?: AuthorizationPolicyV1Beta1SpecRulesToOperation;

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesTo(obj: AuthorizationPolicyV1Beta1SpecRulesTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'operation': toJson_AuthorizationPolicyV1Beta1SpecRulesToOperation(obj.operation),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema AuthorizationPolicyV1Beta1SpecRulesWhen
 */
export interface AuthorizationPolicyV1Beta1SpecRulesWhen {
  /**
   * The name of an Istio attribute.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#key
   */
  readonly key?: string;

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#notValues
   */
  readonly notValues?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesWhen#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesWhen' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesWhen(obj: AuthorizationPolicyV1Beta1SpecRulesWhen | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'notValues': obj.notValues?.map(y => y),
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source specifies the source of a request.
 *
 * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource
 */
export interface AuthorizationPolicyV1Beta1SpecRulesFromSource {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#ipBlocks
   */
  readonly ipBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#namespaces
   */
  readonly namespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notIpBlocks
   */
  readonly notIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notNamespaces
   */
  readonly notNamespaces?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notPrincipals
   */
  readonly notPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notRemoteIpBlocks
   */
  readonly notRemoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#notRequestPrincipals
   */
  readonly notRequestPrincipals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#principals
   */
  readonly principals?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#remoteIpBlocks
   */
  readonly remoteIpBlocks?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesFromSource#requestPrincipals
   */
  readonly requestPrincipals?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesFromSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesFromSource(obj: AuthorizationPolicyV1Beta1SpecRulesFromSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ipBlocks': obj.ipBlocks?.map(y => y),
    'namespaces': obj.namespaces?.map(y => y),
    'notIpBlocks': obj.notIpBlocks?.map(y => y),
    'notNamespaces': obj.notNamespaces?.map(y => y),
    'notPrincipals': obj.notPrincipals?.map(y => y),
    'notRemoteIpBlocks': obj.notRemoteIpBlocks?.map(y => y),
    'notRequestPrincipals': obj.notRequestPrincipals?.map(y => y),
    'principals': obj.principals?.map(y => y),
    'remoteIpBlocks': obj.remoteIpBlocks?.map(y => y),
    'requestPrincipals': obj.requestPrincipals?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Operation specifies the operation of a request.
 *
 * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation
 */
export interface AuthorizationPolicyV1Beta1SpecRulesToOperation {
  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#hosts
   */
  readonly hosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#methods
   */
  readonly methods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notHosts
   */
  readonly notHosts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notMethods
   */
  readonly notMethods?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notPaths
   */
  readonly notPaths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#notPorts
   */
  readonly notPorts?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#paths
   */
  readonly paths?: string[];

  /**
   * Optional.
   *
   * @schema AuthorizationPolicyV1Beta1SpecRulesToOperation#ports
   */
  readonly ports?: string[];

}

/**
 * Converts an object of type 'AuthorizationPolicyV1Beta1SpecRulesToOperation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AuthorizationPolicyV1Beta1SpecRulesToOperation(obj: AuthorizationPolicyV1Beta1SpecRulesToOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'hosts': obj.hosts?.map(y => y),
    'methods': obj.methods?.map(y => y),
    'notHosts': obj.notHosts?.map(y => y),
    'notMethods': obj.notMethods?.map(y => y),
    'notPaths': obj.notPaths?.map(y => y),
    'notPorts': obj.notPorts?.map(y => y),
    'paths': obj.paths?.map(y => y),
    'ports': obj.ports?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema PeerAuthentication
 */
export class PeerAuthentication extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PeerAuthentication"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'PeerAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "PeerAuthentication".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PeerAuthenticationProps = {}): any {
    return {
      ...PeerAuthentication.GVK,
      ...toJson_PeerAuthenticationProps(props),
    };
  }

  /**
   * Defines a "PeerAuthentication" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PeerAuthenticationProps = {}) {
    super(scope, id, {
      ...PeerAuthentication.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PeerAuthentication.GVK,
      ...toJson_PeerAuthenticationProps(resolved),
    };
  }
}

/**
 * @schema PeerAuthentication
 */
export interface PeerAuthenticationProps {
  /**
   * @schema PeerAuthentication#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
   *
   * @schema PeerAuthentication#spec
   */
  readonly spec?: PeerAuthenticationSpec;

}

/**
 * Converts an object of type 'PeerAuthenticationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationProps(obj: PeerAuthenticationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_PeerAuthenticationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PeerAuthentication defines how traffic will be tunneled (or not) to the sidecar.
 *
 * @schema PeerAuthenticationSpec
 */
export interface PeerAuthenticationSpec {
  /**
   * Mutual TLS settings for workload.
   *
   * @schema PeerAuthenticationSpec#mtls
   */
  readonly mtls?: PeerAuthenticationSpecMtls;

  /**
   * Port specific mutual TLS settings.
   *
   * @schema PeerAuthenticationSpec#portLevelMtls
   */
  readonly portLevelMtls?: { [key: string]: PeerAuthenticationSpecPortLevelMtls };

  /**
   * The selector determines the workloads to apply the ChannelAuthentication on.
   *
   * @schema PeerAuthenticationSpec#selector
   */
  readonly selector?: PeerAuthenticationSpecSelector;

}

/**
 * Converts an object of type 'PeerAuthenticationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpec(obj: PeerAuthenticationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mtls': toJson_PeerAuthenticationSpecMtls(obj.mtls),
    'portLevelMtls': ((obj.portLevelMtls) === undefined) ? undefined : (Object.entries(obj.portLevelMtls).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_PeerAuthenticationSpecPortLevelMtls(i[1]) }), {})),
    'selector': toJson_PeerAuthenticationSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Mutual TLS settings for workload.
 *
 * @schema PeerAuthenticationSpecMtls
 */
export interface PeerAuthenticationSpecMtls {
  /**
   * Defines the mTLS mode used for peer authentication.
   *
   * @schema PeerAuthenticationSpecMtls#mode
   */
  readonly mode?: PeerAuthenticationSpecMtlsMode;

}

/**
 * Converts an object of type 'PeerAuthenticationSpecMtls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecMtls(obj: PeerAuthenticationSpecMtls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PeerAuthenticationSpecPortLevelMtls
 */
export interface PeerAuthenticationSpecPortLevelMtls {
  /**
   * Defines the mTLS mode used for peer authentication.
   *
   * @schema PeerAuthenticationSpecPortLevelMtls#mode
   */
  readonly mode?: PeerAuthenticationSpecPortLevelMtlsMode;

}

/**
 * Converts an object of type 'PeerAuthenticationSpecPortLevelMtls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecPortLevelMtls(obj: PeerAuthenticationSpecPortLevelMtls | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'mode': obj.mode,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The selector determines the workloads to apply the ChannelAuthentication on.
 *
 * @schema PeerAuthenticationSpecSelector
 */
export interface PeerAuthenticationSpecSelector {
  /**
   * @schema PeerAuthenticationSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'PeerAuthenticationSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PeerAuthenticationSpecSelector(obj: PeerAuthenticationSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Defines the mTLS mode used for peer authentication.
 *
 * @schema PeerAuthenticationSpecMtlsMode
 */
export enum PeerAuthenticationSpecMtlsMode {
  /** UNSET */
  UNSET = "UNSET",
  /** DISABLE */
  DISABLE = "DISABLE",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}

/**
 * Defines the mTLS mode used for peer authentication.
 *
 * @schema PeerAuthenticationSpecPortLevelMtlsMode
 */
export enum PeerAuthenticationSpecPortLevelMtlsMode {
  /** UNSET */
  UNSET = "UNSET",
  /** DISABLE */
  DISABLE = "DISABLE",
  /** PERMISSIVE */
  PERMISSIVE = "PERMISSIVE",
  /** STRICT */
  STRICT = "STRICT",
}


/**
 *
 *
 * @schema RequestAuthentication
 */
export class RequestAuthentication extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RequestAuthentication"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1',
    kind: 'RequestAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "RequestAuthentication".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RequestAuthenticationProps = {}): any {
    return {
      ...RequestAuthentication.GVK,
      ...toJson_RequestAuthenticationProps(props),
    };
  }

  /**
   * Defines a "RequestAuthentication" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RequestAuthenticationProps = {}) {
    super(scope, id, {
      ...RequestAuthentication.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RequestAuthentication.GVK,
      ...toJson_RequestAuthenticationProps(resolved),
    };
  }
}

/**
 * @schema RequestAuthentication
 */
export interface RequestAuthenticationProps {
  /**
   * @schema RequestAuthentication#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RequestAuthentication defines what request authentication methods are supported by a workload.
   *
   * @schema RequestAuthentication#spec
   */
  readonly spec?: RequestAuthenticationSpec;

}

/**
 * Converts an object of type 'RequestAuthenticationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationProps(obj: RequestAuthenticationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RequestAuthenticationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestAuthentication defines what request authentication methods are supported by a workload.
 *
 * @schema RequestAuthenticationSpec
 */
export interface RequestAuthenticationSpec {
  /**
   * Define the list of JWTs that can be validated at the selected workloads' proxy.
   *
   * @schema RequestAuthenticationSpec#jwtRules
   */
  readonly jwtRules?: RequestAuthenticationSpecJwtRules[];

  /**
   * Optional.
   *
   * @schema RequestAuthenticationSpec#selector
   */
  readonly selector?: RequestAuthenticationSpecSelector;

}

/**
 * Converts an object of type 'RequestAuthenticationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpec(obj: RequestAuthenticationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jwtRules': obj.jwtRules?.map(y => toJson_RequestAuthenticationSpecJwtRules(y)),
    'selector': toJson_RequestAuthenticationSpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRules
 */
export interface RequestAuthenticationSpecJwtRules {
  /**
   * @schema RequestAuthenticationSpecJwtRules#audiences
   */
  readonly audiences?: string[];

  /**
   * If set to true, the original token will be kept for the upstream request.
   *
   * @schema RequestAuthenticationSpecJwtRules#forwardOriginalToken
   */
  readonly forwardOriginalToken?: boolean;

  /**
   * List of header locations from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromHeaders
   */
  readonly fromHeaders?: RequestAuthenticationSpecJwtRulesFromHeaders[];

  /**
   * List of query parameters from which JWT is expected.
   *
   * @schema RequestAuthenticationSpecJwtRules#fromParams
   */
  readonly fromParams?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema RequestAuthenticationSpecJwtRules#jwks
   */
  readonly jwks?: string;

  /**
   * @schema RequestAuthenticationSpecJwtRules#jwks_uri
   */
  readonly jwksUri?: string;

  /**
   * @schema RequestAuthenticationSpecJwtRules#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token.
   *
   * @schema RequestAuthenticationSpecJwtRules#outputClaimToHeaders
   */
  readonly outputClaimToHeaders?: RequestAuthenticationSpecJwtRulesOutputClaimToHeaders[];

  /**
   * @schema RequestAuthenticationSpecJwtRules#outputPayloadToHeader
   */
  readonly outputPayloadToHeader?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRules(obj: RequestAuthenticationSpecJwtRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audiences': obj.audiences?.map(y => y),
    'forwardOriginalToken': obj.forwardOriginalToken,
    'fromHeaders': obj.fromHeaders?.map(y => toJson_RequestAuthenticationSpecJwtRulesFromHeaders(y)),
    'fromParams': obj.fromParams?.map(y => y),
    'issuer': obj.issuer,
    'jwks': obj.jwks,
    'jwks_uri': obj.jwksUri,
    'jwksUri': obj.jwksUri,
    'outputClaimToHeaders': obj.outputClaimToHeaders?.map(y => toJson_RequestAuthenticationSpecJwtRulesOutputClaimToHeaders(y)),
    'outputPayloadToHeader': obj.outputPayloadToHeader,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationSpecSelector
 */
export interface RequestAuthenticationSpecSelector {
  /**
   * @schema RequestAuthenticationSpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RequestAuthenticationSpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecSelector(obj: RequestAuthenticationSpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRulesFromHeaders
 */
export interface RequestAuthenticationSpecJwtRulesFromHeaders {
  /**
   * The HTTP header name.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#name
   */
  readonly name?: string;

  /**
   * The prefix that should be stripped before decoding the token.
   *
   * @schema RequestAuthenticationSpecJwtRulesFromHeaders#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRulesFromHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRulesFromHeaders(obj: RequestAuthenticationSpecJwtRulesFromHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders
 */
export interface RequestAuthenticationSpecJwtRulesOutputClaimToHeaders {
  /**
   * The name of the claim to be copied from.
   *
   * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders#claim
   */
  readonly claim?: string;

  /**
   * The name of the header to be created.
   *
   * @schema RequestAuthenticationSpecJwtRulesOutputClaimToHeaders#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationSpecJwtRulesOutputClaimToHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationSpecJwtRulesOutputClaimToHeaders(obj: RequestAuthenticationSpecJwtRulesOutputClaimToHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claim': obj.claim,
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 *
 *
 * @schema RequestAuthenticationV1Beta1
 */
export class RequestAuthenticationV1Beta1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RequestAuthenticationV1Beta1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'security.istio.io/v1beta1',
    kind: 'RequestAuthentication',
  }

  /**
   * Renders a Kubernetes manifest for "RequestAuthenticationV1Beta1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: RequestAuthenticationV1Beta1Props = {}): any {
    return {
      ...RequestAuthenticationV1Beta1.GVK,
      ...toJson_RequestAuthenticationV1Beta1Props(props),
    };
  }

  /**
   * Defines a "RequestAuthenticationV1Beta1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RequestAuthenticationV1Beta1Props = {}) {
    super(scope, id, {
      ...RequestAuthenticationV1Beta1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...RequestAuthenticationV1Beta1.GVK,
      ...toJson_RequestAuthenticationV1Beta1Props(resolved),
    };
  }
}

/**
 * @schema RequestAuthenticationV1Beta1
 */
export interface RequestAuthenticationV1Beta1Props {
  /**
   * @schema RequestAuthenticationV1Beta1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * RequestAuthentication defines what request authentication methods are supported by a workload.
   *
   * @schema RequestAuthenticationV1Beta1#spec
   */
  readonly spec?: RequestAuthenticationV1Beta1Spec;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1Props(obj: RequestAuthenticationV1Beta1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_RequestAuthenticationV1Beta1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * RequestAuthentication defines what request authentication methods are supported by a workload.
 *
 * @schema RequestAuthenticationV1Beta1Spec
 */
export interface RequestAuthenticationV1Beta1Spec {
  /**
   * Define the list of JWTs that can be validated at the selected workloads' proxy.
   *
   * @schema RequestAuthenticationV1Beta1Spec#jwtRules
   */
  readonly jwtRules?: RequestAuthenticationV1Beta1SpecJwtRules[];

  /**
   * Optional.
   *
   * @schema RequestAuthenticationV1Beta1Spec#selector
   */
  readonly selector?: RequestAuthenticationV1Beta1SpecSelector;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1Spec(obj: RequestAuthenticationV1Beta1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'jwtRules': obj.jwtRules?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRules(y)),
    'selector': toJson_RequestAuthenticationV1Beta1SpecSelector(obj.selector),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRules
 */
export interface RequestAuthenticationV1Beta1SpecJwtRules {
  /**
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#audiences
   */
  readonly audiences?: string[];

  /**
   * If set to true, the original token will be kept for the upstream request.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#forwardOriginalToken
   */
  readonly forwardOriginalToken?: boolean;

  /**
   * List of header locations from which JWT is expected.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#fromHeaders
   */
  readonly fromHeaders?: RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders[];

  /**
   * List of query parameters from which JWT is expected.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#fromParams
   */
  readonly fromParams?: string[];

  /**
   * Identifies the issuer that issued the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#issuer
   */
  readonly issuer?: string;

  /**
   * JSON Web Key Set of public keys to validate signature of the JWT.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwks
   */
  readonly jwks?: string;

  /**
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwks_uri
   */
  readonly jwksUri?: string;

  /**
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#jwksUri
   */
  readonly jwksUri?: string;

  /**
   * This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#outputClaimToHeaders
   */
  readonly outputClaimToHeaders?: RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders[];

  /**
   * @schema RequestAuthenticationV1Beta1SpecJwtRules#outputPayloadToHeader
   */
  readonly outputPayloadToHeader?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRules' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRules(obj: RequestAuthenticationV1Beta1SpecJwtRules | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'audiences': obj.audiences?.map(y => y),
    'forwardOriginalToken': obj.forwardOriginalToken,
    'fromHeaders': obj.fromHeaders?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders(y)),
    'fromParams': obj.fromParams?.map(y => y),
    'issuer': obj.issuer,
    'jwks': obj.jwks,
    'jwks_uri': obj.jwksUri,
    'jwksUri': obj.jwksUri,
    'outputClaimToHeaders': obj.outputClaimToHeaders?.map(y => toJson_RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders(y)),
    'outputPayloadToHeader': obj.outputPayloadToHeader,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Optional.
 *
 * @schema RequestAuthenticationV1Beta1SpecSelector
 */
export interface RequestAuthenticationV1Beta1SpecSelector {
  /**
   * @schema RequestAuthenticationV1Beta1SpecSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecSelector' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecSelector(obj: RequestAuthenticationV1Beta1SpecSelector | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'matchLabels': ((obj.matchLabels) === undefined) ? undefined : (Object.entries(obj.matchLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders
 */
export interface RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders {
  /**
   * The HTTP header name.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders#name
   */
  readonly name?: string;

  /**
   * The prefix that should be stripped before decoding the token.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders#prefix
   */
  readonly prefix?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders(obj: RequestAuthenticationV1Beta1SpecJwtRulesFromHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'prefix': obj.prefix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders
 */
export interface RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders {
  /**
   * The name of the claim to be copied from.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders#claim
   */
  readonly claim?: string;

  /**
   * The name of the header to be created.
   *
   * @schema RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders#header
   */
  readonly header?: string;

}

/**
 * Converts an object of type 'RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders(obj: RequestAuthenticationV1Beta1SpecJwtRulesOutputClaimToHeaders | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'claim': obj.claim,
    'header': obj.header,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

