// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * SSHPublicKey is the Schema for the SSHPublicKeys API. The SSH public key information associated with a Google account.
 *
 * @schema SSHPublicKey
 */
export class SshPublicKey extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SSHPublicKey"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'oslogin.gcp.upbound.io/v1beta1',
    kind: 'SSHPublicKey',
  }

  /**
   * Renders a Kubernetes manifest for "SSHPublicKey".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SshPublicKeyProps): any {
    return {
      ...SshPublicKey.GVK,
      ...toJson_SshPublicKeyProps(props),
    };
  }

  /**
   * Defines a "SSHPublicKey" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SshPublicKeyProps) {
    super(scope, id, {
      ...SshPublicKey.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SshPublicKey.GVK,
      ...toJson_SshPublicKeyProps(resolved),
    };
  }
}

/**
 * SSHPublicKey is the Schema for the SSHPublicKeys API. The SSH public key information associated with a Google account.
 *
 * @schema SSHPublicKey
 */
export interface SshPublicKeyProps {
  /**
   * @schema SSHPublicKey#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SSHPublicKeySpec defines the desired state of SSHPublicKey
   *
   * @schema SSHPublicKey#spec
   */
  readonly spec: SshPublicKeySpec;

}

/**
 * Converts an object of type 'SshPublicKeyProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeyProps(obj: SshPublicKeyProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SshPublicKeySpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SSHPublicKeySpec defines the desired state of SSHPublicKey
 *
 * @schema SshPublicKeySpec
 */
export interface SshPublicKeySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema SshPublicKeySpec#deletionPolicy
   */
  readonly deletionPolicy?: SshPublicKeySpecDeletionPolicy;

  /**
   * @schema SshPublicKeySpec#forProvider
   */
  readonly forProvider: SshPublicKeySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema SshPublicKeySpec#providerConfigRef
   */
  readonly providerConfigRef?: SshPublicKeySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema SshPublicKeySpec#providerRef
   */
  readonly providerRef?: SshPublicKeySpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema SshPublicKeySpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: SshPublicKeySpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema SshPublicKeySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: SshPublicKeySpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'SshPublicKeySpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpec(obj: SshPublicKeySpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_SshPublicKeySpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_SshPublicKeySpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_SshPublicKeySpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_SshPublicKeySpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_SshPublicKeySpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema SshPublicKeySpecDeletionPolicy
 */
export enum SshPublicKeySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema SshPublicKeySpecForProvider
 */
export interface SshPublicKeySpecForProvider {
  /**
   * An expiration time in microseconds since epoch.
   *
   * @schema SshPublicKeySpecForProvider#expirationTimeUsec
   */
  readonly expirationTimeUsec?: string;

  /**
   * Public key text in SSH format, defined by RFC4253 section 6.6.
   *
   * @schema SshPublicKeySpecForProvider#keySecretRef
   */
  readonly keySecretRef: SshPublicKeySpecForProviderKeySecretRef;

  /**
   * The project ID of the Google Cloud Platform project.
   *
   * @schema SshPublicKeySpecForProvider#project
   */
  readonly project?: string;

  /**
   * The user email.
   *
   * @schema SshPublicKeySpecForProvider#user
   */
  readonly user: string;

}

/**
 * Converts an object of type 'SshPublicKeySpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecForProvider(obj: SshPublicKeySpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'expirationTimeUsec': obj.expirationTimeUsec,
    'keySecretRef': toJson_SshPublicKeySpecForProviderKeySecretRef(obj.keySecretRef),
    'project': obj.project,
    'user': obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema SshPublicKeySpecProviderConfigRef
 */
export interface SshPublicKeySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SshPublicKeySpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SshPublicKeySpecProviderConfigRef#policy
   */
  readonly policy?: SshPublicKeySpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'SshPublicKeySpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecProviderConfigRef(obj: SshPublicKeySpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SshPublicKeySpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema SshPublicKeySpecProviderRef
 */
export interface SshPublicKeySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema SshPublicKeySpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SshPublicKeySpecProviderRef#policy
   */
  readonly policy?: SshPublicKeySpecProviderRefPolicy;

}

/**
 * Converts an object of type 'SshPublicKeySpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecProviderRef(obj: SshPublicKeySpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SshPublicKeySpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsTo
 */
export interface SshPublicKeySpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: SshPublicKeySpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: SshPublicKeySpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'SshPublicKeySpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecPublishConnectionDetailsTo(obj: SshPublicKeySpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_SshPublicKeySpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_SshPublicKeySpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema SshPublicKeySpecWriteConnectionSecretToRef
 */
export interface SshPublicKeySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema SshPublicKeySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SshPublicKeySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'SshPublicKeySpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecWriteConnectionSecretToRef(obj: SshPublicKeySpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Public key text in SSH format, defined by RFC4253 section 6.6.
 *
 * @schema SshPublicKeySpecForProviderKeySecretRef
 */
export interface SshPublicKeySpecForProviderKeySecretRef {
  /**
   * The key to select.
   *
   * @schema SshPublicKeySpecForProviderKeySecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema SshPublicKeySpecForProviderKeySecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SshPublicKeySpecForProviderKeySecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'SshPublicKeySpecForProviderKeySecretRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecForProviderKeySecretRef(obj: SshPublicKeySpecForProviderKeySecretRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema SshPublicKeySpecProviderConfigRefPolicy
 */
export interface SshPublicKeySpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SshPublicKeySpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: SshPublicKeySpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SshPublicKeySpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: SshPublicKeySpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'SshPublicKeySpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecProviderConfigRefPolicy(obj: SshPublicKeySpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema SshPublicKeySpecProviderRefPolicy
 */
export interface SshPublicKeySpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SshPublicKeySpecProviderRefPolicy#resolution
   */
  readonly resolution?: SshPublicKeySpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SshPublicKeySpecProviderRefPolicy#resolve
   */
  readonly resolve?: SshPublicKeySpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'SshPublicKeySpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecProviderRefPolicy(obj: SshPublicKeySpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRef
 */
export interface SshPublicKeySpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'SshPublicKeySpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecPublishConnectionDetailsToConfigRef(obj: SshPublicKeySpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsToMetadata
 */
export interface SshPublicKeySpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'SshPublicKeySpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecPublishConnectionDetailsToMetadata(obj: SshPublicKeySpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SshPublicKeySpecProviderConfigRefPolicyResolution
 */
export enum SshPublicKeySpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SshPublicKeySpecProviderConfigRefPolicyResolve
 */
export enum SshPublicKeySpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SshPublicKeySpecProviderRefPolicyResolution
 */
export enum SshPublicKeySpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SshPublicKeySpecProviderRefPolicyResolve
 */
export enum SshPublicKeySpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy(obj: SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum SshPublicKeySpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

