// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * AlternateContact is the Schema for the AlternateContacts API. Manages the specified alternate contact attached to an AWS Account.
 *
 * @schema AlternateContact
 */
export class AlternateContact extends ApiObject {
  /**
   * Returns the apiVersion and kind for "AlternateContact"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'account.aws.upbound.io/v1beta1',
    kind: 'AlternateContact',
  }

  /**
   * Renders a Kubernetes manifest for "AlternateContact".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: AlternateContactProps): any {
    return {
      ...AlternateContact.GVK,
      ...toJson_AlternateContactProps(props),
    };
  }

  /**
   * Defines a "AlternateContact" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: AlternateContactProps) {
    super(scope, id, {
      ...AlternateContact.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...AlternateContact.GVK,
      ...toJson_AlternateContactProps(resolved),
    };
  }
}

/**
 * AlternateContact is the Schema for the AlternateContacts API. Manages the specified alternate contact attached to an AWS Account.
 *
 * @schema AlternateContact
 */
export interface AlternateContactProps {
  /**
   * @schema AlternateContact#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * AlternateContactSpec defines the desired state of AlternateContact
   *
   * @schema AlternateContact#spec
   */
  readonly spec: AlternateContactSpec;

}

/**
 * Converts an object of type 'AlternateContactProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactProps(obj: AlternateContactProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_AlternateContactSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AlternateContactSpec defines the desired state of AlternateContact
 *
 * @schema AlternateContactSpec
 */
export interface AlternateContactSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema AlternateContactSpec#deletionPolicy
   */
  readonly deletionPolicy?: AlternateContactSpecDeletionPolicy;

  /**
   * @schema AlternateContactSpec#forProvider
   */
  readonly forProvider: AlternateContactSpecForProvider;

  /**
   * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
   *
   * @schema AlternateContactSpec#managementPolicy
   */
  readonly managementPolicy?: AlternateContactSpecManagementPolicy;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AlternateContactSpec#providerConfigRef
   */
  readonly providerConfigRef?: AlternateContactSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema AlternateContactSpec#providerRef
   */
  readonly providerRef?: AlternateContactSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AlternateContactSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: AlternateContactSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema AlternateContactSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AlternateContactSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'AlternateContactSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpec(obj: AlternateContactSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_AlternateContactSpecForProvider(obj.forProvider),
    'managementPolicy': obj.managementPolicy,
    'providerConfigRef': toJson_AlternateContactSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_AlternateContactSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_AlternateContactSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_AlternateContactSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema AlternateContactSpecDeletionPolicy
 */
export enum AlternateContactSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema AlternateContactSpecForProvider
 */
export interface AlternateContactSpecForProvider {
  /**
   * ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
   *
   * @schema AlternateContactSpecForProvider#accountId
   */
  readonly accountId?: string;

  /**
   * Type of the alternate contact. Allowed values are: BILLING, OPERATIONS, SECURITY.
   *
   * @schema AlternateContactSpecForProvider#alternateContactType
   */
  readonly alternateContactType: string;

  /**
   * An email address for the alternate contact.
   *
   * @schema AlternateContactSpecForProvider#emailAddress
   */
  readonly emailAddress?: string;

  /**
   * Name of the alternate contact.
   *
   * @schema AlternateContactSpecForProvider#name
   */
  readonly name?: string;

  /**
   * Phone number for the alternate contact.
   *
   * @schema AlternateContactSpecForProvider#phoneNumber
   */
  readonly phoneNumber?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema AlternateContactSpecForProvider#region
   */
  readonly region: string;

  /**
   * Title for the alternate contact.
   *
   * @schema AlternateContactSpecForProvider#title
   */
  readonly title?: string;

}

/**
 * Converts an object of type 'AlternateContactSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecForProvider(obj: AlternateContactSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'accountId': obj.accountId,
    'alternateContactType': obj.alternateContactType,
    'emailAddress': obj.emailAddress,
    'name': obj.name,
    'phoneNumber': obj.phoneNumber,
    'region': obj.region,
    'title': obj.title,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicy specifies the level of control Crossplane has over the managed external resource. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
 *
 * @schema AlternateContactSpecManagementPolicy
 */
export enum AlternateContactSpecManagementPolicy {
  /** FullControl */
  FULL_CONTROL = "FullControl",
  /** ObserveOnly */
  OBSERVE_ONLY = "ObserveOnly",
  /** OrphanOnDelete */
  ORPHAN_ON_DELETE = "OrphanOnDelete",
}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AlternateContactSpecProviderConfigRef
 */
export interface AlternateContactSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AlternateContactSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AlternateContactSpecProviderConfigRef#policy
   */
  readonly policy?: AlternateContactSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'AlternateContactSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecProviderConfigRef(obj: AlternateContactSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AlternateContactSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema AlternateContactSpecProviderRef
 */
export interface AlternateContactSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema AlternateContactSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AlternateContactSpecProviderRef#policy
   */
  readonly policy?: AlternateContactSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'AlternateContactSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecProviderRef(obj: AlternateContactSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AlternateContactSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsTo
 */
export interface AlternateContactSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: AlternateContactSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: AlternateContactSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'AlternateContactSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecPublishConnectionDetailsTo(obj: AlternateContactSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_AlternateContactSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_AlternateContactSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema AlternateContactSpecWriteConnectionSecretToRef
 */
export interface AlternateContactSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AlternateContactSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AlternateContactSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'AlternateContactSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecWriteConnectionSecretToRef(obj: AlternateContactSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AlternateContactSpecProviderConfigRefPolicy
 */
export interface AlternateContactSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AlternateContactSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: AlternateContactSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AlternateContactSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: AlternateContactSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AlternateContactSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecProviderConfigRefPolicy(obj: AlternateContactSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema AlternateContactSpecProviderRefPolicy
 */
export interface AlternateContactSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AlternateContactSpecProviderRefPolicy#resolution
   */
  readonly resolution?: AlternateContactSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AlternateContactSpecProviderRefPolicy#resolve
   */
  readonly resolve?: AlternateContactSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'AlternateContactSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecProviderRefPolicy(obj: AlternateContactSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsToConfigRef
 */
export interface AlternateContactSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'AlternateContactSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecPublishConnectionDetailsToConfigRef(obj: AlternateContactSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsToMetadata
 */
export interface AlternateContactSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'AlternateContactSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecPublishConnectionDetailsToMetadata(obj: AlternateContactSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AlternateContactSpecProviderConfigRefPolicyResolution
 */
export enum AlternateContactSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AlternateContactSpecProviderConfigRefPolicyResolve
 */
export enum AlternateContactSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AlternateContactSpecProviderRefPolicyResolution
 */
export enum AlternateContactSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AlternateContactSpecProviderRefPolicyResolve
 */
export enum AlternateContactSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy(obj: AlternateContactSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum AlternateContactSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

