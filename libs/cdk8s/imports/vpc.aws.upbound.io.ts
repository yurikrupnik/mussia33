// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * NetworkPerformanceMetricSubscription is the Schema for the NetworkPerformanceMetricSubscriptions API. Provides a resource to manage an Infrastructure Performance subscription.
 *
 * @schema NetworkPerformanceMetricSubscription
 */
export class NetworkPerformanceMetricSubscription extends ApiObject {
  /**
   * Returns the apiVersion and kind for "NetworkPerformanceMetricSubscription"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'vpc.aws.upbound.io/v1beta1',
    kind: 'NetworkPerformanceMetricSubscription',
  }

  /**
   * Renders a Kubernetes manifest for "NetworkPerformanceMetricSubscription".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: NetworkPerformanceMetricSubscriptionProps): any {
    return {
      ...NetworkPerformanceMetricSubscription.GVK,
      ...toJson_NetworkPerformanceMetricSubscriptionProps(props),
    };
  }

  /**
   * Defines a "NetworkPerformanceMetricSubscription" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NetworkPerformanceMetricSubscriptionProps) {
    super(scope, id, {
      ...NetworkPerformanceMetricSubscription.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...NetworkPerformanceMetricSubscription.GVK,
      ...toJson_NetworkPerformanceMetricSubscriptionProps(resolved),
    };
  }
}

/**
 * NetworkPerformanceMetricSubscription is the Schema for the NetworkPerformanceMetricSubscriptions API. Provides a resource to manage an Infrastructure Performance subscription.
 *
 * @schema NetworkPerformanceMetricSubscription
 */
export interface NetworkPerformanceMetricSubscriptionProps {
  /**
   * @schema NetworkPerformanceMetricSubscription#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * NetworkPerformanceMetricSubscriptionSpec defines the desired state of NetworkPerformanceMetricSubscription
   *
   * @schema NetworkPerformanceMetricSubscription#spec
   */
  readonly spec: NetworkPerformanceMetricSubscriptionSpec;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionProps(obj: NetworkPerformanceMetricSubscriptionProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_NetworkPerformanceMetricSubscriptionSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * NetworkPerformanceMetricSubscriptionSpec defines the desired state of NetworkPerformanceMetricSubscription
 *
 * @schema NetworkPerformanceMetricSubscriptionSpec
 */
export interface NetworkPerformanceMetricSubscriptionSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpec#deletionPolicy
   */
  readonly deletionPolicy?: NetworkPerformanceMetricSubscriptionSpecDeletionPolicy;

  /**
   * @schema NetworkPerformanceMetricSubscriptionSpec#forProvider
   */
  readonly forProvider: NetworkPerformanceMetricSubscriptionSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpec#providerConfigRef
   */
  readonly providerConfigRef?: NetworkPerformanceMetricSubscriptionSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema NetworkPerformanceMetricSubscriptionSpec#providerRef
   */
  readonly providerRef?: NetworkPerformanceMetricSubscriptionSpecProviderRef;

  /**
   * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpec#publishConnectionDetailsTo
   */
  readonly publishConnectionDetailsTo?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpec(obj: NetworkPerformanceMetricSubscriptionSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'deletionPolicy': obj.deletionPolicy,
    'forProvider': toJson_NetworkPerformanceMetricSubscriptionSpecForProvider(obj.forProvider),
    'providerConfigRef': toJson_NetworkPerformanceMetricSubscriptionSpecProviderConfigRef(obj.providerConfigRef),
    'providerRef': toJson_NetworkPerformanceMetricSubscriptionSpecProviderRef(obj.providerRef),
    'publishConnectionDetailsTo': toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo(obj.publishConnectionDetailsTo),
    'writeConnectionSecretToRef': toJson_NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecDeletionPolicy
 */
export enum NetworkPerformanceMetricSubscriptionSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * @schema NetworkPerformanceMetricSubscriptionSpecForProvider
 */
export interface NetworkPerformanceMetricSubscriptionSpecForProvider {
  /**
   * The target Region or Availability Zone that the metric subscription is enabled for. For example, eu-west-1.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecForProvider#destination
   */
  readonly destination: string;

  /**
   * The metric used for the enabled subscription. Valid values: aggregate-latency. Default: aggregate-latency.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecForProvider#metric
   */
  readonly metric?: string;

  /**
   * Region is the region you'd like your resource to be created in.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecForProvider#region
   */
  readonly region: string;

  /**
   * The source Region or Availability Zone that the metric subscription is enabled for. For example, us-east-1.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecForProvider#source
   */
  readonly source: string;

  /**
   * The statistic used for the enabled subscription. Valid values: p50. Default: p50.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecForProvider#statistic
   */
  readonly statistic?: string;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecForProvider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecForProvider(obj: NetworkPerformanceMetricSubscriptionSpecForProvider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': obj.destination,
    'metric': obj.metric,
    'region': obj.region,
    'source': obj.source,
    'statistic': obj.statistic,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRef
 */
export interface NetworkPerformanceMetricSubscriptionSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRef#policy
   */
  readonly policy?: NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecProviderConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecProviderConfigRef(obj: NetworkPerformanceMetricSubscriptionSpecProviderConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderRef
 */
export interface NetworkPerformanceMetricSubscriptionSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderRef#policy
   */
  readonly policy?: NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecProviderRef(obj: NetworkPerformanceMetricSubscriptionSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo
 */
export interface NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo {
  /**
   * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo#configRef
   */
  readonly configRef?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef;

  /**
   * Metadata is the metadata for connection secret.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo#metadata
   */
  readonly metadata?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata;

  /**
   * Name is the name of the connection secret.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo#name
   */
  readonly name: string;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo(obj: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsTo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configRef': toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef(obj.configRef),
    'metadata': toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata(obj.metadata),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef
 */
export interface NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef(obj: NetworkPerformanceMetricSubscriptionSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy
 */
export interface NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy#resolution
   */
  readonly resolution?: NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy#resolve
   */
  readonly resolve?: NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy(obj: NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Policies for referencing.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy
 */
export interface NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy#resolution
   */
  readonly resolution?: NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy#resolve
   */
  readonly resolve?: NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolve;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy(obj: NetworkPerformanceMetricSubscriptionSpecProviderRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef
 */
export interface NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef#name
   */
  readonly name: string;

  /**
   * Policies for referencing.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef#policy
   */
  readonly policy?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef(obj: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'policy': toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy(obj.policy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Metadata is the metadata for connection secret.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata
 */
export interface NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata {
  /**
   * Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata(obj: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToMetadata | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolution
 */
export enum NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolve
 */
export enum NetworkPerformanceMetricSubscriptionSpecProviderConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolution
 */
export enum NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolve
 */
export enum NetworkPerformanceMetricSubscriptionSpecProviderRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

/**
 * Policies for referencing.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy
 */
export interface NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy {
  /**
   * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy#resolution
   */
  readonly resolution?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolution;

  /**
   * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
   *
   * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy#resolve
   */
  readonly resolve?: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolve;

}

/**
 * Converts an object of type 'NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy(obj: NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resolution': obj.resolution,
    'resolve': obj.resolve,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolution
 */
export enum NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolution {
  /** Required */
  REQUIRED = "Required",
  /** Optional */
  OPTIONAL = "Optional",
}

/**
 * Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
 *
 * @schema NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolve
 */
export enum NetworkPerformanceMetricSubscriptionSpecPublishConnectionDetailsToConfigRefPolicyResolve {
  /** Always */
  ALWAYS = "Always",
  /** IfNotPresent */
  IF_NOT_PRESENT = "IfNotPresent",
}

