// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Configuration is the Schema for the configurations API
 *
 * @schema Configuration
 */
export class Configuration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Configuration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'terraform.core.oam.dev/v1beta1',
    kind: 'Configuration',
  }

  /**
   * Renders a Kubernetes manifest for "Configuration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConfigurationProps = {}): any {
    return {
      ...Configuration.GVK,
      ...toJson_ConfigurationProps(props),
    };
  }

  /**
   * Defines a "Configuration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConfigurationProps = {}) {
    super(scope, id, {
      ...Configuration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Configuration.GVK,
      ...toJson_ConfigurationProps(resolved),
    };
  }
}

/**
 * Configuration is the Schema for the configurations API
 *
 * @schema Configuration
 */
export interface ConfigurationProps {
  /**
   * @schema Configuration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ConfigurationSpec defines the desired state of Configuration
   *
   * @schema Configuration#spec
   */
  readonly spec?: ConfigurationSpec;

}

/**
 * Converts an object of type 'ConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationProps(obj: ConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ConfigurationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigurationSpec defines the desired state of Configuration
 *
 * @schema ConfigurationSpec
 */
export interface ConfigurationSpec {
  /**
   * JSON is the Terraform JSON syntax configuration. Deprecated: after v0.3.1, use HCL instead.
   *
   * @schema ConfigurationSpec#JSON
   */
  readonly json?: string;

  /**
   * Backend stores the state in a Kubernetes secret with locking done using a Lease resource. TODO(zzxwill) If a backend exists in HCL/JSON, this can be optional. Currently, if Backend is not set by users, it still will set by the controller, ignoring the settings in HCL/JSON backend
   *
   * @schema ConfigurationSpec#backend
   */
  readonly backend?: ConfigurationSpecBackend;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ConfigurationSpec#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * HCL is the Terraform HCL type configuration
   *
   * @schema ConfigurationSpec#hcl
   */
  readonly hcl?: string;

  /**
   * Path is the sub-directory of remote git repository.
   *
   * @schema ConfigurationSpec#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ConfigurationSpec#providerRef
   */
  readonly providerRef?: ConfigurationSpecProviderRef;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ConfigurationSpec#region
   */
  readonly region?: string;

  /**
   * Remote is a git repo which contains hcl files. Currently, only public git repos are supported.
   *
   * @schema ConfigurationSpec#remote
   */
  readonly remote?: string;

  /**
   * @schema ConfigurationSpec#variable
   */
  readonly variable?: any;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ConfigurationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ConfigurationSpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ConfigurationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationSpec(obj: ConfigurationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'JSON': obj.json,
    'backend': toJson_ConfigurationSpecBackend(obj.backend),
    'deleteResource': obj.deleteResource,
    'hcl': obj.hcl,
    'path': obj.path,
    'providerRef': toJson_ConfigurationSpecProviderRef(obj.providerRef),
    'region': obj.region,
    'remote': obj.remote,
    'variable': obj.variable,
    'writeConnectionSecretToRef': toJson_ConfigurationSpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Backend stores the state in a Kubernetes secret with locking done using a Lease resource. TODO(zzxwill) If a backend exists in HCL/JSON, this can be optional. Currently, if Backend is not set by users, it still will set by the controller, ignoring the settings in HCL/JSON backend
 *
 * @schema ConfigurationSpecBackend
 */
export interface ConfigurationSpecBackend {
  /**
   * InClusterConfig Used to authenticate to the cluster from inside a pod. Only `true` is allowed
   *
   * @schema ConfigurationSpecBackend#inClusterConfig
   */
  readonly inClusterConfig?: boolean;

  /**
   * SecretSuffix used when creating secrets. Secrets will be named in the format: tfstate-{workspace}-{secretSuffix}
   *
   * @schema ConfigurationSpecBackend#secretSuffix
   */
  readonly secretSuffix?: string;

}

/**
 * Converts an object of type 'ConfigurationSpecBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationSpecBackend(obj: ConfigurationSpecBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'inClusterConfig': obj.inClusterConfig,
    'secretSuffix': obj.secretSuffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ConfigurationSpecProviderRef
 */
export interface ConfigurationSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConfigurationSpecProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ConfigurationSpecProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ConfigurationSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationSpecProviderRef(obj: ConfigurationSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ConfigurationSpecWriteConnectionSecretToRef
 */
export interface ConfigurationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ConfigurationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ConfigurationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ConfigurationSpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationSpecWriteConnectionSecretToRef(obj: ConfigurationSpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * Configuration is the Schema for the configurations API
 *
 * @schema ConfigurationV1Beta2
 */
export class ConfigurationV1Beta2 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ConfigurationV1Beta2"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'terraform.core.oam.dev/v1beta2',
    kind: 'Configuration',
  }

  /**
   * Renders a Kubernetes manifest for "ConfigurationV1Beta2".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConfigurationV1Beta2Props = {}): any {
    return {
      ...ConfigurationV1Beta2.GVK,
      ...toJson_ConfigurationV1Beta2Props(props),
    };
  }

  /**
   * Defines a "ConfigurationV1Beta2" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConfigurationV1Beta2Props = {}) {
    super(scope, id, {
      ...ConfigurationV1Beta2.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ConfigurationV1Beta2.GVK,
      ...toJson_ConfigurationV1Beta2Props(resolved),
    };
  }
}

/**
 * Configuration is the Schema for the configurations API
 *
 * @schema ConfigurationV1Beta2
 */
export interface ConfigurationV1Beta2Props {
  /**
   * @schema ConfigurationV1Beta2#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ConfigurationSpec defines the desired state of Configuration
   *
   * @schema ConfigurationV1Beta2#spec
   */
  readonly spec?: ConfigurationV1Beta2Spec;

}

/**
 * Converts an object of type 'ConfigurationV1Beta2Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Beta2Props(obj: ConfigurationV1Beta2Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ConfigurationV1Beta2Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ConfigurationSpec defines the desired state of Configuration
 *
 * @schema ConfigurationV1Beta2Spec
 */
export interface ConfigurationV1Beta2Spec {
  /**
   * Backend stores the state in a Kubernetes secret with locking done using a Lease resource. TODO(zzxwill) If a backend exists in HCL/JSON, this can be optional. Currently, if Backend is not set by users, it still will set by the controller, ignoring the settings in HCL/JSON backend
   *
   * @schema ConfigurationV1Beta2Spec#backend
   */
  readonly backend?: ConfigurationV1Beta2SpecBackend;

  /**
   * Region is cloud provider's region. It will override the region in the region field of ProviderReference
   *
   * @schema ConfigurationV1Beta2Spec#customRegion
   */
  readonly customRegion?: string;

  /**
   * DeleteResource will determine whether provisioned cloud resources will be deleted when CR is deleted
   *
   * @schema ConfigurationV1Beta2Spec#deleteResource
   */
  readonly deleteResource?: boolean;

  /**
   * HCL is the Terraform HCL type configuration
   *
   * @schema ConfigurationV1Beta2Spec#hcl
   */
  readonly hcl?: string;

  /**
   * Path is the sub-directory of remote git repository.
   *
   * @schema ConfigurationV1Beta2Spec#path
   */
  readonly path?: string;

  /**
   * ProviderReference specifies the reference to Provider
   *
   * @schema ConfigurationV1Beta2Spec#providerRef
   */
  readonly providerRef?: ConfigurationV1Beta2SpecProviderRef;

  /**
   * Remote is a git repo which contains hcl files. Currently, only public git repos are supported.
   *
   * @schema ConfigurationV1Beta2Spec#remote
   */
  readonly remote?: string;

  /**
   * @schema ConfigurationV1Beta2Spec#variable
   */
  readonly variable?: any;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ConfigurationV1Beta2Spec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ConfigurationV1Beta2SpecWriteConnectionSecretToRef;

}

/**
 * Converts an object of type 'ConfigurationV1Beta2Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Beta2Spec(obj: ConfigurationV1Beta2Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backend': toJson_ConfigurationV1Beta2SpecBackend(obj.backend),
    'customRegion': obj.customRegion,
    'deleteResource': obj.deleteResource,
    'hcl': obj.hcl,
    'path': obj.path,
    'providerRef': toJson_ConfigurationV1Beta2SpecProviderRef(obj.providerRef),
    'remote': obj.remote,
    'variable': obj.variable,
    'writeConnectionSecretToRef': toJson_ConfigurationV1Beta2SpecWriteConnectionSecretToRef(obj.writeConnectionSecretToRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Backend stores the state in a Kubernetes secret with locking done using a Lease resource. TODO(zzxwill) If a backend exists in HCL/JSON, this can be optional. Currently, if Backend is not set by users, it still will set by the controller, ignoring the settings in HCL/JSON backend
 *
 * @schema ConfigurationV1Beta2SpecBackend
 */
export interface ConfigurationV1Beta2SpecBackend {
  /**
   * InClusterConfig Used to authenticate to the cluster from inside a pod. Only `true` is allowed
   *
   * @schema ConfigurationV1Beta2SpecBackend#inClusterConfig
   */
  readonly inClusterConfig?: boolean;

  /**
   * SecretSuffix used when creating secrets. Secrets will be named in the format: tfstate-{workspace}-{secretSuffix}
   *
   * @schema ConfigurationV1Beta2SpecBackend#secretSuffix
   */
  readonly secretSuffix?: string;

}

/**
 * Converts an object of type 'ConfigurationV1Beta2SpecBackend' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Beta2SpecBackend(obj: ConfigurationV1Beta2SpecBackend | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'inClusterConfig': obj.inClusterConfig,
    'secretSuffix': obj.secretSuffix,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderReference specifies the reference to Provider
 *
 * @schema ConfigurationV1Beta2SpecProviderRef
 */
export interface ConfigurationV1Beta2SpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConfigurationV1Beta2SpecProviderRef#name
   */
  readonly name: string;

  /**
   * Namespace of the referenced object.
   *
   * @schema ConfigurationV1Beta2SpecProviderRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ConfigurationV1Beta2SpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Beta2SpecProviderRef(obj: ConfigurationV1Beta2SpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ConfigurationV1Beta2SpecWriteConnectionSecretToRef
 */
export interface ConfigurationV1Beta2SpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ConfigurationV1Beta2SpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ConfigurationV1Beta2SpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ConfigurationV1Beta2SpecWriteConnectionSecretToRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ConfigurationV1Beta2SpecWriteConnectionSecretToRef(obj: ConfigurationV1Beta2SpecWriteConnectionSecretToRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

