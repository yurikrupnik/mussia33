// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `_proto/products.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.ListRequestDto)
pub struct ListRequestDto {
    // message fields
    // @@protoc_insertion_point(field:products.ListRequestDto.limit)
    pub limit: ::std::string::String,
    // @@protoc_insertion_point(field:products.ListRequestDto.projection)
    pub projection: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:products.ListRequestDto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListRequestDto {
    fn default() -> &'a ListRequestDto {
        <ListRequestDto as ::protobuf::Message>::default_instance()
    }
}

impl ListRequestDto {
    pub fn new() -> ListRequestDto {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &ListRequestDto| { &m.limit },
            |m: &mut ListRequestDto| { &mut m.limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "projection",
            |m: &ListRequestDto| { &m.projection },
            |m: &mut ListRequestDto| { &mut m.projection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListRequestDto>(
            "ListRequestDto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListRequestDto {
    const NAME: &'static str = "ListRequestDto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.limit = is.read_string()?;
                },
                18 => {
                    self.projection.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.limit.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.limit);
        }
        for value in &self.projection {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.limit.is_empty() {
            os.write_string(1, &self.limit)?;
        }
        for v in &self.projection {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListRequestDto {
        ListRequestDto::new()
    }

    fn clear(&mut self) {
        self.limit.clear();
        self.projection.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListRequestDto {
        static instance: ListRequestDto = ListRequestDto {
            limit: ::std::string::String::new(),
            projection: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListRequestDto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListRequestDto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListRequestDto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRequestDto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.UpdateRequestDto)
pub struct UpdateRequestDto {
    // message fields
    // @@protoc_insertion_point(field:products.UpdateRequestDto.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:products.UpdateRequestDto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateRequestDto {
    fn default() -> &'a UpdateRequestDto {
        <UpdateRequestDto as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRequestDto {
    pub fn new() -> UpdateRequestDto {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UpdateRequestDto| { &m.id },
            |m: &mut UpdateRequestDto| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateRequestDto>(
            "UpdateRequestDto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateRequestDto {
    const NAME: &'static str = "UpdateRequestDto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateRequestDto {
        UpdateRequestDto::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateRequestDto {
        static instance: UpdateRequestDto = UpdateRequestDto {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateRequestDto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateRequestDto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateRequestDto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRequestDto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.VoidResponse)
pub struct VoidResponse {
    // special fields
    // @@protoc_insertion_point(special_field:products.VoidResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VoidResponse {
    fn default() -> &'a VoidResponse {
        <VoidResponse as ::protobuf::Message>::default_instance()
    }
}

impl VoidResponse {
    pub fn new() -> VoidResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VoidResponse>(
            "VoidResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VoidResponse {
    const NAME: &'static str = "VoidResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VoidResponse {
        VoidResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VoidResponse {
        static instance: VoidResponse = VoidResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VoidResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VoidResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VoidResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoidResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.DeleteUserRequestDto)
pub struct DeleteUserRequestDto {
    // message fields
    // @@protoc_insertion_point(field:products.DeleteUserRequestDto.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:products.DeleteUserRequestDto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteUserRequestDto {
    fn default() -> &'a DeleteUserRequestDto {
        <DeleteUserRequestDto as ::protobuf::Message>::default_instance()
    }
}

impl DeleteUserRequestDto {
    pub fn new() -> DeleteUserRequestDto {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteUserRequestDto| { &m.id },
            |m: &mut DeleteUserRequestDto| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteUserRequestDto>(
            "DeleteUserRequestDto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteUserRequestDto {
    const NAME: &'static str = "DeleteUserRequestDto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteUserRequestDto {
        DeleteUserRequestDto::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteUserRequestDto {
        static instance: DeleteUserRequestDto = DeleteUserRequestDto {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteUserRequestDto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteUserRequestDto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteUserRequestDto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteUserRequestDto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.GetUserRequestDto)
pub struct GetUserRequestDto {
    // message fields
    // @@protoc_insertion_point(field:products.GetUserRequestDto.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:products.GetUserRequestDto.projection)
    pub projection: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:products.GetUserRequestDto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserRequestDto {
    fn default() -> &'a GetUserRequestDto {
        <GetUserRequestDto as ::protobuf::Message>::default_instance()
    }
}

impl GetUserRequestDto {
    pub fn new() -> GetUserRequestDto {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &GetUserRequestDto| { &m.id },
            |m: &mut GetUserRequestDto| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "projection",
            |m: &GetUserRequestDto| { &m.projection },
            |m: &mut GetUserRequestDto| { &mut m.projection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserRequestDto>(
            "GetUserRequestDto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserRequestDto {
    const NAME: &'static str = "GetUserRequestDto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.projection.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.projection {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.projection {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserRequestDto {
        GetUserRequestDto::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.projection.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserRequestDto {
        static instance: GetUserRequestDto = GetUserRequestDto {
            id: ::std::string::String::new(),
            projection: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserRequestDto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserRequestDto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserRequestDto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserRequestDto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.Product)
pub struct Product {
    // message fields
    // @@protoc_insertion_point(field:products.Product._id)
    pub _id: ::std::string::String,
    // @@protoc_insertion_point(field:products.Product.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:products.Product.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Product {
    fn default() -> &'a Product {
        <Product as ::protobuf::Message>::default_instance()
    }
}

impl Product {
    pub fn new() -> Product {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_id",
            |m: &Product| { &m._id },
            |m: &mut Product| { &mut m._id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Product| { &m.name },
            |m: &mut Product| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Product>(
            "Product",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Product {
    const NAME: &'static str = "Product";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self._id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self._id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self._id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self._id.is_empty() {
            os.write_string(1, &self._id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Product {
        Product::new()
    }

    fn clear(&mut self) {
        self._id.clear();
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Product {
        static instance: Product = Product {
            _id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Product {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Product").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Product {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Product {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:products.Products)
pub struct Products {
    // message fields
    // @@protoc_insertion_point(field:products.Products.data)
    pub data: ::std::vec::Vec<Product>,
    // special fields
    // @@protoc_insertion_point(special_field:products.Products.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Products {
    fn default() -> &'a Products {
        <Products as ::protobuf::Message>::default_instance()
    }
}

impl Products {
    pub fn new() -> Products {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &Products| { &m.data },
            |m: &mut Products| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Products>(
            "Products",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Products {
    const NAME: &'static str = "Products";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Products {
        Products::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Products {
        static instance: Products = Products {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Products {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Products").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Products {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Products {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15_proto/products.proto\x12\x08products\"F\n\x0eListRequestDto\x12\
    \x14\n\x05limit\x18\x01\x20\x01(\tR\x05limit\x12\x1e\n\nprojection\x18\
    \x02\x20\x03(\tR\nprojection\"\"\n\x10UpdateRequestDto\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\"\x0e\n\x0cVoidResponse\"&\n\x14DeleteUserReq\
    uestDto\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"C\n\x11GetUserRequest\
    Dto\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1e\n\nprojection\x18\
    \x02\x20\x03(\tR\nprojection\".\n\x07Product\x12\x0f\n\x03_id\x18\x01\
    \x20\x01(\tR\x02Id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"1\n\
    \x08Products\x12%\n\x04data\x18\x01\x20\x03(\x0b2\x11.products.ProductR\
    \x04data2\xf5\x02\n\x12ProductsController\x120\n\x06Create\x12\x11.produ\
    cts.Product\x1a\x11.products.Product\"\0\x127\n\x03Get\x12\x1b.products.\
    GetUserRequestDto\x1a\x11.products.Product\"\0\x12B\n\x06Delete\x12\x1e.\
    products.DeleteUserRequestDto\x1a\x16.products.VoidResponse\"\0\x129\n\
    \x06Update\x12\x1a.products.UpdateRequestDto\x1a\x11.products.Product\"\
    \0\x126\n\x04List\x12\x18.products.ListRequestDto\x1a\x12.products.Produ\
    cts\"\0\x12=\n\nListStream\x12\x18.products.ListRequestDto\x1a\x11.produ\
    cts.Product\"\00\x01J\xb8\t\n\x06\x12\x04\0\0)\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n<\n\x02\x06\0\x12\x04\
    \x05\0\r\x01\x1a0\x20Declare\x20a\x20service\x20for\x20each\x20controlle\
    r\x20you\x20have\n\n\n\n\x03\x06\0\x01\x12\x03\x05\x08\x1a\nE\n\x04\x06\
    \0\x02\0\x12\x03\x07\x02+\x1a8\x20Declare\x20an\x20rpc\x20for\x20each\
    \x20method\x20that\x20is\x20called\x20via\x20gRPC\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03\x07\x06\x0c\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\
    \x0e\x15\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07\x20'\n\x0b\n\x04\x06\0\
    \x02\x01\x12\x03\x08\x022\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x06\
    \t\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x0b\x1c\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x08'.\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x02=\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x06\x0c\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\t\x0e\"\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t-9\n\x0b\n\
    \x04\x06\0\x02\x03\x12\x03\n\x024\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \n\x06\x0c\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\n\x0e\x1e\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\n)0\n\x0b\n\x04\x06\0\x02\x04\x12\x03\x0b\x02\
    1\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0b\x06\n\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03\x0b\x0c\x1a\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0b%-\
    \n\x0b\n\x04\x06\0\x02\x05\x12\x03\x0c\x02=\n\x0c\n\x05\x06\0\x02\x05\
    \x01\x12\x03\x0c\x06\x10\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x0c\x12\
    \x20\n\x0c\n\x05\x06\0\x02\x05\x06\x12\x03\x0c+1\n\x0c\n\x05\x06\0\x02\
    \x05\x03\x12\x03\x0c29\n\n\n\x02\x04\0\x12\x04\x0f\0\x12\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x0f\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x10\x02\
    \x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x10\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x11\
    \x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x11\x02!\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x12\x1c\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x11\x1f\x20\n\n\n\x02\x04\x01\x12\x04\x14\0\x16\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x14\x08\x18\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x15\x02\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\x15\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x15\x0e\x0f\n\t\n\x02\x04\x02\x12\x03\x18\0\x17\n\n\n\x03\x04\
    \x02\x01\x12\x03\x18\x08\x14\n\n\n\x02\x04\x03\x12\x04\x19\0\x1b\x01\n\n\
    \n\x03\x04\x03\x01\x12\x03\x19\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x1a\x02\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03\x1a\t\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03\x1a\x0e\x0f\n\n\n\x02\x04\x04\x12\x04\x1d\0\x20\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03\x1d\x08\x19\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1e\
    \x02\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x1e\t\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x1e\x0e\x0f\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1f\x02!\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x03\x1f\x02\n\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03\x1f\x0b\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1f\x12\
    \x1c\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1f\x1f\x20\n\n\n\x02\x04\
    \x05\x12\x04\"\0%\x01\n\n\n\x03\x04\x05\x01\x12\x03\"\x08\x0f\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03#\x02\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\
    \x03#\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\t\x0c\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03#\x0f\x10\n\x0b\n\x04\x04\x05\x02\x01\x12\x03$\
    \x02\x12\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x03$\t\r\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03$\x10\x11\n\n\n\x02\x04\x06\x12\x04'\0)\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03'\x08\x10\n\x0b\n\x04\x04\x06\x02\0\x12\x03(\x02\x1c\n\x0c\n\x05\
    \x04\x06\x02\0\x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03(\
    \x0b\x12\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03(\x13\x17\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03(\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(ListRequestDto::generated_message_descriptor_data());
            messages.push(UpdateRequestDto::generated_message_descriptor_data());
            messages.push(VoidResponse::generated_message_descriptor_data());
            messages.push(DeleteUserRequestDto::generated_message_descriptor_data());
            messages.push(GetUserRequestDto::generated_message_descriptor_data());
            messages.push(Product::generated_message_descriptor_data());
            messages.push(Products::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
